var search_data = {"index":{"searchIndex":["argf","argumenterror","array","basicobject","binding","class","closedqueueerror","comparable","complex","continuation","data","dir","env","eoferror","encoding","compatibilityerror","converter","converternotfounderror","invalidbytesequenceerror","undefinedconversionerror","encodingerror","enumerable","enumerator","arithmeticsequence","chain","generator","lazy","producer","product","yielder","errno","exception","falseclass","fiber","pool","schedulerinterface","fibererror","file","constants","stat","filetest","float","floatdomainerror","frozenerror","gc","profiler","hash","io","buffer","accesserror","allocationerror","invalidatederror","lockederror","maskerror","eagainwaitreadable","eagainwaitwritable","einprogresswaitreadable","einprogresswaitwritable","ewouldblockwaitreadable","ewouldblockwaitwritable","waitreadable","waitwritable","ioerror","indexerror","integer","interrupt","kernel","keyerror","loaderror","localjumperror","marshal","matchdata","math","domainerror","method","module","nameerror","nilclass","nomatchingpatternerror","nomatchingpatternkeyerror","nomemoryerror","nomethoderror","notimplementederror","numeric","object","objectspace","weakmap","proc","process","gid","status","sys","tms","uid","rdoc","markupreference","dummyclass","dummymodule","ractor","closederror","error","isolationerror","movederror","movedobject","remoteerror","unsafeerror","random","formatter","range","rangeerror","rational","refinement","regexp","timeouterror","regexperror","ripper","rubyvm","abstractsyntaxtree","node","instructionsequence","runtimeerror","scripterror","securityerror","signal","signalexception","standarderror","stopiteration","string","struct","symbol","syntaxerror","systemcallerror","systemexit","systemstackerror","thread","backtrace","location","conditionvariable","mutex","queue","sizedqueue","threaderror","threadgroup","time","tracepoint","trueclass","typeerror","unboundmethod","uncaughtthrowerror","unicodenormalize","warning","zerodivisionerror","fatal","!()","!()","!=()","!=()","!~~()","=~()","=~()","=~()",">()",">()",">()",">()",">()",">=()",">=()",">=()",">=()",">=()",">>()",">>()",">>()",">>()","array()","complex()","hash()","integer()","rational()","string()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","^()","^()","^()","^()","^()","__callee__()","__dir__()","__id__()","__id__()","__method__()","__send__()","__send__()","_enumerable_collect()","_enumerable_collect_concat()","_enumerable_drop()","_enumerable_drop_while()","_enumerable_filter()","_enumerable_filter_map()","_enumerable_find_all()","_enumerable_flat_map()","_enumerable_grep()","_enumerable_grep_v()","_enumerable_map()","_enumerable_reject()","_enumerable_select()","_enumerable_take()","_enumerable_take_while()","_enumerable_uniq()","_enumerable_zip()","_fork()","_id2ref()","`()","abort()","abort()","abort_on_exception()","abort_on_exception()","abort_on_exception=()","abort_on_exception=()","abs()","abs()","abs()","abs2()","abs2()","absolute_path()","absolute_path()","absolute_path()","absolute_path?()","acos()","acosh()","add()","add_stress_to_class()","add_trace_func()","address_resolve()","advise()","alias_method()","aliases()","alive?()","alive?()","all?()","all?()","all_symbols()","allbits?()","allocate()","ancestors()","and!()","angle()","angle()","angle()","any?()","any?()","any?()","anybits?()","append()","arg()","arg()","arg()","args()","args_directive()","argv()","argv0()","arity()","arity()","arity()","ascii_compatible?()","ascii_only?()","asciicompat_encoding()","asctime()","asin()","asinh()","assoc()","assoc()","assoc()","at()","at_exit()","atan()","atan2()","atanh()","atime()","atime()","atime()","attr()","attr_accessor()","attr_reader()","attr_writer()","auto_compact()","auto_compact=()","autoclose=()","autoclose?()","autoload()","autoload()","autoload?()","autoload?()","b()","backtrace()","backtrace()","backtrace()","backtrace_locations()","backtrace_locations()","backtrace_locations()","base_label()","base_label()","basename()","begin()","begin()","begin()","between?()","bind()","bind_call()","binding()","binding()","binmode()","binmode()","binmode?()","binmode?()","binread()","binwrite()","birthtime()","birthtime()","birthtime()","blksize()","block()","block_given?()","blockdev?()","blockdev?()","blockdev?()","blocking?()","blocking?()","blocks()","broadcast()","bsearch()","bsearch()","bsearch_index()","byteindex()","byteoffset()","byterindex()","bytes()","bytes()","bytes()","bytesize()","byteslice()","bytesplice()","call()","call()","call()","call_seq_directive()","callcc()","caller()","caller_locations()","capitalize()","capitalize()","capitalize!()","captures()","casecmp()","casecmp()","casecmp?()","casecmp?()","casefold?()","catch()","cause()","cbrt()","ceil()","ceil()","ceil()","ceil()","ceil()","center()","chain()","change_privilege()","change_privilege()","chardev?()","chardev?()","chardev?()","chars()","chdir()","children()","children()","chmod()","chmod()","chomp()","chomp()","chomp!()","chop()","chop()","chop!()","chown()","chown()","chr()","chr()","chroot()","chunk()","chunk()","chunk_while()","chunk_while()","clamp()","class_eval()","class_exec()","class_variable_defined?()","class_variable_get()","class_variable_set()","class_variables()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clock_getres()","clock_gettime()","clone()","clone()","clone()","clone()","close()","close()","close()","close()","close()","close()","close_on_exec=()","close_on_exec?()","close_read()","close_write()","closed?()","closed?()","closed?()","codepoints()","coerce()","coerce()","coerce()","collect()","collect()","collect()","collect!()","collect_concat()","collect_concat()","column()","combination()","compact()","compact()","compact()","compact()","compact()","compact!()","compact!()","compare_by_identity()","compare_by_identity?()","compatible?()","compile()","compile()","compile_file()","compile_option()","compile_option=()","concat()","concat()","conj()","conj()","conjugate()","conjugate()","const_defined?()","const_get()","const_missing()","const_set()","const_source_location()","constants()","constants()","convert()","convpath()","copy()","copy_stream()","coredump?()","cos()","cosh()","count()","count()","count()","count()","count_objects()","cover?()","crypt()","ctime()","ctime()","ctime()","ctime()","current()","current()","current_scheduler()","curry()","curry()","cycle()","cycle()","daemon()","day()","debug_output()","debug_output=()","deconstruct()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","dedent_string()","dedup()","default()","default=()","default_external()","default_external=()","default_internal()","default_internal=()","default_proc()","default_proc=()","define()","define_finalizer()","define_method()","define_singleton_method()","delete()","delete()","delete()","delete()","delete()","delete()","delete!()","delete_at()","delete_if()","delete_if()","delete_if()","delete_prefix()","delete_prefix!()","delete_suffix()","delete_suffix!()","denominator()","denominator()","denominator()","denominator()","denominator()","deprecate_constant()","destination_encoding()","destination_encoding()","destination_encoding()","destination_encoding_name()","destination_encoding_name()","detach()","detailed_message()","detect()","dev()","dev_major()","dev_minor()","difference()","dig()","dig()","dig()","digits()","directory?()","directory?()","directory?()","dirname()","disable()","disasm()","disasm()","disassemble()","disassemble()","display()","div()","div()","divmod()","divmod()","divmod()","downcase()","downcase()","downcase!()","downto()","drop()","drop()","drop()","drop_while()","drop_while()","drop_while()","dst?()","dummy?()","dummy_instance_alias()","dummy_instance_method()","dummy_singleton_method()","dump()","dump()","dup()","dup()","dup()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_builtin()","each_byte()","each_byte()","each_byte()","each_caller_location()","each_char()","each_char()","each_char()","each_child()","each_child()","each_child()","each_codepoint()","each_codepoint()","each_codepoint()","each_cons()","each_entry()","each_grapheme_cluster()","each_index()","each_key()","each_key()","each_key()","each_line()","each_line()","each_line()","each_object()","each_pair()","each_pair()","each_pair()","each_pair()","each_slice()","each_value()","each_value()","each_value()","each_with_index()","each_with_index()","each_with_object()","each_with_object()","eager()","egid()","egid=()","eid()","eid()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","enable()","enabled?()","enclose()","enclosed?()","encode()","encode!()","encoding()","encoding()","encoding()","encoding()","end()","end()","end()","end_seen?()","end_with?()","end_with?()","enq()","entries()","entries()","entries()","enum_for()","enum_for()","eof()","eof()","eof?()","eof?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equal?()","equal?()","erf()","erfc()","errno()","error?()","error_bytes()","error_char()","escape()","euid()","euid=()","eval()","eval()","eval()","except()","except()","exception()","exception()","exclude_end?()","exclude_end?()","exec()","exec()","executable?()","executable?()","executable?()","executable_real?()","executable_real?()","executable_real?()","exist?()","exist?()","exist?()","exit()","exit()","exit()","exit()","exit!()","exit!()","exit_value()","exited?()","exitstatus()","exp()","expand_path()","extend()","external?()","external_encoding()","external_encoding()","extname()","fail()","fcntl()","fdatasync()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","feed()","fetch()","fetch()","fetch()","fetch()","fetch_values()","fiber()","file()","file?()","file?()","file?()","filename()","filename()","fileno()","fileno()","fileno()","fill()","filter()","filter()","filter()","filter()","filter()","filter()","filter!()","filter!()","filter!()","filter_map()","filter_map()","find()","find()","find_all()","find_all()","find_index()","find_index()","finish()","finite?()","finite?()","first()","first()","first()","first()","first_lineno()","fixed_encoding?()","flat_map()","flat_map()","flatten()","flatten()","flatten!()","flock()","floor()","floor()","floor()","floor()","floor()","flush()","for()","for_fd()","force()","force_encoding()","foreach()","foreach()","fork()","fork()","fork()","format()","free()","freeze()","freeze()","freeze()","freeze()","frexp()","friday?()","from_name()","from_name()","fsync()","ftype()","ftype()","full_message()","gamma()","gcd()","gcdlcm()","get_string()","get_value()","getbyte()","getbyte()","getbyte()","getc()","getc()","getegid()","geteuid()","getgid()","getgm()","getlocal()","getpgid()","getpgrp()","getpriority()","getrlimit()","gets()","gets()","gets()","getsid()","getuid()","getutc()","getwd()","gid()","gid()","gid=()","global_variables()","gm()","gmt?()","gmt_offset()","gmtime()","gmtoff()","grant_privilege()","grant_privilege()","grapheme_clusters()","grep()","grep()","grep_v()","grep_v()","group()","group_by()","groups()","groups=()","grpowned?()","grpowned?()","grpowned?()","gsub()","gsub()","gsub!()","handle_interrupt()","has_key?()","has_key?()","has_value?()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hex()","hexdump()","home()","hour()","hypot()","i()","id2name()","identical?()","identical?()","ignore_deadlock()","ignore_deadlock=()","imag()","imag()","imaginary()","imaginary()","import_methods()","include()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","included_modules()","incomplete_input?()","index()","index()","infinite?()","infinite?()","initgroups()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","inject()","ino()","inplace_mode()","inplace_mode=()","insert()","insert()","insert_output()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance_eval()","instance_eval()","instance_exec()","instance_exec()","instance_method()","instance_methods()","instance_of?()","instance_variable_defined?()","instance_variable_get()","instance_variable_set()","instance_variables()","intern()","intern()","internal?()","internal_encoding()","internal_encoding()","intersect?()","intersection()","invert()","invert()","io_read()","io_wait()","io_write()","ioctl()","is_a?()","isatty()","isdst()","issetugid()","iterator?()","itself()","join()","join()","join()","keep_if()","keep_if()","keep_if()","keep_script_lines()","keep_script_lines=()","kernel_sleep()","key()","key()","key()","key()","key?()","key?()","key?()","key?()","keys()","keys()","keys()","keys()","keyword_init?()","kill()","kill()","kill()","kind_of?()","label()","label()","lambda()","lambda?()","last()","last()","last()","last_error()","last_match()","last_status()","latest_compact_info()","lazy()","lazy()","lchmod()","lchown()","lcm()","ldexp()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","lex_state_name()","lgamma()","limit()","lineno()","lineno()","lineno()","lineno()","lineno=()","lineno=()","lines()","link()","list()","list()","list()","list()","ljust()","load()","load_from_binary()","load_from_binary_extra_data()","local()","local_variable_defined?()","local_variable_get()","local_variable_set()","local_variables()","local_variables()","local_variables()","locale_charmap()","localtime()","lock()","locked()","locked?()","locked?()","log()","log10()","log2()","loop()","lstat()","lstat()","lstrip()","lstrip!()","lutime()","magnitude()","magnitude()","magnitude()","main()","malloc_allocated_size()","malloc_allocations()","map()","map()","map()","map()","map!()","mapped?()","match()","match()","match()","match()","match?()","match?()","match?()","match_length()","matchee()","max()","max()","max()","max()","max=()","max_by()","maxgroups()","maxgroups=()","mday()","member?()","member?()","member?()","member?()","member?()","members()","members()","members()","members()","merge()","merge!()","merge!()","message()","method()","method()","method_defined?()","method_missing()","methods()","min()","min()","min()","min()","min_by()","minmax()","minmax()","minmax()","minmax_by()","mkdir()","mkfifo()","mktime()","mode()","module_eval()","module_exec()","modulo()","modulo()","modulo()","mon()","monday?()","month()","mtbl()","mtbl2()","mtime()","mtime()","mtime()","name()","name()","name()","name()","name()","name()","name()","name=()","name_list()","named_captures()","named_captures()","names()","names()","names()","nan?()","native_thread_id()","negative?()","negative?()","nesting()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_seed()","next()","next()","next()","next()","next!()","next_float()","next_values()","nil?()","nil?()","nlink()","nobits?()","none?()","none?()","nonzero?()","not!()","nsec()","null?()","num_waiting()","num_waiting()","numerator()","numerator()","numerator()","numerator()","numerator()","object_id()","oct()","of()","offset()","one?()","one?()","open()","open()","open()","options()","or!()","ord()","original_name()","original_name()","owned?()","owned?()","owned?()","owned?()","owner()","owner()","p()","parameters()","parameters()","parameters()","parse()","partition()","partition()","pass()","path()","path()","path()","path()","path()","path()","peek()","peek_values()","pending_interrupt?()","pending_interrupt?()","permutation()","phase()","phase()","phase()","pid()","pid()","pid()","pipe()","pipe?()","pipe?()","pipe?()","polar()","polar()","polar()","pop()","popen()","pos()","pos()","pos()","pos=()","pos=()","pos=()","positive?()","positive?()","post_match()","pow()","ppid()","pre_match()","pread()","pread()","pred()","prepend()","prepend()","prepend()","prev_float()","primitive_convert()","primitive_errinfo()","print()","print()","print()","printf()","printf()","printf()","priority()","priority=()","private_call?()","private_class_method()","private_constant()","private_instance_methods()","private_method_defined?()","private_methods()","proc()","process_wait()","produce()","product()","product()","protected_instance_methods()","protected_method_defined?()","protected_methods()","public_class_method()","public_constant()","public_instance_method()","public_instance_methods()","public_method()","public_method_defined?()","public_methods()","public_send()","push()","push()","putback()","putc()","putc()","putc()","puts()","puts()","puts()","pwd()","pwrite()","pwrite()","quo()","quo()","quo()","quo()","quote()","raise()","raise()","raise()","rand()","rand()","rand()","rand()","random_number()","rassoc()","rassoc()","rassoc()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","raw_data()","rdev()","rdev_major()","rdev_minor()","re_exchange()","re_exchange()","re_exchangeable?()","re_exchangeable?()","read()","read()","read()","read()","read()","read_nonblock()","readable?()","readable?()","readable?()","readable_real?()","readable_real?()","readable_real?()","readagain_bytes()","readbyte()","readbyte()","readchar()","readchar()","readline()","readline()","readline()","readlines()","readlines()","readlines()","readlines()","readlink()","readonly?()","readpartial()","readpartial()","real()","real()","real?()","realdirpath()","realpath()","reason()","receiver()","receiver()","receiver()","receiver()","receiver()","rect()","rect()","rect()","rectangular()","rectangular()","rectangular()","reduce()","refinements()","regexp()","rehash()","rehash()","reject()","reject()","reject()","reject()","reject()","reject!()","reject!()","reject!()","remainder()","remainder()","remove_class_variable()","remove_instance_variable()","remove_method()","remove_stress_to_class()","rename()","reopen()","repeated_combination()","repeated_permutation()","replace()","replace()","replace()","replace()","replacement()","replacement=()","replicate()","report()","report_on_exception()","report_on_exception()","report_on_exception=()","report_on_exception=()","require()","require_relative()","resize()","respond_to?()","respond_to_missing?()","result()","result()","resume()","reverse()","reverse()","reverse!()","reverse!()","reverse_each()","reverse_each()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rid()","rid()","rindex()","rindex()","rjust()","rmdir()","rotate()","rotate!()","round()","round()","round()","round()","round()","rpartition()","rstrip()","rstrip!()","ruby2_keywords()","ruby2_keywords_hash()","ruby2_keywords_hash?()","run()","saturday?()","scan()","schedule()","scheduler()","script_lines()","scrub()","scrub!()","search_convpath()","sec()","seed()","seed()","seek()","seek()","seek()","select()","select()","select()","select()","select()","select()","select()","select()","select!()","select!()","select!()","send()","set_backtrace()","set_encoding()","set_encoding()","set_encoding_by_bom()","set_scheduler()","set_string()","set_trace_func()","set_trace_func()","set_value()","setbyte()","setegid()","seteuid()","setgid()","setgid?()","setgid?()","setgid?()","setpgid()","setpgrp()","setpriority()","setproctitle()","setregid()","setresgid()","setresuid()","setreuid()","setrgid()","setrlimit()","setruid()","setsid()","setuid()","setuid?()","setuid?()","setuid?()","shift()","shift()","shift()","sid_available?()","sid_available?()","signal()","signaled?()","signame()","signo()","sin()","singleton_class()","singleton_class?()","singleton_method()","singleton_methods()","sinh()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size?()","size?()","size?()","skip()","sleep()","sleep()","slice()","slice()","slice()","slice()","slice()","slice()","slice!()","slice!()","slice_after()","slice_after()","slice_before()","slice_before()","slice_when()","slice_when()","socket?()","socket?()","socket?()","sort()","sort()","sort!()","sort_by()","sort_by!()","source()","source_encoding()","source_encoding()","source_encoding()","source_encoding_name()","source_encoding_name()","source_location()","source_location()","source_location()","source_location()","spawn()","spawn()","split()","split()","sprintf()","sqrt()","sqrt()","squeeze()","squeeze!()","srand()","srand()","start()","start_with?()","start_with?()","stat()","stat()","stat()","state()","status()","status()","step()","step()","step()","sticky?()","sticky?()","sticky?()","stop()","stop?()","stopped?()","stopsig()","store()","store()","strftime()","string()","strip()","strip!()","sub()","sub()","sub!()","subclasses()","subsec()","succ()","succ()","succ()","succ!()","success?()","success?()","sum()","sum()","sum()","sunday?()","super_method()","super_method()","superclass()","swapcase()","swapcase()","swapcase!()","switch()","switch()","symlink()","symlink?()","symlink?()","symlink?()","sync()","sync=()","synchronize()","syscall()","sysopen()","sysread()","sysseek()","system()","syswrite()","tag()","take()","take()","take()","take_while()","take_while()","take_while()","tally()","tan()","tanh()","tell()","tell()","tell()","terminate()","termsig()","test()","thread_variable?()","thread_variable_get()","thread_variable_set()","thread_variables()","throw()","thursday?()","timeout()","timeout()","timeout=()","timeout_after()","times()","times()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_binary()","to_c()","to_c()","to_c()","to_c()","to_enum()","to_enum()","to_f()","to_f()","to_f()","to_f()","to_f()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_int()","to_int()","to_io()","to_io()","to_path()","to_path()","to_proc()","to_proc()","to_proc()","to_proc()","to_proc()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_sym()","to_sym()","to_tty?()","to_write_io()","token()","total_time()","tr()","tr!()","tr_s()","tr_s!()","trace_points()","trace_var()","transfer()","transfer()","transform_keys()","transform_keys!()","transform_values()","transform_values!()","transpose()","trap()","trap()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_lock()","tty?()","tuesday?()","tv_nsec()","tv_sec()","tv_usec()","uid()","uid()","uid=()","umask()","unbind()","unblock()","undef_method()","undefine_finalizer()","undefined_instance_methods()","undump()","ungetbyte()","ungetc()","unicode_normalize()","unicode_normalize!()","unicode_normalized?()","union()","union()","uniq()","uniq()","uniq()","uniq!()","unlink()","unlink()","unlock()","unshift()","untrace_var()","upcase()","upcase()","upcase!()","update()","update()","upto()","upto()","urandom()","usec()","used_modules()","used_refinements()","utc()","utc()","utc?()","utc_offset()","utime()","valid?()","valid_encoding?()","value()","value()","value?()","value?()","values()","values()","values()","values()","values_at()","values_at()","values_at()","values_at()","values_at()","verify_internal_consistency()","verify_transient_heap_internal_consistency()","wait()","wait()","wait()","wait()","wait2()","wait_priority()","wait_readable()","wait_writable()","waitall()","waitpid()","waitpid2()","wakeup()","warn()","wday()","wednesday?()","with_index()","with_index()","with_object()","world_readable?()","world_readable?()","world_readable?()","world_writable?()","world_writable?()","world_writable?()","writable?()","writable?()","writable?()","writable_real?()","writable_real?()","writable_real?()","write()","write()","write()","write()","xor!()","yday()","year()","yield()","yield()","yields_directive()","yydebug()","yydebug=()","zero?()","zero?()","zero?()","zero?()","zip()","zip()","zip()","zone()","|()","|()","|()","|()","|()","|()","~()","~()","news-1.8.7","news-1.9.1","news-1.9.2","news-1.9.3","news-2.0.0","news-2.1.0","news-2.2.0","news-2.3.0","news-2.4.0","news-2.5.0","news-2.6.0","news-2.7.0","news-3.0.0","news-3.1.0","bsearch","bug_triaging","case_mapping","character_selectors","command_injection","contributing","building_ruby","documentation_guide","making_changes_to_ruby","making_changes_to_stdlibs","reporting_issues","testing_ruby","dig_methods","dtrace_probes","encodings","extension.ja","extension","fiber","format_specifications","globals","implicit_conversion","keywords","maintainers","marshal","memory_view","mjit","argument_converters","creates_option","option_params","tutorial","ractor","regexp","security","signals","standard_library","strftime_formatting","syntax","assignment","calling_methods","comments","control_expressions","exceptions","literals","methods","miscellaneous","modules_and_classes","pattern_matching","precedence","refinements","timezones"],"longSearchIndex":["argf","argumenterror","array","basicobject","binding","class","closedqueueerror","comparable","complex","continuation","data","dir","env","eoferror","encoding","encoding::compatibilityerror","encoding::converter","encoding::converternotfounderror","encoding::invalidbytesequenceerror","encoding::undefinedconversionerror","encodingerror","enumerable","enumerator","enumerator::arithmeticsequence","enumerator::chain","enumerator::generator","enumerator::lazy","enumerator::producer","enumerator::product","enumerator::yielder","errno","exception","falseclass","fiber","fiber::pool","fiber::schedulerinterface","fibererror","file","file::constants","file::stat","filetest","float","floatdomainerror","frozenerror","gc","gc::profiler","hash","io","io::buffer","io::buffer::accesserror","io::buffer::allocationerror","io::buffer::invalidatederror","io::buffer::lockederror","io::buffer::maskerror","io::eagainwaitreadable","io::eagainwaitwritable","io::einprogresswaitreadable","io::einprogresswaitwritable","io::ewouldblockwaitreadable","io::ewouldblockwaitwritable","io::waitreadable","io::waitwritable","ioerror","indexerror","integer","interrupt","kernel","keyerror","loaderror","localjumperror","marshal","matchdata","math","math::domainerror","method","module","nameerror","nilclass","nomatchingpatternerror","nomatchingpatternkeyerror","nomemoryerror","nomethoderror","notimplementederror","numeric","object","objectspace","objectspace::weakmap","proc","process","process::gid","process::status","process::sys","process::tms","process::uid","rdoc","rdoc::markupreference","rdoc::markupreference::dummyclass","rdoc::markupreference::dummymodule","ractor","ractor::closederror","ractor::error","ractor::isolationerror","ractor::movederror","ractor::movedobject","ractor::remoteerror","ractor::unsafeerror","random","random::formatter","range","rangeerror","rational","refinement","regexp","regexp::timeouterror","regexperror","ripper","rubyvm","rubyvm::abstractsyntaxtree","rubyvm::abstractsyntaxtree::node","rubyvm::instructionsequence","runtimeerror","scripterror","securityerror","signal","signalexception","standarderror","stopiteration","string","struct","symbol","syntaxerror","systemcallerror","systemexit","systemstackerror","thread","thread::backtrace","thread::backtrace::location","thread::conditionvariable","thread::mutex","thread::queue","thread::sizedqueue","threaderror","threadgroup","time","tracepoint","trueclass","typeerror","unboundmethod","uncaughtthrowerror","unicodenormalize","warning","zerodivisionerror","fatal","basicobject#!()","ractor::movedobject#!()","basicobject#!=()","ractor::movedobject#!=()","object#!~()","float#%()","integer#%()","numeric#%()","range#%()","string#%()","array#&()","falseclass#&()","io::buffer#&()","integer#&()","nilclass#&()","process::status#&()","trueclass#&()","array#*()","complex#*()","float#*()","integer#*()","rational#*()","string#*()","complex#**()","float#**()","integer#**()","rational#**()","array#+()","complex#+()","enumerator#+()","float#+()","integer#+()","rational#+()","string#+()","time#+()","numeric#+@()","string#+@()","array#-()","complex#-()","float#-()","integer#-()","rational#-()","time#-()","complex#-@()","numeric#-@()","rational#-@()","string#-@()","complex#/()","float#/()","integer#/()","rational#/()","comparable#<()","float#<()","hash#<()","integer#<()","module#<()","array#<<()","io#<<()","integer#<<()","method#<<()","proc#<<()","string#<<()","thread::queue#<<()","comparable#<=()","float#<=()","hash#<=()","integer#<=()","module#<=()","array#<=>()","complex#<=>()","file::stat#<=>()","float#<=>()","io::buffer#<=>()","integer#<=>()","module#<=>()","numeric#<=>()","object#<=>()","rational#<=>()","string#<=>()","symbol#<=>()","time#<=>()","array#==()","basicobject#==()","comparable#==()","complex#==()","data#==()","encoding::converter#==()","enumerator::arithmeticsequence#==()","exception#==()","float#==()","hash#==()","integer#==()","matchdata#==()","method#==()","module#==()","proc#==()","process::status#==()","ractor::movedobject#==()","random#==()","range#==()","rational#==()","regexp#==()","string#==()","struct#==()","symbol#==()","unboundmethod#==()","enumerator::arithmeticsequence#===()","falseclass#===()","float#===()","integer#===()","method#===()","module#===()","nilclass#===()","object#===()","proc#===()","range#===()","regexp#===()","string#===()","symbol#===()","systemcallerror::===()","trueclass#===()","nilclass#=~()","regexp#=~()","string#=~()","symbol#=~()","comparable#>()","float#>()","hash#>()","integer#>()","module#>()","comparable#>=()","float#>=()","hash#>=()","integer#>=()","module#>=()","integer#>>()","method#>>()","proc#>>()","process::status#>>()","kernel#array()","kernel#complex()","kernel#hash()","kernel#integer()","kernel#rational()","kernel#string()","array::[]()","array#[]()","continuation#[]()","env::[]()","hash::[]()","hash#[]()","integer#[]()","matchdata#[]()","method#[]()","objectspace::weakmap#[]()","proc#[]()","string#[]()","struct#[]()","symbol#[]()","thread#[]()","warning::[]()","array#[]=()","env::[]=()","hash#[]=()","objectspace::weakmap#[]=()","string#[]=()","struct#[]=()","thread#[]=()","warning::[]=()","falseclass#^()","io::buffer#^()","integer#^()","nilclass#^()","trueclass#^()","kernel#__callee__()","kernel#__dir__()","basicobject#__id__()","ractor::movedobject#__id__()","kernel#__method__()","basicobject#__send__()","ractor::movedobject#__send__()","enumerator::lazy#_enumerable_collect()","enumerator::lazy#_enumerable_collect_concat()","enumerator::lazy#_enumerable_drop()","enumerator::lazy#_enumerable_drop_while()","enumerator::lazy#_enumerable_filter()","enumerator::lazy#_enumerable_filter_map()","enumerator::lazy#_enumerable_find_all()","enumerator::lazy#_enumerable_flat_map()","enumerator::lazy#_enumerable_grep()","enumerator::lazy#_enumerable_grep_v()","enumerator::lazy#_enumerable_map()","enumerator::lazy#_enumerable_reject()","enumerator::lazy#_enumerable_select()","enumerator::lazy#_enumerable_take()","enumerator::lazy#_enumerable_take_while()","enumerator::lazy#_enumerable_uniq()","enumerator::lazy#_enumerable_zip()","process::_fork()","objectspace::_id2ref()","kernel#`()","kernel#abort()","process::abort()","thread::abort_on_exception()","thread#abort_on_exception()","thread::abort_on_exception=()","thread#abort_on_exception=()","complex#abs()","numeric#abs()","rational#abs()","complex#abs2()","numeric#abs2()","file::absolute_path()","rubyvm::instructionsequence#absolute_path()","thread::backtrace::location#absolute_path()","file::absolute_path?()","math::acos()","math::acosh()","threadgroup#add()","gc::add_stress_to_class()","thread#add_trace_func()","fiber::schedulerinterface#address_resolve()","io#advise()","module#alias_method()","encoding::aliases()","fiber#alive?()","thread#alive?()","array#all?()","enumerable#all?()","symbol::all_symbols()","integer#allbits?()","class#allocate()","module#ancestors()","io::buffer#and!()","complex#angle()","float#angle()","numeric#angle()","array#any?()","enumerable#any?()","hash#any?()","integer#anybits?()","array#append()","complex#arg()","float#arg()","numeric#arg()","nomethoderror#args()","rdoc::markupreference#args_directive()","argf#argv()","process::argv0()","method#arity()","proc#arity()","unboundmethod#arity()","encoding#ascii_compatible?()","string#ascii_only?()","encoding::converter::asciicompat_encoding()","time#asctime()","math::asin()","math::asinh()","array#assoc()","env::assoc()","hash#assoc()","array#at()","kernel#at_exit()","math::atan()","math::atan2()","math::atanh()","file::atime()","file#atime()","file::stat#atime()","module#attr()","module#attr_accessor()","module#attr_reader()","module#attr_writer()","gc::auto_compact()","gc::auto_compact=()","io#autoclose=()","io#autoclose?()","kernel#autoload()","module#autoload()","kernel#autoload?()","module#autoload?()","string#b()","exception#backtrace()","fiber#backtrace()","thread#backtrace()","exception#backtrace_locations()","fiber#backtrace_locations()","thread#backtrace_locations()","rubyvm::instructionsequence#base_label()","thread::backtrace::location#base_label()","file::basename()","enumerator::arithmeticsequence#begin()","matchdata#begin()","range#begin()","comparable#between?()","unboundmethod#bind()","unboundmethod#bind_call()","kernel#binding()","proc#binding()","argf#binmode()","io#binmode()","argf#binmode?()","io#binmode?()","io::binread()","io::binwrite()","file::birthtime()","file#birthtime()","file::stat#birthtime()","file::stat#blksize()","fiber::schedulerinterface#block()","kernel#block_given?()","file::blockdev?()","file::stat#blockdev?()","filetest#blockdev?()","fiber#blocking?()","fiber::blocking?()","file::stat#blocks()","thread::conditionvariable#broadcast()","array#bsearch()","range#bsearch()","array#bsearch_index()","string#byteindex()","matchdata#byteoffset()","string#byterindex()","random#bytes()","random::bytes()","string#bytes()","string#bytesize()","string#byteslice()","string#bytesplice()","continuation#call()","method#call()","proc#call()","rdoc::markupreference#call_seq_directive()","kernel#callcc()","kernel#caller()","kernel#caller_locations()","string#capitalize()","symbol#capitalize()","string#capitalize!()","matchdata#captures()","string#casecmp()","symbol#casecmp()","string#casecmp?()","symbol#casecmp?()","regexp#casefold?()","kernel#catch()","exception#cause()","math::cbrt()","float#ceil()","integer#ceil()","numeric#ceil()","rational#ceil()","time#ceil()","string#center()","enumerable#chain()","process::gid::change_privilege()","process::uid::change_privilege()","file::chardev?()","file::stat#chardev?()","filetest#chardev?()","string#chars()","dir::chdir()","dir::children()","dir#children()","file::chmod()","file#chmod()","kernel#chomp()","string#chomp()","string#chomp!()","kernel#chop()","string#chop()","string#chop!()","file::chown()","file#chown()","integer#chr()","string#chr()","dir::chroot()","enumerable#chunk()","enumerator::lazy#chunk()","enumerable#chunk_while()","enumerator::lazy#chunk_while()","comparable#clamp()","module#class_eval()","module#class_exec()","module#class_variable_defined?()","module#class_variable_get()","module#class_variable_set()","module#class_variables()","array#clear()","env::clear()","gc::profiler::clear()","hash#clear()","io::buffer#clear()","string#clear()","thread::queue#clear()","thread::sizedqueue#clear()","process::clock_getres()","process::clock_gettime()","env::clone()","method#clone()","numeric#clone()","unboundmethod#clone()","argf#close()","dir#close()","fiber::schedulerinterface#close()","io#close()","thread::queue#close()","thread::sizedqueue#close()","io#close_on_exec=()","io#close_on_exec?()","io#close_read()","io#close_write()","argf#closed?()","io#closed?()","thread::queue#closed?()","string#codepoints()","float#coerce()","integer#coerce()","numeric#coerce()","array#collect()","enumerable#collect()","enumerator::lazy#collect()","array#collect!()","enumerable#collect_concat()","enumerator::lazy#collect_concat()","ripper#column()","array#combination()","array#compact()","enumerable#compact()","enumerator::lazy#compact()","gc::compact()","hash#compact()","array#compact!()","hash#compact!()","hash#compare_by_identity()","hash#compare_by_identity?()","encoding::compatible?()","regexp::compile()","rubyvm::instructionsequence::compile()","rubyvm::instructionsequence::compile_file()","rubyvm::instructionsequence::compile_option()","rubyvm::instructionsequence::compile_option=()","array#concat()","string#concat()","complex#conj()","numeric#conj()","complex#conjugate()","numeric#conjugate()","module#const_defined?()","module#const_get()","module#const_missing()","module#const_set()","module#const_source_location()","module::constants()","module#constants()","encoding::converter#convert()","encoding::converter#convpath()","io::buffer#copy()","io::copy_stream()","process::status#coredump?()","math::cos()","math::cosh()","array#count()","enumerable#count()","range#count()","string#count()","objectspace::count_objects()","range#cover?()","string#crypt()","file::ctime()","file#ctime()","file::stat#ctime()","time#ctime()","fiber::current()","thread::current()","fiber::current_scheduler()","method#curry()","proc#curry()","array#cycle()","enumerable#cycle()","process::daemon()","time#day()","ripper#debug_output()","ripper#debug_output=()","array#deconstruct()","data#deconstruct()","struct#deconstruct()","data#deconstruct_keys()","hash#deconstruct_keys()","struct#deconstruct_keys()","ripper::dedent_string()","string#dedup()","hash#default()","hash#default=()","encoding::default_external()","encoding::default_external=()","encoding::default_internal()","encoding::default_internal=()","hash#default_proc()","hash#default_proc=()","data::define()","objectspace::define_finalizer()","module#define_method()","object#define_singleton_method()","array#delete()","dir::delete()","env::delete()","file::delete()","hash#delete()","string#delete()","string#delete!()","array#delete_at()","array#delete_if()","env::delete_if()","hash#delete_if()","string#delete_prefix()","string#delete_prefix!()","string#delete_suffix()","string#delete_suffix!()","complex#denominator()","float#denominator()","integer#denominator()","numeric#denominator()","rational#denominator()","module#deprecate_constant()","encoding::converter#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding()","encoding::undefinedconversionerror#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding_name()","encoding::undefinedconversionerror#destination_encoding_name()","process::detach()","exception#detailed_message()","enumerable#detect()","file::stat#dev()","file::stat#dev_major()","file::stat#dev_minor()","array#difference()","array#dig()","hash#dig()","struct#dig()","integer#digits()","file::directory?()","file::stat#directory?()","filetest#directory?()","file::dirname()","gc::profiler::disable()","rubyvm::instructionsequence#disasm()","rubyvm::instructionsequence::disasm()","rubyvm::instructionsequence#disassemble()","rubyvm::instructionsequence::disassemble()","object#display()","integer#div()","numeric#div()","float#divmod()","integer#divmod()","numeric#divmod()","string#downcase()","symbol#downcase()","string#downcase!()","integer#downto()","array#drop()","enumerable#drop()","enumerator::lazy#drop()","array#drop_while()","enumerable#drop_while()","enumerator::lazy#drop_while()","time#dst?()","encoding#dummy?()","rdoc::markupreference#dummy_instance_alias()","rdoc::markupreference#dummy_instance_method()","rdoc::markupreference::dummy_singleton_method()","marshal::dump()","string#dump()","env::dup()","numeric#dup()","object#dup()","argf#each()","array#each()","dir#each()","env::each()","enumerator#each()","enumerator::arithmeticsequence#each()","enumerator::chain#each()","enumerator::product#each()","hash#each()","io#each()","objectspace::weakmap#each()","range#each()","struct#each()","rubyvm::each_builtin()","argf#each_byte()","io#each_byte()","string#each_byte()","thread::each_caller_location()","argf#each_char()","io#each_char()","string#each_char()","dir::each_child()","dir#each_child()","rubyvm::instructionsequence#each_child()","argf#each_codepoint()","io#each_codepoint()","string#each_codepoint()","enumerable#each_cons()","enumerable#each_entry()","string#each_grapheme_cluster()","array#each_index()","env::each_key()","hash#each_key()","objectspace::weakmap#each_key()","argf#each_line()","io#each_line()","string#each_line()","objectspace::each_object()","env::each_pair()","hash#each_pair()","objectspace::weakmap#each_pair()","struct#each_pair()","enumerable#each_slice()","env::each_value()","hash#each_value()","objectspace::weakmap#each_value()","enumerable#each_with_index()","enumerator#each_with_index()","enumerable#each_with_object()","enumerator#each_with_object()","enumerator::lazy#eager()","process::egid()","process::egid=()","process::gid::eid()","process::uid::eid()","array#empty?()","dir::empty?()","env::empty?()","file::empty?()","filetest#empty?()","hash#empty?()","io::buffer#empty?()","string#empty?()","symbol#empty?()","thread::queue#empty?()","thread::sizedqueue#empty?()","gc::profiler::enable()","gc::profiler::enabled?()","threadgroup#enclose()","threadgroup#enclosed?()","string#encode()","string#encode!()","regexp#encoding()","ripper#encoding()","string#encoding()","symbol#encoding()","enumerator::arithmeticsequence#end()","matchdata#end()","range#end()","ripper#end_seen?()","string#end_with?()","symbol#end_with?()","thread::queue#enq()","dir::entries()","enumerable#entries()","range#entries()","enumerator::lazy#enum_for()","object#enum_for()","argf#eof()","io#eof()","argf#eof?()","io#eof?()","array#eql?()","data#eql?()","enumerator::arithmeticsequence#eql?()","float#eql?()","hash#eql?()","matchdata#eql?()","method#eql?()","numeric#eql?()","object#eql?()","proc#eql?()","range#eql?()","regexp#eql?()","string#eql?()","struct#eql?()","time#eql?()","unboundmethod#eql?()","basicobject#equal?()","ractor::movedobject#equal?()","math::erf()","math::erfc()","systemcallerror#errno()","ripper#error?()","encoding::invalidbytesequenceerror#error_bytes()","encoding::undefinedconversionerror#error_char()","regexp::escape()","process::euid()","process::euid=()","binding#eval()","kernel#eval()","rubyvm::instructionsequence#eval()","env::except()","hash#except()","exception::exception()","exception#exception()","enumerator::arithmeticsequence#exclude_end?()","range#exclude_end?()","kernel#exec()","process::exec()","file::executable?()","file::stat#executable?()","filetest#executable?()","file::executable_real?()","file::stat#executable_real?()","filetest#executable_real?()","dir::exist?()","file::exist?()","filetest#exist?()","kernel#exit()","process::exit()","thread::exit()","thread#exit()","kernel#exit!()","process::exit!()","localjumperror#exit_value()","process::status#exited?()","process::status#exitstatus()","math::exp()","file::expand_path()","object#extend()","io::buffer#external?()","argf#external_encoding()","io#external_encoding()","file::extname()","kernel#fail()","io#fcntl()","io#fdatasync()","complex#fdiv()","float#fdiv()","integer#fdiv()","numeric#fdiv()","rational#fdiv()","enumerator#feed()","array#fetch()","env::fetch()","hash#fetch()","thread#fetch()","hash#fetch_values()","fiber::schedulerinterface#fiber()","argf#file()","file::file?()","file::stat#file?()","filetest#file?()","argf#filename()","ripper#filename()","argf#fileno()","dir#fileno()","io#fileno()","array#fill()","array#filter()","env::filter()","enumerable#filter()","enumerator::lazy#filter()","hash#filter()","struct#filter()","array#filter!()","env::filter!()","hash#filter!()","enumerable#filter_map()","enumerator::lazy#filter_map()","encoding::find()","enumerable#find()","enumerable#find_all()","enumerator::lazy#find_all()","array#find_index()","enumerable#find_index()","encoding::converter#finish()","complex#finite?()","float#finite?()","array#first()","enumerable#first()","enumerator::arithmeticsequence#first()","range#first()","rubyvm::instructionsequence#first_lineno()","regexp#fixed_encoding?()","enumerable#flat_map()","enumerator::lazy#flat_map()","array#flatten()","hash#flatten()","array#flatten!()","file#flock()","float#floor()","integer#floor()","numeric#floor()","rational#floor()","time#floor()","io#flush()","io::buffer::for()","io::for_fd()","enumerator::lazy#force()","string#force_encoding()","dir::foreach()","io::foreach()","kernel#fork()","process::fork()","thread::fork()","kernel#format()","io::buffer#free()","env::freeze()","module#freeze()","object#freeze()","string#freeze()","math::frexp()","time#friday?()","process::gid::from_name()","process::uid::from_name()","io#fsync()","file::ftype()","file::stat#ftype()","exception#full_message()","math::gamma()","integer#gcd()","integer#gcdlcm()","io::buffer#get_string()","io::buffer#get_value()","argf#getbyte()","io#getbyte()","string#getbyte()","argf#getc()","io#getc()","process::sys::getegid()","process::sys::geteuid()","process::sys::getgid()","time#getgm()","time#getlocal()","process::getpgid()","process::getpgrp()","process::getpriority()","process::getrlimit()","argf#gets()","io#gets()","kernel#gets()","process::getsid()","process::sys::getuid()","time#getutc()","dir::getwd()","file::stat#gid()","process::gid()","process::gid=()","kernel#global_variables()","time::gm()","time#gmt?()","time#gmt_offset()","time#gmtime()","time#gmtoff()","process::gid::grant_privilege()","process::uid::grant_privilege()","string#grapheme_clusters()","enumerable#grep()","enumerator::lazy#grep()","enumerable#grep_v()","enumerator::lazy#grep_v()","thread#group()","enumerable#group_by()","process::groups()","process::groups=()","file::grpowned?()","file::stat#grpowned?()","filetest#grpowned?()","kernel#gsub()","string#gsub()","string#gsub!()","thread::handle_interrupt()","env::has_key?()","hash#has_key?()","env::has_value?()","hash#has_value?()","array#hash()","complex#hash()","data#hash()","enumerator::arithmeticsequence#hash()","float#hash()","hash#hash()","matchdata#hash()","method#hash()","object#hash()","proc#hash()","range#hash()","rational#hash()","regexp#hash()","string#hash()","struct#hash()","time#hash()","unboundmethod#hash()","string#hex()","io::buffer#hexdump()","dir::home()","time#hour()","math::hypot()","numeric#i()","symbol#id2name()","file::identical?()","filetest#identical?()","thread::ignore_deadlock()","thread::ignore_deadlock=()","complex#imag()","numeric#imag()","complex#imaginary()","numeric#imaginary()","refinement#import_methods()","module#include()","array#include?()","env::include?()","enumerable#include?()","hash#include?()","module#include?()","objectspace::weakmap#include?()","range#include?()","string#include?()","module#included_modules()","encoding::invalidbytesequenceerror#incomplete_input?()","array#index()","string#index()","complex#infinite?()","float#infinite?()","process::initgroups()","array#initialize_copy()","hash#initialize_copy()","io::buffer#initialize_copy()","string#initialize_copy()","enumerable#inject()","file::stat#ino()","argf#inplace_mode()","argf#inplace_mode=()","array#insert()","string#insert()","encoding::converter#insert_output()","argf#inspect()","array#inspect()","complex#inspect()","data#inspect()","dir#inspect()","env::inspect()","encoding#inspect()","encoding::converter#inspect()","enumerator#inspect()","enumerator::arithmeticsequence#inspect()","enumerator::chain#inspect()","enumerator::product#inspect()","exception#inspect()","falseclass#inspect()","fiber#inspect()","file::stat#inspect()","float#inspect()","hash#inspect()","io#inspect()","io::buffer#inspect()","integer#inspect()","matchdata#inspect()","method#inspect()","module#inspect()","nilclass#inspect()","object#inspect()","objectspace::weakmap#inspect()","proc#inspect()","process::status#inspect()","range#inspect()","rational#inspect()","regexp#inspect()","rubyvm::instructionsequence#inspect()","string#inspect()","struct#inspect()","symbol#inspect()","thread#inspect()","thread::backtrace::location#inspect()","time#inspect()","trueclass#inspect()","unboundmethod#inspect()","basicobject#instance_eval()","ractor::movedobject#instance_eval()","basicobject#instance_exec()","ractor::movedobject#instance_exec()","module#instance_method()","module#instance_methods()","object#instance_of?()","object#instance_variable_defined?()","object#instance_variable_get()","object#instance_variable_set()","object#instance_variables()","string#intern()","symbol#intern()","io::buffer#internal?()","argf#internal_encoding()","io#internal_encoding()","array#intersect?()","array#intersection()","env::invert()","hash#invert()","fiber::schedulerinterface#io_read()","fiber::schedulerinterface#io_wait()","fiber::schedulerinterface#io_write()","io#ioctl()","object#is_a?()","io#isatty()","time#isdst()","process::sys::issetugid()","kernel#iterator?()","object#itself()","array#join()","file::join()","thread#join()","array#keep_if()","env::keep_if()","hash#keep_if()","rubyvm::keep_script_lines()","rubyvm::keep_script_lines=()","fiber::schedulerinterface#kernel_sleep()","env::key()","hash#key()","keyerror#key()","nomatchingpatternkeyerror#key()","env::key?()","hash#key?()","objectspace::weakmap#key?()","thread#key?()","env::keys()","hash#keys()","objectspace::weakmap#keys()","thread#keys()","struct::keyword_init?()","process::kill()","thread::kill()","thread#kill()","object#kind_of?()","rubyvm::instructionsequence#label()","thread::backtrace::location#label()","kernel#lambda()","proc#lambda?()","array#last()","enumerator::arithmeticsequence#last()","range#last()","encoding::converter#last_error()","regexp::last_match()","process::last_status()","gc::latest_compact_info()","enumerable#lazy()","enumerator::lazy#lazy()","file::lchmod()","file::lchown()","integer#lcm()","math::ldexp()","array#length()","env::length()","hash#length()","matchdata#length()","objectspace::weakmap#length()","string#length()","struct#length()","symbol#length()","thread::queue#length()","thread::sizedqueue#length()","ripper::lex_state_name()","math::lgamma()","thread::backtrace::limit()","argf#lineno()","io#lineno()","ripper#lineno()","thread::backtrace::location#lineno()","argf#lineno=()","io#lineno=()","string#lines()","file::link()","encoding::list()","signal::list()","thread::list()","threadgroup#list()","string#ljust()","kernel#load()","rubyvm::instructionsequence::load_from_binary()","rubyvm::instructionsequence::load_from_binary_extra_data()","time::local()","binding#local_variable_defined?()","binding#local_variable_get()","binding#local_variable_set()","binding#local_variables()","kernel#local_variables()","nameerror#local_variables()","encoding::locale_charmap()","time#localtime()","thread::mutex#lock()","io::buffer#locked()","io::buffer#locked?()","thread::mutex#locked?()","math::log()","math::log10()","math::log2()","kernel#loop()","file::lstat()","file#lstat()","string#lstrip()","string#lstrip!()","file::lutime()","complex#magnitude()","numeric#magnitude()","rational#magnitude()","thread::main()","gc::malloc_allocated_size()","gc::malloc_allocations()","array#map()","enumerable#map()","enumerator::lazy#map()","io::buffer::map()","array#map!()","io::buffer#mapped?()","matchdata#match()","regexp#match()","string#match()","symbol#match()","regexp#match?()","string#match?()","symbol#match?()","matchdata#match_length()","nomatchingpatternkeyerror#matchee()","array#max()","enumerable#max()","range#max()","thread::sizedqueue#max()","thread::sizedqueue#max=()","enumerable#max_by()","process::maxgroups()","process::maxgroups=()","time#mday()","env::member?()","enumerable#member?()","hash#member?()","objectspace::weakmap#member?()","range#member?()","data::members()","data#members()","struct::members()","struct#members()","hash#merge()","env::merge!()","hash#merge!()","exception#message()","object#method()","rdoc::markupreference#method()","module#method_defined?()","ractor::movedobject#method_missing()","object#methods()","array#min()","enumerable#min()","range#min()","time#min()","enumerable#min_by()","array#minmax()","enumerable#minmax()","range#minmax()","enumerable#minmax_by()","dir::mkdir()","file::mkfifo()","time::mktime()","file::stat#mode()","module#module_eval()","module#module_exec()","float#modulo()","integer#modulo()","numeric#modulo()","time#mon()","time#monday?()","time#month()","rubyvm::mtbl()","rubyvm::mtbl2()","file::mtime()","file#mtime()","file::stat#mtime()","encoding#name()","method#name()","module#name()","nameerror#name()","symbol#name()","thread#name()","unboundmethod#name()","thread#name=()","encoding::name_list()","matchdata#named_captures()","regexp#named_captures()","encoding#names()","matchdata#names()","regexp#names()","float#nan?()","thread#native_thread_id()","numeric#negative?()","rational#negative?()","module::nesting()","array::new()","basicobject::new()","class#new()","class::new()","data::new()","encoding::converter::new()","enumerator::new()","enumerator::chain::new()","enumerator::lazy::new()","enumerator::product::new()","exception::new()","fiber::new()","fiber::pool::new()","file::new()","file::stat::new()","frozenerror::new()","hash::new()","io::new()","io::buffer::new()","keyerror::new()","module::new()","nameerror::new()","nomatchingpatternkeyerror::new()","nomethoderror::new()","proc::new()","random::new()","range::new()","regexp::new()","ripper::new()","rubyvm::instructionsequence::new()","signalexception::new()","string::new()","struct::new()","syntaxerror::new()","systemcallerror::new()","systemexit::new()","thread::new()","thread::conditionvariable::new()","thread::mutex::new()","thread::queue::new()","thread::sizedqueue::new()","uncaughtthrowerror::new()","random::new_seed()","enumerator#next()","integer#next()","string#next()","symbol#next()","string#next!()","float#next_float()","enumerator#next_values()","nilclass#nil?()","object#nil?()","file::stat#nlink()","integer#nobits?()","array#none?()","enumerable#none?()","numeric#nonzero?()","io::buffer#not!()","time#nsec()","io::buffer#null?()","thread::queue#num_waiting()","thread::sizedqueue#num_waiting()","complex#numerator()","float#numerator()","integer#numerator()","numeric#numerator()","rational#numerator()","object#object_id()","string#oct()","rubyvm::instructionsequence::of()","matchdata#offset()","array#one?()","enumerable#one?()","file::open()","io::open()","kernel#open()","regexp#options()","io::buffer#or!()","string#ord()","method#original_name()","unboundmethod#original_name()","file::owned?()","file::stat#owned?()","filetest#owned?()","thread::mutex#owned?()","method#owner()","unboundmethod#owner()","kernel#p()","method#parameters()","proc#parameters()","unboundmethod#parameters()","ripper#parse()","enumerable#partition()","string#partition()","thread::pass()","argf#path()","dir#path()","file::path()","file#path()","rubyvm::instructionsequence#path()","thread::backtrace::location#path()","enumerator#peek()","enumerator#peek_values()","thread::pending_interrupt?()","thread#pending_interrupt?()","array#permutation()","complex#phase()","float#phase()","numeric#phase()","io#pid()","process::pid()","process::status#pid()","io::pipe()","file::pipe?()","file::stat#pipe?()","filetest#pipe?()","complex::polar()","complex#polar()","numeric#polar()","array#pop()","io::popen()","argf#pos()","dir#pos()","io#pos()","argf#pos=()","dir#pos=()","io#pos=()","numeric#positive?()","rational#positive?()","matchdata#post_match()","integer#pow()","process::ppid()","matchdata#pre_match()","io#pread()","io::buffer#pread()","integer#pred()","array#prepend()","module#prepend()","string#prepend()","float#prev_float()","encoding::converter#primitive_convert()","encoding::converter#primitive_errinfo()","argf#print()","io#print()","kernel#print()","argf#printf()","io#printf()","kernel#printf()","thread#priority()","thread#priority=()","nomethoderror#private_call?()","module#private_class_method()","module#private_constant()","module#private_instance_methods()","module#private_method_defined?()","object#private_methods()","kernel#proc()","fiber::schedulerinterface#process_wait()","enumerator::produce()","array#product()","enumerator::product()","module#protected_instance_methods()","module#protected_method_defined?()","object#protected_methods()","module#public_class_method()","module#public_constant()","module#public_instance_method()","module#public_instance_methods()","object#public_method()","module#public_method_defined?()","object#public_methods()","object#public_send()","array#push()","thread::queue#push()","encoding::converter#putback()","argf#putc()","io#putc()","kernel#putc()","argf#puts()","io#puts()","kernel#puts()","dir::pwd()","io#pwrite()","io::buffer#pwrite()","complex#quo()","float#quo()","numeric#quo()","rational#quo()","regexp::quote()","fiber#raise()","kernel#raise()","thread#raise()","kernel#rand()","random#rand()","random::rand()","random::formatter#rand()","random::formatter#random_number()","array#rassoc()","env::rassoc()","hash#rassoc()","complex#rationalize()","float#rationalize()","integer#rationalize()","nilclass#rationalize()","rational#rationalize()","gc::profiler::raw_data()","file::stat#rdev()","file::stat#rdev_major()","file::stat#rdev_minor()","process::gid::re_exchange()","process::uid::re_exchange()","process::gid::re_exchangeable?()","process::uid::re_exchangeable?()","argf#read()","dir#read()","io::read()","io#read()","io::buffer#read()","argf#read_nonblock()","file::readable?()","file::stat#readable?()","filetest#readable?()","file::readable_real?()","file::stat#readable_real?()","filetest#readable_real?()","encoding::invalidbytesequenceerror#readagain_bytes()","argf#readbyte()","io#readbyte()","argf#readchar()","io#readchar()","argf#readline()","io#readline()","kernel#readline()","argf#readlines()","io::readlines()","io#readlines()","kernel#readlines()","file::readlink()","io::buffer#readonly?()","argf#readpartial()","io#readpartial()","complex#real()","numeric#real()","complex#real?()","file::realdirpath()","file::realpath()","localjumperror#reason()","binding#receiver()","frozenerror#receiver()","keyerror#receiver()","method#receiver()","nameerror#receiver()","complex::rect()","complex#rect()","numeric#rect()","complex::rectangular()","complex#rectangular()","numeric#rectangular()","enumerable#reduce()","module#refinements()","matchdata#regexp()","env::rehash()","hash#rehash()","array#reject()","env::reject()","enumerable#reject()","enumerator::lazy#reject()","hash#reject()","array#reject!()","env::reject!()","hash#reject!()","integer#remainder()","numeric#remainder()","module#remove_class_variable()","object#remove_instance_variable()","module#remove_method()","gc::remove_stress_to_class()","file::rename()","io#reopen()","array#repeated_combination()","array#repeated_permutation()","array#replace()","env::replace()","hash#replace()","string#replace()","encoding::converter#replacement()","encoding::converter#replacement=()","encoding#replicate()","gc::profiler::report()","thread::report_on_exception()","thread#report_on_exception()","thread::report_on_exception=()","thread#report_on_exception=()","kernel#require()","kernel#require_relative()","io::buffer#resize()","object#respond_to?()","object#respond_to_missing?()","gc::profiler::result()","stopiteration#result()","fiber#resume()","array#reverse()","string#reverse()","array#reverse!()","string#reverse!()","array#reverse_each()","enumerable#reverse_each()","argf#rewind()","dir#rewind()","enumerator#rewind()","enumerator::chain#rewind()","enumerator::product#rewind()","io#rewind()","process::gid::rid()","process::uid::rid()","array#rindex()","string#rindex()","string#rjust()","dir::rmdir()","array#rotate()","array#rotate!()","float#round()","integer#round()","numeric#round()","rational#round()","time#round()","string#rpartition()","string#rstrip()","string#rstrip!()","proc#ruby2_keywords()","hash::ruby2_keywords_hash()","hash::ruby2_keywords_hash?()","thread#run()","time#saturday?()","string#scan()","fiber::schedule()","fiber::scheduler()","rubyvm::instructionsequence#script_lines()","string#scrub()","string#scrub!()","encoding::converter::search_convpath()","time#sec()","random#seed()","random::seed()","argf#seek()","dir#seek()","io#seek()","array#select()","env::select()","enumerable#select()","enumerator::lazy#select()","hash#select()","io::select()","kernel#select()","struct#select()","array#select!()","env::select!()","hash#select!()","object#send()","exception#set_backtrace()","argf#set_encoding()","io#set_encoding()","io#set_encoding_by_bom()","fiber::set_scheduler()","io::buffer#set_string()","kernel#set_trace_func()","thread#set_trace_func()","io::buffer#set_value()","string#setbyte()","process::sys::setegid()","process::sys::seteuid()","process::sys::setgid()","file::setgid?()","file::stat#setgid?()","filetest#setgid?()","process::setpgid()","process::setpgrp()","process::setpriority()","process::setproctitle()","process::sys::setregid()","process::sys::setresgid()","process::sys::setresuid()","process::sys::setreuid()","process::sys::setrgid()","process::setrlimit()","process::sys::setruid()","process::setsid()","process::sys::setuid()","file::setuid?()","file::stat#setuid?()","filetest#setuid?()","array#shift()","env::shift()","hash#shift()","process::gid::sid_available?()","process::uid::sid_available?()","thread::conditionvariable#signal()","process::status#signaled?()","signal::signame()","signalexception#signo()","math::sin()","object#singleton_class()","module#singleton_class?()","object#singleton_method()","object#singleton_methods()","math::sinh()","array#size()","env::size()","enumerator#size()","enumerator::arithmeticsequence#size()","enumerator::chain#size()","enumerator::product#size()","file#size()","file::size()","file::stat#size()","filetest#size()","hash#size()","io::buffer#size()","matchdata#size()","objectspace::weakmap#size()","range#size()","string#size()","struct#size()","symbol#size()","thread::queue#size()","thread::sizedqueue#size()","file::size?()","file::stat#size?()","filetest#size?()","argf#skip()","kernel#sleep()","thread::mutex#sleep()","array#slice()","env::slice()","hash#slice()","io::buffer#slice()","string#slice()","symbol#slice()","array#slice!()","string#slice!()","enumerable#slice_after()","enumerator::lazy#slice_after()","enumerable#slice_before()","enumerator::lazy#slice_before()","enumerable#slice_when()","enumerator::lazy#slice_when()","file::socket?()","file::stat#socket?()","filetest#socket?()","array#sort()","enumerable#sort()","array#sort!()","enumerable#sort_by()","array#sort_by!()","regexp#source()","encoding::converter#source_encoding()","encoding::invalidbytesequenceerror#source_encoding()","encoding::undefinedconversionerror#source_encoding()","encoding::invalidbytesequenceerror#source_encoding_name()","encoding::undefinedconversionerror#source_encoding_name()","binding#source_location()","method#source_location()","proc#source_location()","unboundmethod#source_location()","kernel#spawn()","process::spawn()","file::split()","string#split()","kernel#sprintf()","integer::sqrt()","math::sqrt()","string#squeeze()","string#squeeze!()","kernel#srand()","random::srand()","thread::start()","string#start_with?()","symbol#start_with?()","file::stat()","io#stat()","rubyvm::stat()","ripper#state()","systemexit#status()","thread#status()","enumerator::arithmeticsequence#step()","numeric#step()","range#step()","file::sticky?()","file::stat#sticky?()","filetest#sticky?()","thread::stop()","thread#stop?()","process::status#stopped?()","process::status#stopsig()","env::store()","hash#store()","time#strftime()","matchdata#string()","string#strip()","string#strip!()","kernel#sub()","string#sub()","string#sub!()","class#subclasses()","time#subsec()","integer#succ()","string#succ()","symbol#succ()","string#succ!()","process::status#success?()","systemexit#success?()","array#sum()","enumerable#sum()","string#sum()","time#sunday?()","method#super_method()","unboundmethod#super_method()","class#superclass()","string#swapcase()","symbol#swapcase()","string#swapcase!()","process::gid::switch()","process::uid::switch()","file::symlink()","file::symlink?()","file::stat#symlink?()","filetest#symlink?()","io#sync()","io#sync=()","thread::mutex#synchronize()","kernel#syscall()","io::sysopen()","io#sysread()","io#sysseek()","kernel#system()","io#syswrite()","uncaughtthrowerror#tag()","array#take()","enumerable#take()","enumerator::lazy#take()","array#take_while()","enumerable#take_while()","enumerator::lazy#take_while()","enumerable#tally()","math::tan()","math::tanh()","argf#tell()","dir#tell()","io#tell()","thread#terminate()","process::status#termsig()","kernel#test()","thread#thread_variable?()","thread#thread_variable_get()","thread#thread_variable_set()","thread#thread_variables()","kernel#throw()","time#thursday?()","regexp#timeout()","regexp::timeout()","regexp::timeout=()","fiber::schedulerinterface#timeout_after()","integer#times()","process::times()","argf#to_a()","array#to_a()","env::to_a()","enumerable#to_a()","enumerator::lazy#to_a()","hash#to_a()","matchdata#to_a()","nilclass#to_a()","range#to_a()","rubyvm::instructionsequence#to_a()","struct#to_a()","time#to_a()","array#to_ary()","rubyvm::instructionsequence#to_binary()","complex#to_c()","nilclass#to_c()","numeric#to_c()","string#to_c()","enumerator::lazy#to_enum()","object#to_enum()","complex#to_f()","integer#to_f()","rational#to_f()","string#to_f()","time#to_f()","array#to_h()","data#to_h()","env::to_h()","enumerable#to_h()","hash#to_h()","nilclass#to_h()","struct#to_h()","env::to_hash()","hash#to_hash()","argf#to_i()","complex#to_i()","float#to_i()","io#to_i()","process::status#to_i()","rational#to_i()","string#to_i()","time#to_i()","float#to_int()","numeric#to_int()","argf#to_io()","io#to_io()","dir#to_path()","file#to_path()","enumerator::yielder#to_proc()","hash#to_proc()","method#to_proc()","proc#to_proc()","symbol#to_proc()","complex#to_r()","float#to_r()","integer#to_r()","nilclass#to_r()","rational#to_r()","string#to_r()","time#to_r()","argf#to_s()","array#to_s()","complex#to_s()","data#to_s()","env::to_s()","encoding#to_s()","exception#to_s()","falseclass#to_s()","fiber#to_s()","float#to_s()","hash#to_s()","io::buffer#to_s()","integer#to_s()","matchdata#to_s()","method#to_s()","module#to_s()","nilclass#to_s()","object#to_s()","proc#to_s()","process::status#to_s()","range#to_s()","rational#to_s()","regexp#to_s()","string#to_s()","struct#to_s()","symbol#to_s()","thread#to_s()","thread::backtrace::location#to_s()","time#to_s()","trueclass#to_s()","unboundmethod#to_s()","uncaughtthrowerror#to_s()","string#to_str()","string#to_sym()","symbol#to_sym()","exception::to_tty?()","argf#to_write_io()","ripper#token()","gc::profiler::total_time()","string#tr()","string#tr!()","string#tr_s()","string#tr_s!()","rubyvm::instructionsequence#trace_points()","kernel#trace_var()","fiber#transfer()","io::buffer#transfer()","hash#transform_keys()","hash#transform_keys!()","hash#transform_values()","hash#transform_values!()","array#transpose()","kernel#trap()","signal::trap()","file::truncate()","file#truncate()","float#truncate()","integer#truncate()","numeric#truncate()","rational#truncate()","array::try_convert()","hash::try_convert()","io::try_convert()","regexp::try_convert()","string::try_convert()","thread::mutex#try_lock()","io#tty?()","time#tuesday?()","time#tv_nsec()","time#tv_sec()","time#tv_usec()","file::stat#uid()","process::uid()","process::uid=()","file::umask()","method#unbind()","fiber::schedulerinterface#unblock()","module#undef_method()","objectspace::undefine_finalizer()","module#undefined_instance_methods()","string#undump()","io#ungetbyte()","io#ungetc()","string#unicode_normalize()","string#unicode_normalize!()","string#unicode_normalized?()","array#union()","regexp::union()","array#uniq()","enumerable#uniq()","enumerator::lazy#uniq()","array#uniq!()","dir::unlink()","file::unlink()","thread::mutex#unlock()","array#unshift()","kernel#untrace_var()","string#upcase()","symbol#upcase()","string#upcase!()","env::update()","hash#update()","integer#upto()","string#upto()","random::urandom()","time#usec()","module::used_modules()","module::used_refinements()","time::utc()","time#utc()","time#utc?()","time#utc_offset()","file::utime()","io::buffer#valid?()","string#valid_encoding?()","thread#value()","uncaughtthrowerror#value()","env::value?()","hash#value?()","env::values()","hash#values()","objectspace::weakmap#values()","struct#values()","array#values_at()","env::values_at()","hash#values_at()","matchdata#values_at()","struct#values_at()","gc::verify_internal_consistency()","gc::verify_transient_heap_internal_consistency()","io#wait()","process::wait()","process::status::wait()","thread::conditionvariable#wait()","process::wait2()","io#wait_priority()","io#wait_readable()","io#wait_writable()","process::waitall()","process::waitpid()","process::waitpid2()","thread#wakeup()","warning#warn()","time#wday()","time#wednesday?()","enumerator#with_index()","enumerator::lazy#with_index()","enumerator#with_object()","file::world_readable?()","file::stat#world_readable?()","filetest#world_readable?()","file::world_writable?()","file::stat#world_writable?()","filetest#world_writable?()","file::writable?()","file::stat#writable?()","filetest#writable?()","file::writable_real?()","file::stat#writable_real?()","filetest#writable_real?()","argf#write()","io::write()","io#write()","io::buffer#write()","io::buffer#xor!()","time#yday()","time#year()","fiber::yield()","proc#yield()","rdoc::markupreference#yields_directive()","ripper#yydebug()","ripper#yydebug=()","file::zero?()","file::stat#zero?()","filetest#zero?()","numeric#zero?()","array#zip()","enumerable#zip()","enumerator::lazy#zip()","time#zone()","array#|()","falseclass#|()","io::buffer#|()","integer#|()","nilclass#|()","trueclass#|()","io::buffer#~()","regexp#~()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["ARGF","","ARGF.html","","<p>ARGF is a stream designed for use in scripts that process files given as command-line arguments or passed …\n"],["ArgumentError","","ArgumentError.html","","<p>Raised when the arguments are wrong and there isn’t a more specific Exception class.\n<p>Ex: passing the …\n"],["Array","","Array.html","","<p>An Array is an ordered, integer-indexed collection of objects, called <em>elements</em>. Any object (even another …\n"],["BasicObject","","BasicObject.html","","<p>BasicObject is the parent class of all classes in Ruby.  It’s an explicit blank class.\n<p>BasicObject …\n"],["Binding","","Binding.html","","<p>Objects of class Binding encapsulate the execution context at some particular place in the code and retain …\n"],["Class","","Class.html","","<p>Classes in Ruby are first-class objects—each is an instance of class Class.\n<p>Typically, you create a …\n"],["ClosedQueueError","","ClosedQueueError.html","","<p>The exception class which will be raised when pushing into a closed Queue.  See Thread::Queue#close and …\n"],["Comparable","","Comparable.html","","<p>The Comparable mixin is used by classes whose objects may be ordered. The class must define the <code>&lt;=&gt;</code> …\n"],["Complex","","Complex.html","","<p>A complex number can be represented as a paired real number with imaginary unit; a+bi.  Where a is real …\n"],["Continuation","","Continuation.html","","<p>Continuation objects are generated by Kernel#callcc, after having +require+d <em>continuation</em>. They hold …\n"],["Data","","Data.html","","<p>Class Data provides a convenient way to define simple classes for value-alike objects.\n<p>The simplest example …\n"],["Dir","","Dir.html","",""],["ENV","","ENV.html","","<p>ENV is a hash-like accessor for environment variables.\n<p>Interaction with the Operating System\n<p>The ENV object …\n"],["EOFError","","EOFError.html","","<p>Raised by some IO operations when reaching the end of file. Many IO methods exist in two forms,\n<p>one that …\n"],["Encoding","","Encoding.html","","<p>An Encoding instance represents a character encoding usable in Ruby. It is defined as a constant under …\n"],["Encoding::CompatibilityError","","Encoding/CompatibilityError.html","","<p>Raised by Encoding and String methods when the source encoding is incompatible with the target encoding. …\n"],["Encoding::Converter","","Encoding/Converter.html","","<p>Encoding conversion class.\n"],["Encoding::ConverterNotFoundError","","Encoding/ConverterNotFoundError.html","","<p>Raised by transcoding methods when a named encoding does not correspond with a known converter.\n"],["Encoding::InvalidByteSequenceError","","Encoding/InvalidByteSequenceError.html","","<p>Raised by Encoding and String methods when the string being transcoded contains a byte invalid for the …\n"],["Encoding::UndefinedConversionError","","Encoding/UndefinedConversionError.html","","<p>Raised by Encoding and String methods when a transcoding operation fails.\n"],["EncodingError","","EncodingError.html","","<p>EncodingError is the base class for encoding errors.\n"],["Enumerable","","Enumerable.html","","<p>What’s Here\n<p>Module Enumerable provides methods that are useful to a collection class for:\n<p>Querying …\n"],["Enumerator","","Enumerator.html","","<p>A class which allows both internal and external iteration.\n<p>An Enumerator can be created by the following …\n"],["Enumerator::ArithmeticSequence","","Enumerator/ArithmeticSequence.html","","<p>Enumerator::ArithmeticSequence is a subclass of Enumerator, that is a representation of sequences of …\n"],["Enumerator::Chain","","Enumerator/Chain.html","","<p>Enumerator::Chain is a subclass of Enumerator, which represents a chain of enumerables that works as …\n"],["Enumerator::Generator","","Enumerator/Generator.html","","<p>Generator\n"],["Enumerator::Lazy","","Enumerator/Lazy.html","","<p>Enumerator::Lazy is a special type of Enumerator, that allows constructing chains of operations without …\n"],["Enumerator::Producer","","Enumerator/Producer.html","","<p>Producer\n"],["Enumerator::Product","","Enumerator/Product.html","","<p>Enumerator::Product generates a Cartesian product of any number of enumerable objects.  Iterating over …\n"],["Enumerator::Yielder","","Enumerator/Yielder.html","","<p>Yielder\n"],["Errno","","Errno.html","","<p>Ruby exception objects are subclasses of Exception.  However, operating systems typically report errors …\n"],["Exception","","Exception.html","","<p>Class Exception and its subclasses are used to communicate between Kernel#raise and <code>rescue</code> statements …\n"],["FalseClass","","FalseClass.html","","<p>The global value <code>false</code> is the only instance of class FalseClass and represents a logically false value …\n"],["Fiber","","Fiber.html","","<p>Fibers are primitives for implementing light weight cooperative concurrency in Ruby. Basically they are …\n"],["Fiber::Pool","","Fiber/Pool.html","",""],["Fiber::SchedulerInterface","","Fiber/SchedulerInterface.html","","<p>This is not an existing class, but documentation of the interface that Scheduler object should comply …\n"],["FiberError","","FiberError.html","","<p>Raised when an invalid operation is attempted on a Fiber, in particular when attempting to call/resume …\n"],["File","","File.html","","<p>A File object is a representation of a file in the underlying platform.\n<p>Class File extends module FileTest …\n"],["File::Constants","","File/Constants.html","","<p>File::Constants provides file-related constants.  All possible file constants are listed in the documentation …\n"],["File::Stat","","File/Stat.html","","<p>Objects of class File::Stat encapsulate common status information for File objects. The information is …\n"],["FileTest","","FileTest.html","","<p>FileTest implements file test operations similar to those used in File::Stat. It exists as a standalone …\n"],["Float","","Float.html","","<p>A Float object represents a sometimes-inexact real number using the native architecture’s double-precision …\n"],["FloatDomainError","","FloatDomainError.html","","<p>Raised when attempting to convert special float values (in particular <code>Infinity</code> or <code>NaN</code>) to numerical classes …\n"],["FrozenError","","FrozenError.html","","<p>Raised when there is an attempt to modify a frozen object.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">freeze</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">4</span>\n</pre>\n<p><em>raises the exception:</em> …\n"],["GC","","GC.html","",""],["GC::Profiler","","GC/Profiler.html","","<p>The GC profiler provides access to information on GC runs including time, length and object space size. …\n"],["Hash","","Hash.html","","<p>A Hash maps each of its unique keys to a specific value.\n<p>A Hash has certain similarities to an Array, …\n"],["IO","","IO.html","","<p>An instance of class IO (commonly called a <em>stream</em>) represents an input/output stream in the underlying …\n"],["IO::Buffer","","IO/Buffer.html","","<p>IO::Buffer is a low-level efficient buffer for input/output. There are three ways of using buffer:\n<p>Create …\n"],["IO::Buffer::AccessError","","IO/Buffer/AccessError.html","",""],["IO::Buffer::AllocationError","","IO/Buffer/AllocationError.html","",""],["IO::Buffer::InvalidatedError","","IO/Buffer/InvalidatedError.html","",""],["IO::Buffer::LockedError","","IO/Buffer/LockedError.html","",""],["IO::Buffer::MaskError","","IO/Buffer/MaskError.html","",""],["IO::EAGAINWaitReadable","","IO/EAGAINWaitReadable.html","","<p>exception to wait for reading by EAGAIN. see IO.select.\n"],["IO::EAGAINWaitWritable","","IO/EAGAINWaitWritable.html","","<p>exception to wait for writing by EAGAIN. see IO.select.\n"],["IO::EINPROGRESSWaitReadable","","IO/EINPROGRESSWaitReadable.html","","<p>exception to wait for reading by EINPROGRESS. see IO.select.\n"],["IO::EINPROGRESSWaitWritable","","IO/EINPROGRESSWaitWritable.html","","<p>exception to wait for writing by EINPROGRESS. see IO.select.\n"],["IO::EWOULDBLOCKWaitReadable","","IO/EWOULDBLOCKWaitReadable.html","","<p>exception to wait for reading by EWOULDBLOCK. see IO.select.\n"],["IO::EWOULDBLOCKWaitWritable","","IO/EWOULDBLOCKWaitWritable.html","","<p>exception to wait for writing by EWOULDBLOCK. see IO.select.\n"],["IO::WaitReadable","","IO/WaitReadable.html","","<p>exception to wait for reading. see IO.select.\n"],["IO::WaitWritable","","IO/WaitWritable.html","","<p>exception to wait for writing. see IO.select.\n"],["IOError","","IOError.html","","<p>Raised when an IO operation fails.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/etc/hosts&quot;</span>) {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">f</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&quot;example&quot;</span>}\n  <span class=\"ruby-comment\">#=&gt; IOError: not opened ...</span>\n</pre>\n"],["IndexError","","IndexError.html","","<p>Raised when the given index is invalid.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-value\">:bar</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-value\">0</span>)   <span class=\"ruby-comment\">#=&gt; :foo</span>\n<span class=\"ruby-identifier\">a</span>[<span class=\"ruby-value\">4</span>]         <span class=\"ruby-comment\">#=&gt; nil</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-value\">4</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Integer","","Integer.html","","<p>An Integer object represents an integer value.\n<p>You can create an Integer object explicitly with:\n<p>An integer …\n"],["Interrupt","","Interrupt.html","","<p>Raised when the interrupt signal is received, typically because the user has pressed Control-C (on most …\n"],["Kernel","","Kernel.html","","<p>The Kernel module is included by class Object, so its methods are available in every Ruby object.\n<p>The …\n"],["KeyError","","KeyError.html","","<p>Raised when the specified key is not found. It is a subclass of IndexError.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-string\">&quot;foo&quot;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-value\">:bar</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-string\">&quot;foo&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["LoadError","","LoadError.html","","<p>Raised when a file required (a Ruby script, extension library, …) fails to load.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;this/file/does/not/exist&#39;</span>\n</pre>\n"],["LocalJumpError","","LocalJumpError.html","","<p>Raised when Ruby can’t yield as requested.\n<p>A typical scenario is attempting to yield when no block …\n"],["Marshal","","Marshal.html","","<p>The marshaling library converts collections of Ruby objects into a byte stream, allowing them to be stored …\n"],["MatchData","","MatchData.html","","<p>MatchData encapsulates the result of matching a Regexp against string. It is returned by Regexp#match …\n"],["Math","","Math.html","","<p>Module Math provides methods for basic trigonometric, logarithmic, and transcendental functions, and …\n"],["Math::DomainError","","Math/DomainError.html","","<p>Raised when a mathematical function is evaluated outside of its domain of definition.\n<p>For example, since …\n"],["Method","","Method.html","","<p>Method objects are created by Object#method, and are associated with a particular object (not just with …\n"],["Module","","Module.html","","<p>A Module is a collection of methods and constants. The methods in a module may be instance methods or …\n"],["NameError","","NameError.html","","<p>Raised when a given name is invalid or undefined.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">foo</span>\n</pre>\n<p><em>raises the exception:</em>\n"],["NilClass","","NilClass.html","","<p>The class of the singleton object <code>nil</code>.\n"],["NoMatchingPatternError","","NoMatchingPatternError.html","",""],["NoMatchingPatternKeyError","","NoMatchingPatternKeyError.html","",""],["NoMemoryError","","NoMemoryError.html","","<p>Raised when memory allocation fails.\n"],["NoMethodError","","NoMethodError.html","","<p>Raised when a method is called on a receiver which doesn’t have it defined and also fails to respond …\n"],["NotImplementedError","","NotImplementedError.html","","<p>Raised when a feature is not implemented on the current platform. For example, methods depending on the …\n"],["Numeric","","Numeric.html","","<p>Numeric is the class from which all higher-level numeric classes should inherit.\n<p>Numeric allows instantiation …\n"],["Object","","Object.html","","<p>Object is the default root of all Ruby objects.  Object inherits from BasicObject which allows creating …\n"],["ObjectSpace","","ObjectSpace.html","","<p>The ObjectSpace module contains a number of routines that interact with the garbage collection facility …\n"],["ObjectSpace::WeakMap","","ObjectSpace/WeakMap.html","","<p>An ObjectSpace::WeakMap object holds references to any objects, but those objects can get garbage collected. …\n"],["Proc","","Proc.html","","<p>A <code>Proc</code> object is an encapsulation of a block of code, which can be stored in a local variable, passed …\n"],["Process","","Process.html","","<p>The module contains several groups of functionality for handling OS processes:\n<p>Low-level property introspection …\n"],["Process::GID","","Process/GID.html","","<p>The Process::GID module contains a collection of module functions which can be used to portably get, …\n"],["Process::Status","","Process/Status.html","","<p>Process::Status encapsulates the information on the status of a running or terminated system process. …\n"],["Process::Sys","","Process/Sys.html","","<p>The Process::Sys module contains UID and GID functions which provide direct bindings to the system calls …\n"],["Process::Tms","","Process/Tms.html","","<p>Placeholder for rusage\n"],["Process::UID","","Process/UID.html","","<p>The Process::UID module contains a collection of module functions which can be used to portably get, …\n"],["RDoc","","RDoc.html","",""],["RDoc::MarkupReference","","RDoc/MarkupReference.html","","<p>Class RDoc::MarkupReference exists only to provide a suitable home for a reference document for RDoc …\n"],["RDoc::MarkupReference::DummyClass","","RDoc/MarkupReference/DummyClass.html","",""],["RDoc::MarkupReference::DummyModule","","RDoc/MarkupReference/DummyModule.html","",""],["Ractor","","Ractor.html","",""],["Ractor::ClosedError","","Ractor/ClosedError.html","","<p>Raised when an attempt is made to send a message to a closed port, or to retrieve a message from a closed …\n"],["Ractor::Error","","Ractor/Error.html","",""],["Ractor::IsolationError","","Ractor/IsolationError.html","",""],["Ractor::MovedError","","Ractor/MovedError.html","","<p>Raised on an attempt to access an object which was moved in Ractor#send or Ractor.yield.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = <span class=\"ruby-constant\">Ractor</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Ractor::MovedObject","","Ractor/MovedObject.html","","<p>A special object which replaces any value that was moved to another ractor in Ractor#send or Ractor.yield …\n"],["Ractor::RemoteError","","Ractor/RemoteError.html","","<p>Raised on attempt to Ractor#take if there was an uncaught exception in the Ractor. Its <code>cause</code> will contain …\n"],["Ractor::UnsafeError","","Ractor/UnsafeError.html","",""],["Random","","Random.html","","<p>Random provides an interface to Ruby’s pseudo-random number generator, or PRNG.  The PRNG produces …\n"],["Random::Formatter","","Random/Formatter.html","","<p>Generate a random number in the given range as Random does\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">prng</span>.<span class=\"ruby-identifier\">random_number</span>       <span class=\"ruby-comment\">#=&gt; 0.5816771641321361 ...</span>\n</pre>\n"],["Range","","Range.html","","<p>A Range object represents a collection of values that are between given begin and end values.\n<p>You can …\n"],["RangeError","","RangeError.html","","<p>Raised when a given numerical value is out of range.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">drop</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">100</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Rational","","Rational.html","","<p>A rational number can be represented as a pair of integer numbers: a/b (b&gt;0), where a is the numerator …\n"],["Refinement","","Refinement.html","","<p>Refinement is a class of the <code>self</code> (current context) inside <code>refine</code> statement. It allows to import methods …\n"],["Regexp","","Regexp.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the contents of a string. They’re used …\n"],["Regexp::TimeoutError","","Regexp/TimeoutError.html","",""],["RegexpError","","RegexpError.html","","<p>Raised when given an invalid regexp expression.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;?&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Ripper","","Ripper.html","",""],["RubyVM","","RubyVM.html","","<p>The RubyVM module only exists on MRI. <code>RubyVM</code> is not defined in other Ruby implementations such as JRuby …\n"],["RubyVM::AbstractSyntaxTree","","RubyVM/AbstractSyntaxTree.html","",""],["RubyVM::AbstractSyntaxTree::Node","","RubyVM/AbstractSyntaxTree/Node.html","",""],["RubyVM::InstructionSequence","","RubyVM/InstructionSequence.html","","<p>The InstructionSequence class represents a compiled sequence of instructions for the Virtual Machine …\n"],["RuntimeError","","RuntimeError.html","","<p>A generic error class raised when an invalid operation is attempted. Kernel#raise will raise a RuntimeError …\n"],["ScriptError","","ScriptError.html","","<p>ScriptError is the superclass for errors raised when a script can not be executed because of a <code>LoadError</code> …\n"],["SecurityError","","SecurityError.html","","<p>No longer used by internal code.\n"],["Signal","","Signal.html","","<p>Many operating systems allow signals to be sent to running processes. Some signals have a defined effect …\n"],["SignalException","","SignalException.html","","<p>Raised when a signal is received.\n\n<pre>begin\n  Process.kill(&#39;HUP&#39;,Process.pid)\n  sleep # wait for receiver ...</pre>\n"],["StandardError","","StandardError.html","","<p>The most standard error types are subclasses of StandardError. A rescue clause without an explicit Exception …\n"],["StopIteration","","StopIteration.html","","<p>Raised to stop the iteration, in particular by Enumerator#next. It is rescued by Kernel#loop.\n\n<pre>loop do ...</pre>\n"],["String","","String.html","",""],["Struct","","Struct.html","","<p>Class Struct provides a convenient way to create a simple class that can store and fetch values.\n<p>This …\n"],["Symbol","","Symbol.html","","<p>Symbol objects represent named identifiers inside the Ruby interpreter.\n<p>You can create a Symbol object …\n"],["SyntaxError","","SyntaxError.html","","<p>Raised when encountering Ruby code with an invalid syntax.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&quot;1+1=2&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["SystemCallError","","SystemCallError.html","","<p>SystemCallError is the base class for all low-level platform-dependent errors.\n<p>The errors available on …\n"],["SystemExit","","SystemExit.html","","<p>Raised by <code>exit</code> to initiate the termination of the script.\n"],["SystemStackError","","SystemStackError.html","","<p>Raised in case of a stack overflow.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">me_myself_and_i</span>\n  <span class=\"ruby-identifier\">me_myself_and_i</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">me_myself_and_i</span>\n</pre>\n<p><em>raises the</em> …\n"],["Thread","","Thread.html","","<p>Threads are the Ruby implementation for a concurrent programming model.\n<p>Programs that require multiple …\n"],["Thread::Backtrace","","Thread/Backtrace.html","","<p>An internal representation of the backtrace. The user will never interact with objects of this class …\n"],["Thread::Backtrace::Location","","Thread/Backtrace/Location.html","","<p>An object representation of a stack frame, initialized by Kernel#caller_locations.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># caller_locations.rb ...</span>\n</pre>\n"],["Thread::ConditionVariable","","Thread/ConditionVariable.html","","<p>ConditionVariable objects augment class Mutex. Using condition variables, it is possible to suspend while …\n"],["Thread::Mutex","","Thread/Mutex.html","","<p>Thread::Mutex implements a simple semaphore that can be used to coordinate access to shared data from …\n"],["Thread::Queue","","Thread/Queue.html","","<p>The Thread::Queue class implements multi-producer, multi-consumer queues.  It is especially useful in …\n"],["Thread::SizedQueue","","Thread/SizedQueue.html","","<p>This class represents queues of specified size capacity.  The push operation may be blocked if the capacity …\n"],["ThreadError","","ThreadError.html","","<p>Raised when an invalid operation is attempted on a thread.\n<p>For example, when no other thread has been …\n"],["ThreadGroup","","ThreadGroup.html","","<p>ThreadGroup provides a means of keeping track of a number of threads as a group.\n<p>A given Thread object …\n"],["Time","","Time.html","",""],["TracePoint","","TracePoint.html","",""],["TrueClass","","TrueClass.html","","<p>The global value <code>true</code> is the only instance of class TrueClass and represents a logically true value in …\n"],["TypeError","","TypeError.html","","<p>Raised when encountering an object that is not of the expected type.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">first</span>(<span class=\"ruby-string\">&quot;two&quot;</span>)\n</pre>\n<p><em>raises the</em> …\n"],["UnboundMethod","","UnboundMethod.html","","<p>Ruby supports two forms of objectified methods. Class Method is used to represent methods that are associated …\n"],["UncaughtThrowError","","UncaughtThrowError.html","","<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not have corresponding <code>catch</code> block.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">throw</span> <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar&quot;</span>\n</pre>\n"],["UnicodeNormalize","","UnicodeNormalize.html","","<p>define UnicodeNormalize module here so that we don’t have to look it up\n"],["Warning","","Warning.html","","<p>The Warning module contains a single method named #warn, and the module extends itself, making Warning.warn …\n"],["ZeroDivisionError","","ZeroDivisionError.html","","<p>Raised when attempting to divide an integer by 0.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">42</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">0</span>   <span class=\"ruby-comment\">#=&gt; ZeroDivisionError: divided by 0</span>\n</pre>\n<p>Note that …\n"],["fatal","","fatal.html","","<p>fatal is an Exception that is raised when Ruby has encountered a fatal error and must exit.\n"],["!","BasicObject","BasicObject.html#method-i-21","()","<p>Boolean negate.\n"],["!","Ractor::MovedObject","Ractor/MovedObject.html#method-i-21","(*args)",""],["!=","BasicObject","BasicObject.html#method-i-21-3D","(p1)","<p>Returns true if two objects are not-equal, otherwise false.\n"],["!=","Ractor::MovedObject","Ractor/MovedObject.html#method-i-21-3D","(*args)",""],["!~","Object","Object.html#method-i-21~","(p1)","<p>Returns true if two objects do not match (using the <em>=~</em> method), otherwise false.\n"],["%","Float","Float.html#method-i-25","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a float.\n<p>For float <code>f</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["%","Integer","Integer.html#method-i-25","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>For integer <code>n</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["%","Numeric","Numeric.html#method-i-25","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>Of the Core and Standard Library classes, only Rational uses …\n"],["%","Range","Range.html#method-i-25","(p1)","<p>Iterates over the elements of <code>self</code>.\n<p>With a block given, calls the block with selected elements of the …\n"],["%","String","String.html#method-i-25","(p1)","<p>Returns the result of formatting <code>object</code> into the format specification <code>self</code> (see Kernel#sprintf for formatting …\n"],["&","Array","Array.html#method-i-26","(p1)","<p>Returns a new Array containing each element found in both <code>array</code> and Array <code>other_array</code>; duplicates are …\n"],["&","FalseClass","FalseClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is the argument to a method call—there is no short-circuit …\n"],["&","IO::Buffer","IO/Buffer.html#method-i-26","(p1)","<p>Generate a new buffer the same size as the source by applying the binary AND operation to the source, …\n"],["&","Integer","Integer.html#method-i-26","(p1)","<p>Bitwise AND; each bit in the result is 1 if both corresponding bits in <code>self</code> and <code>other</code> are 1, 0 otherwise: …\n"],["&","NilClass","NilClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is the argument to a method call—there is no short-circuit …\n"],["&","Process::Status","Process/Status.html#method-i-26","(p1)","<p>Logical AND of the bits in <em>stat</em> with <em>num</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> <span class=\"ruby-value\">0x37</span> }\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>\n<span class=\"ruby-identifier\">sprintf</span>(<span class=\"ruby-string\">&#39;%04x&#39;</span>, <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_i</span>)    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["&","TrueClass","TrueClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or <code>false</code>, <code>true</code> otherwise.\n"],["*","Array","Array.html#method-i-2A","(p1)","<p>When non-negative argument Integer <code>n</code> is given, returns a new Array built by concatenating the <code>n</code> copies …\n"],["*","Complex","Complex.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (-5+12i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["*","Float","Float.html#method-i-2A","(p1)","<p>Returns a new Float which is the product of <code>self</code> and <code>other</code>:\n\n<pre>f = 3.14\nf * 2              # =&gt; 6.28\nf * ...</pre>\n"],["*","Integer","Integer.html#method-i-2A","(p1)","<p>Performs multiplication:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 8</span>\n<span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">-2</span>             <span class=\"ruby-comment\"># =&gt; -8</span>\n<span class=\"ruby-value\">-4</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">2</span>             <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["*","Rational","Rational.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4/9)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["*","String","String.html#method-i-2A","(p1)","<p>Returns a new String containing <code>integer</code> copies of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Ho! &quot;</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">3</span> <span class=\"ruby-comment\"># =&gt; &quot;Ho! Ho! Ho! &quot;</span>\n<span class=\"ruby-string\">&quot;Ho! &quot;</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">0</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["**","Complex","Complex.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;i&#39;</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\">#=&gt; (-1+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["**","Float","Float.html#method-i-2A-2A","(p1)","<p>Raises <code>self</code> to the power of <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 9.8596</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-2</span>             <span class=\"ruby-comment\"># =&gt; 0.1014239928597509 ...</span>\n</pre>\n"],["**","Integer","Integer.html#method-i-2A-2A","(p1)","<p>Raises <code>self</code> to the power of <code>numeric</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">3</span>              <span class=\"ruby-comment\"># =&gt; 8</span>\n<span class=\"ruby-value\">2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-3</span>             <span class=\"ruby-comment\"># =&gt; (1/8)</span>\n<span class=\"ruby-value\">-2</span> <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">3</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["**","Rational","Rational.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>)    <span class=\"ruby-operator\">**</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">3</span>)     <span class=\"ruby-comment\">#=&gt; (8/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">10</span>)   <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-2</span>             <span class=\"ruby-operator\">...</span>\n</pre>\n"],["+","Array","Array.html#method-i-2B","(p1)","<p>Returns a new Array containing all elements of <code>array</code> followed by all elements of <code>other_array</code>:\n\n<pre>a = [0, ...</pre>\n"],["+","Complex","Complex.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4+6i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; (901+0i) ...</span>\n</pre>\n"],["+","Enumerator","Enumerator.html#method-i-2B","(p1)","<p>Returns an enumerator object generated from this enumerator and a given enumerable.\n\n<pre>e = (1..3).each + ...</pre>\n"],["+","Float","Float.html#method-i-2B","(p1)","<p>Returns a new Float which is the sum of <code>self</code> and <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span>                 <span class=\"ruby-comment\"># =&gt; 4.140000000000001 ...</span>\n</pre>\n"],["+","Integer","Integer.html#method-i-2B","(p1)","<p>Performs addition:\n\n<pre>2 + 2              # =&gt; 4\n-2 + 2             # =&gt; 0\n-2 + -2            # =&gt; -4\n2 + ...</pre>\n"],["+","Rational","Rational.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4/3)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["+","String","String.html#method-i-2B","(p1)","<p>Returns a new String containing <code>other_string</code> concatenated to <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Hello from &quot;</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;Hello ...</span>\n</pre>\n"],["+","Time","Time.html#method-i-2B","(p1)","<p>Returns a new Time object whose value is the sum of the numeric value of <code>self</code> and the given <code>numeric</code>: …\n"],["+@","Numeric","Numeric.html#method-i-2B-40","()","<p>Returns <code>self</code>.\n"],["+@","String","String.html#method-i-2B-40","()","<p>Returns <code>self</code> if <code>self</code> is not frozen.\n<p>Otherwise returns <code>self.dup</code>, which is not frozen.\n"],["-","Array","Array.html#method-i-2D","(p1)","<p>Returns a new Array containing only those elements from <code>array</code> that are not found in Array <code>other_array</code> …\n"],["-","Complex","Complex.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (0+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["-","Float","Float.html#method-i-2D","(p1)","<p>Returns a new Float which is the difference of <code>self</code> and <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">1</span>                 <span class=\"ruby-comment\"># =&gt; 2.14 ...</span>\n</pre>\n"],["-","Integer","Integer.html#method-i-2D","(p1)","<p>Performs subtraction:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 2</span>\n<span class=\"ruby-value\">-4</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">2</span>             <span class=\"ruby-comment\"># =&gt; -6</span>\n<span class=\"ruby-value\">-4</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">-2</span>            <span class=\"ruby-comment\"># =&gt; -2 ...</span>\n</pre>\n"],["-","Rational","Rational.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (0/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["-","Time","Time.html#method-i-2D","(p1)","<p>When <code>numeric</code> is given, returns a new Time object whose value is the difference of the numeric value of …\n"],["-@","Complex","Complex.html#method-i-2D-40","()","<p>Returns negation of the value.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (-1-2i)</span>\n</pre>\n"],["-@","Numeric","Numeric.html#method-i-2D-40","()","<p>Unary Minus—Returns the receiver, negated.\n"],["-@","Rational","Rational.html#method-i-2D-40","()","<p>Negates <code>rat</code>.\n"],["-@","String","String.html#method-i-2D-40","()","<p>Returns a frozen, possibly pre-existing copy of the string.\n<p>The returned String will be deduplicated as …\n"],["/","Complex","Complex.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; ((1/1)+(0/1)*i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["/","Float","Float.html#method-i-2F","(p1)","<p>Returns a new Float which is the result of dividing <code>self</code> by <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; 1.57 ...</span>\n</pre>\n"],["/","Integer","Integer.html#method-i-2F","(p1)","<p>Performs division; for integer <code>numeric</code>, truncates the result to an integer:\n\n<pre class=\"ruby\"> <span class=\"ruby-value\">4</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">3</span>              <span class=\"ruby-comment\"># =&gt; 1 ...</span>\n</pre>\n"],["/","Rational","Rational.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["<","Comparable","Comparable.html#method-i-3C","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],["<","Float","Float.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically less than <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">3</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">3.0</span>         <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<","Hash","Hash.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a proper subset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre>h1 = {foo: 0, bar: 1}\nh2 = {foo: ...</pre>\n"],["<","Integer","Integer.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is less than that of <code>other</code>:\n\n<pre class=\"ruby\">  <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">0</span>              <span class=\"ruby-comment\"># =&gt; false</span>\n  <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<","Module","Module.html#method-i-3C","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em>. Returns <code>false</code> if <em>mod</em> is the same as <em>other</em> or <em>mod</em> is an ancestor …\n"],["<<","Array","Array.html#method-i-3C-3C","(p1)","<p>Appends <code>object</code> to <code>self</code>; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">:baz</span> <span class=\"ruby-comment\"># =&gt; [:foo, &quot;bar&quot;, 2, :baz]</span>\n</pre>\n<p>Appends …\n"],["<<","IO","IO.html#method-i-3C-3C","(p1)","<p>Writes the given <code>object</code> to <code>self</code>, which must be opened for writing (see IO@Modes); returns <code>self</code>; if <code>object</code> …\n"],["<<","Integer","Integer.html#method-i-3C-3C","(p1)","<p>Returns <code>self</code> with bits shifted <code>count</code> positions to the left, or to the right if <code>count</code> is negative:\n\n<pre>n = ...</pre>\n"],["<<","Method","Method.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this method and the given <em>g</em>. The returned proc takes a variable …\n"],["<<","Proc","Proc.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this proc and the given <em>g</em>. The returned proc takes a variable …\n"],["<<","String","String.html#method-i-3C-3C","(p1)","<p>Concatenates <code>object</code> to <code>self</code> and returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;foobar&quot;</span>\n<span class=\"ruby-identifier\">s</span>          <span class=\"ruby-comment\"># =&gt; &quot;foobar&quot;</span>\n</pre>\n"],["<<","Thread::Queue","Thread/Queue.html#method-i-3C-3C","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["<=","Comparable","Comparable.html#method-i-3C-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],["<=","Float","Float.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically less than or equal to <code>other</code>:\n\n<pre>2.0 &lt;= 3              # =&gt; true\n2.0 &lt;= ...</pre>\n"],["<=","Hash","Hash.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a subset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre>h1 = {foo: 0, bar: 1}\nh2 = {foo: 0, bar: ...</pre>\n"],["<=","Integer","Integer.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is less than or equal to that of <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;=</span> <span class=\"ruby-value\">0</span>              <span class=\"ruby-comment\"># =&gt; false ...</span>\n</pre>\n"],["<=","Module","Module.html#method-i-3C-3D","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em> or is the same as <em>other</em>. Returns <code>nil</code> if there’s no relationship …\n"],["<=>","Array","Array.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or 1 as <code>self</code> is less than, equal to, or greater than <code>other_array</code>. For each index <code>i</code> in …\n"],["<=>","Complex","Complex.html#method-i-3C-3D-3E","(p1)","<p>If <code>cmp</code>‘s imaginary part is zero, and <code>object</code> is also a real number (or a Complex number where the …\n"],["<=>","File::Stat","File/Stat.html#method-i-3C-3D-3E","(p1)","<p>Compares File::Stat objects by comparing their respective modification times.\n<p><code>nil</code> is returned if <code>other_stat</code> …\n"],["<=>","Float","Float.html#method-i-3C-3D-3E","(p1)","<p>Returns a value that depends on the numeric relation between <code>self</code> and <code>other</code>:\n<p>-1, if <code>self</code> is less than …\n"],["<=>","IO::Buffer","IO/Buffer.html#method-i-3C-3D-3E","(p1)","<p>Buffers are compared by size and exact contents of the memory they are referencing using <code>memcmp</code>.\n"],["<=>","Integer","Integer.html#method-i-3C-3D-3E","(p1)","<p>Returns:\n<p>-1, if <code>self</code> is less than <code>other</code>.\n<p>0, if <code>self</code> is equal to <code>other</code>.\n"],["<=>","Module","Module.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1 or nil depending on whether <code>module</code> includes <code>other_module</code>, they are the …\n"],["<=>","Numeric","Numeric.html#method-i-3C-3D-3E","(p1)","<p>Returns zero if <code>self</code> is the same as <code>other</code>, <code>nil</code> otherwise.\n<p>No subclass in the Ruby Core or Standard Library …\n"],["<=>","Object","Object.html#method-i-3C-3D-3E","(p1)","<p>Returns 0 if <code>obj</code> and <code>other</code> are the same object or <code>obj == other</code>, otherwise nil.\n<p>The #<=> is used by various …\n"],["<=>","Rational","Rational.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or +1 depending on whether <code>rational</code> is less than, equal to, or greater than <code>numeric</code>.\n<p><code>nil</code> …\n"],["<=>","String","String.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>self</code> and <code>other_string</code>, returning:\n<p>-1 if <code>other_string</code> is larger.\n<p>0 if the two are equal.\n"],["<=>","Symbol","Symbol.html#method-i-3C-3D-3E","(p1)","<p>If <code>object</code> is a symbol, returns the equivalent of <code>symbol.to_s &lt;=&gt; object.to_s</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:bar</span> <span class=\"ruby-operator\">&lt;=&gt;</span> <span class=\"ruby-value\">:foo</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>self</code> with <code>other_time</code>; returns:\n<p><code>-1</code>, if <code>self</code> is less than <code>other_time</code>.\n<p><code>0</code>, if <code>self</code> is equal to <code>other_time</code> …\n"],["==","Array","Array.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if both <code>array.size == other_array.size</code> and for each index <code>i</code> in <code>array</code>, <code>array[i] == other_array[i]</code> …\n"],["==","BasicObject","BasicObject.html#method-i-3D-3D","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["==","Comparable","Comparable.html#method-i-3D-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns 0. Also …\n"],["==","Complex","Complex.html#method-i-3D-3D","(p1)","<p>Returns true if cmp equals object numerically.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">5</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Data","Data.html#method-i-3D-3D","(p1)","<p>Returns  <code>true</code> if <code>other</code> is the same class as <code>self</code>, and all members are equal.\n<p>Examples:\n\n<pre>Measure = Data.new(:amount, ...</pre>\n"],["==","Encoding::Converter","Encoding/Converter.html#method-i-3D-3D","(p1)",""],["==","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an Enumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["==","Exception","Exception.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not an Exception, returns <code>false</code>. Otherwise, returns <code>true</code> if <em>exc</em> and <em>obj</em> share same …\n"],["==","Float","Float.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>other</code> has the same value as <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Hash","Hash.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if all of the following are true:\n<p><code>object</code> is a Hash object.\n<p><code>hash</code> and <code>object</code> have the same keys …\n"],["==","Integer","Integer.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically equal to <code>other</code>; <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>     <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">1.0</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["==","MatchData","MatchData.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is another MatchData object whose target string, regexp, match, and captures are …\n"],["==","Method","Method.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer to the same method definition …\n"],["==","Module","Module.html#method-i-3D-3D","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["==","Proc","Proc.html#method-i-3D-3D","(p1)","<p>Two procs are the same if, and only if, they were created from the same code block.\n\n<pre>def return_block(&amp;block) ...</pre>\n"],["==","Process::Status","Process/Status.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the integer value of <em>stat</em> equals <em>other</em>.\n"],["==","Ractor::MovedObject","Ractor/MovedObject.html#method-i-3D-3D","(*args)",""],["==","Random","Random.html#method-i-3D-3D","(p1)","<p>Returns true if the two generators have the same internal state, otherwise false.  Equivalent generators …\n"],["==","Range","Range.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if and only if:\n<p><code>other</code> is a range.\n<p><code>other.begin == self.begin</code>.\n"],["==","Rational","Rational.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>rat</code> equals <code>object</code> numerically.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Regexp","Regexp.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is another Regexp whose pattern, flags, and encoding are the same as <code>self</code>, <code>false</code> …\n"],["==","String","String.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> has the same length and content; as <code>self</code>; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Struct","Struct.html#method-i-3D-3D","(p1)","<p>Returns  <code>true</code> if and only if the following are true; otherwise returns <code>false</code>:\n<p><code>other.class == self.class</code> …\n"],["==","Symbol","Symbol.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is the same object as <code>self</code>, <code>false</code> otherwise.\n<p>Symbol#=== is an alias for Symbol#== …\n"],["==","UnboundMethod","UnboundMethod.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer to the same method definition …\n"],["===","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an Enumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["===","FalseClass","FalseClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["===","Float","Float.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>other</code> has the same value as <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Integer","Integer.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically equal to <code>other</code>; <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">2</span>     <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-value\">1.0</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["===","Method","Method.html#method-i-3D-3D-3D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the method’s return value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-string\">&quot;+&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Module","Module.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Returns <code>true</code> if <em>obj</em> is an instance of <em>mod</em> or an instance of one of <em>mod</em>’s descendants. …\n"],["===","NilClass","NilClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["===","Object","Object.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["===","Proc","Proc.html#method-i-3D-3D-3D","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["===","Range","Range.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is between <code>self.begin</code> and <code>self.end</code>. <code>false</code> otherwise:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>) <span class=\"ruby-operator\">===</span> <span class=\"ruby-value\">2</span>       <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["===","Regexp","Regexp.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> finds a match in <code>string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/^[a-z]*$/</span> <span class=\"ruby-operator\">===</span> <span class=\"ruby-string\">&#39;HELLO&#39;</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-regexp\">/^[A-Z]*$/</span> <span class=\"ruby-operator\">===</span> <span class=\"ruby-string\">&#39;HELLO&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","String","String.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> has the same length and content; as <code>self</code>; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Symbol","Symbol.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>object</code> is the same object as <code>self</code>, <code>false</code> otherwise.\n<p>Symbol#=== is an alias for Symbol#== …\n"],["===","SystemCallError","SystemCallError.html#method-c-3D-3D-3D","(p1)","<p>Return <code>true</code> if the receiver is a generic <code>SystemCallError</code>, or if the error numbers <code>self</code> and <em>other</em> are …\n"],["===","TrueClass","TrueClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling <code>#==</code>, but typically overridden by descendants …\n"],["=~","NilClass","NilClass.html#method-i-3D~","(p1)","<p>Dummy pattern matching – always returns nil.\n<p>This method makes it possible to ‘while gets =~ /re/ do`. …\n"],["=~","Regexp","Regexp.html#method-i-3D~","(p1)","<p>Returns the integer index (in characters) of the first match for <code>self</code> and <code>string</code>, or <code>nil</code> if none; also …\n"],["=~","String","String.html#method-i-3D~","(p1)","<p>Returns the Integer index of the first substring that matches the given <code>regexp</code>, or <code>nil</code> if no match found: …\n"],["=~","Symbol","Symbol.html#method-i-3D~","(p1)","<p>Equivalent to <code>symbol.to_s =~ object</code>, including possible updates to global variables; see String#=~.\n"],[">","Comparable","Comparable.html#method-i-3E","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],[">","Float","Float.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically greater than <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1.0</span>      <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">","Hash","Hash.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a proper superset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h1</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">","Integer","Integer.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is greater than that of <code>other</code>:\n\n<pre>  1 &gt; 0              # =&gt; true\n  1 &gt; ...</pre>\n"],[">","Module","Module.html#method-i-3E","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>. Returns <code>false</code> if <em>mod</em> is the same as <em>other</em> or <em>mod</em> is a descendant …\n"],[">=","Comparable","Comparable.html#method-i-3E-3D","(p1)","<p>Compares two objects based on the receiver’s <code>&lt;=&gt;</code> method, returning true if it returns a value …\n"],[">=","Float","Float.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>self</code> is numerically greater than or equal to <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">&gt;=</span> <span class=\"ruby-value\">1</span>              <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">2.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],[">=","Hash","Hash.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>hash</code> is a superset of <code>other_hash</code>, <code>false</code> otherwise:\n\n<pre>h1 = {foo: 0, bar: 1, baz: 2}\nh2 = ...</pre>\n"],[">=","Integer","Integer.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>self</code> is greater than or equal to that of <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&gt;=</span> <span class=\"ruby-value\">0</span>              <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],[">=","Module","Module.html#method-i-3E-3D","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>, or the two modules are the same. Returns <code>nil</code> if there’s …\n"],[">>","Integer","Integer.html#method-i-3E-3E","(p1)","<p>Returns <code>self</code> with bits shifted <code>count</code> positions to the right, or to the left if <code>count</code> is negative:\n\n<pre>n = ...</pre>\n"],[">>","Method","Method.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this method and the given <em>g</em>. The returned proc takes a variable …\n"],[">>","Proc","Proc.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this proc and the given <em>g</em>. The returned proc takes a variable …\n"],[">>","Process::Status","Process/Status.html#method-i-3E-3E","(p1)","<p>Shift the bits in <em>stat</em> right <em>num</em> places.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> <span class=\"ruby-value\">99</span> }   <span class=\"ruby-comment\">#=&gt; 26563</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>       <span class=\"ruby-comment\">#=&gt; 26563</span>\n<span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Array","Kernel","Kernel.html#method-i-Array","(p1)","<p>Returns an array converted from <code>object</code>.\n<p>Tries to convert <code>object</code> to an array using <code>to_ary</code> first and <code>to_a</code> …\n"],["Complex","Kernel","Kernel.html#method-i-Complex","(p1, p2 = v2, p3 = {})","<p>Returns x+i*y;\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)    <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;1+2i&#39;</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-keyword\">nil</span>)     <span class=\"ruby-comment\">#=&gt; TypeError ...</span>\n</pre>\n"],["Hash","Kernel","Kernel.html#method-i-Hash","(p1)","<p>Returns a hash converted from <code>object</code>.\n<p>If <code>object</code> is:\n<p>A hash, returns <code>object</code>.\n"],["Integer","Kernel","Kernel.html#method-i-Integer","(*args)","<p>Returns an integer converted from <code>object</code>.\n<p>Tries to convert <code>object</code> to an integer using <code>to_int</code> first and …\n"],["Rational","Kernel","Kernel.html#method-i-Rational","(p1, p2 = v2, p3 = {})","<p>Returns <code>x/y</code> or <code>arg</code> as a Rational.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (2/3)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">5</span>)      <span class=\"ruby-comment\">#=&gt; (5/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">0.5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["String","Kernel","Kernel.html#method-i-String","(p1)","<p>Returns a string converted from <code>object</code>.\n<p>Tries to convert <code>object</code> to a string using <code>to_str</code> first and <code>to_s</code> …\n"],["[]","Array","Array.html#method-c-5B-5D","(*args)","<p>Returns a new array populated with the given objects.\n\n<pre>Array.[]( 1, &#39;a&#39;, /^A/)  # =&gt; [1, &quot;a&quot;, /^A/]\nArray[ ...</pre>\n"],["[]","Array","Array.html#method-i-5B-5D","(*args)","<p>Returns elements from <code>self</code>; does not modify <code>self</code>.\n<p>When a single Integer argument <code>index</code> is given, returns …\n"],["[]","Continuation","Continuation.html#method-i-5B-5D","(*args)","<p>Invokes the continuation. The program continues from the end of the #callcc block. If no arguments are …\n"],["[]","ENV","ENV.html#method-c-5B-5D","(p1)","<p>Returns the value for the environment variable <code>name</code> if it exists:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] <span class=\"ruby-comment\"># =&gt; &quot;0&quot;</span>\n</pre>\n"],["[]","Hash","Hash.html#method-c-5B-5D","(*args)","<p>Returns a new Hash object populated with the given objects, if any. See Hash::new.\n<p>With no argument, returns …\n"],["[]","Hash","Hash.html#method-i-5B-5D","(p1)","<p>Returns the value associated with the given <code>key</code>, if found:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>[<span class=\"ruby-value\">:foo</span>] <span class=\"ruby-comment\"># =&gt; 0</span>\n</pre>\n"],["[]","Integer","Integer.html#method-i-5B-5D","(*args)","<p>Returns a slice of bits from <code>self</code>.\n<p>With argument <code>offset</code>, returns the bit at the given offset, where offset …\n"],["[]","MatchData","MatchData.html#method-i-5B-5D","(p1, p2 = v2)","<p>When arguments <code>index</code>, +start and <code>length</code>, or <code>range</code> are given, returns match and captures in the style …\n"],["[]","Method","Method.html#method-i-5B-5D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the method’s return value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-string\">&quot;+&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D","(p1)","<p>Retrieves a weakly referenced object with the given key\n"],["[]","Proc","Proc.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["[]","String","String.html#method-i-5B-5D","(*args)","<p>Returns the substring of <code>self</code> specified by the arguments. See examples at String Slices.\n"],["[]","Struct","Struct.html#method-i-5B-5D","(p1)","<p>Returns a value from <code>self</code>.\n<p>With symbol or string argument <code>name</code> given, returns the value for the named …\n"],["[]","Symbol","Symbol.html#method-i-5B-5D","(*args)","<p>Equivalent to <code>symbol.to_s[]</code>; see String#[].\n"],["[]","Thread","Thread.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of a fiber-local variable (current thread’s root fiber if …\n"],["[]","Warning","Warning.html#method-c-5B-5D","(p1)","<p>Returns the flag to show the warning messages for <code>category</code>. Supported categories are:\n<p><code>:deprecated</code>  &mdash; deprecation …\n\n"],["[]=","Array","Array.html#method-i-5B-5D-3D","(*args)","<p>Assigns elements in <code>self</code>; returns the given <code>object</code>.\n<p>When Integer argument <code>index</code> is given, assigns <code>object</code> …\n"],["[]=","ENV","ENV.html#method-c-5B-5D-3D","(p1, p2)","<p>ENV.store is an alias for ENV.[]=.\n<p>Creates, updates, or deletes the named environment variable, returning …\n"],["[]=","Hash","Hash.html#method-i-5B-5D-3D","(p1, p2)","<p>Hash#store is an alias for Hash#[]=.\n<p>Associates the given <code>value</code> with the given <code>key</code>; returns <code>value</code>.\n<p>If the …\n"],["[]=","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D-3D","(p1, p2)","<p>Creates a weak reference from the given key to the given value\n"],["[]=","String","String.html#method-i-5B-5D-3D","(*args)","<p>Replaces all, some, or none of the contents of <code>self</code>; returns <code>new_string</code>. See String Slices.\n<p>A few examples: …\n"],["[]=","Struct","Struct.html#method-i-5B-5D-3D","(p1, p2)","<p>Assigns a value to a member.\n<p>With symbol or string argument <code>name</code> given, assigns the given <code>value</code> to the …\n"],["[]=","Thread","Thread.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets or creates the value of a fiber-local variable, using either a symbol or …\n"],["[]=","Warning","Warning.html#method-c-5B-5D-3D","(p1, p2)","<p>Sets the warning flags for <code>category</code>. See Warning.[] for the categories.\n"],["^","FalseClass","FalseClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>, returns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","IO::Buffer","IO/Buffer.html#method-i-5E","(p1)","<p>Generate a new buffer the same size as the source by applying the binary XOR operation to the source, …\n"],["^","Integer","Integer.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR; each bit in the result is 1 if the corresponding bits in <code>self</code> and <code>other</code> are different, …\n"],["^","NilClass","NilClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>, returns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","TrueClass","TrueClass.html#method-i-5E","(p1)","<p>Exclusive Or—Returns <code>true</code> if <em>obj</em> is <code>nil</code> or <code>false</code>, <code>false</code> otherwise.\n"],["__callee__","Kernel","Kernel.html#method-i-__callee__","()","<p>Returns the called name of the current method as a Symbol. If called outside of a method, it returns …\n"],["__dir__","Kernel","Kernel.html#method-i-__dir__","()","<p>Returns the canonicalized absolute path of the directory of the file from which this method is called. …\n"],["__id__","BasicObject","BasicObject.html#method-i-__id__","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for …\n"],["__id__","Ractor::MovedObject","Ractor/MovedObject.html#method-i-__id__","(*args)",""],["__method__","Kernel","Kernel.html#method-i-__method__","()","<p>Returns the name at the definition of the current method as a Symbol. If called outside of a method, …\n"],["__send__","BasicObject","BasicObject.html#method-i-__send__","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments specified. When the method is identified …\n"],["__send__","Ractor::MovedObject","Ractor/MovedObject.html#method-i-__send__","(*args)",""],["_enumerable_collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_collect","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["_enumerable_collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_collect_concat","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["_enumerable_drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_drop","(p1)","<p>Like Enumerable#drop, but chains operation to be lazy-evaluated.\n"],["_enumerable_drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_drop_while","()","<p>Like Enumerable#drop_while, but chains operation to be lazy-evaluated.\n"],["_enumerable_filter","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_filter","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["_enumerable_filter_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_filter_map","()","<p>Like Enumerable#filter_map, but chains operation to be lazy-evaluated.\n\n<pre>(1..).lazy.filter_map { |i| i * ...</pre>\n"],["_enumerable_find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_find_all","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["_enumerable_flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_flat_map","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["_enumerable_grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_grep","(p1)","<p>Like Enumerable#grep, but chains operation to be lazy-evaluated.\n"],["_enumerable_grep_v","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_grep_v","(p1)","<p>Like Enumerable#grep_v, but chains operation to be lazy-evaluated.\n"],["_enumerable_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_map","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["_enumerable_reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_reject","()","<p>Like Enumerable#reject, but chains operation to be lazy-evaluated.\n"],["_enumerable_select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_select","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["_enumerable_take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_take","(p1)","<p>Like Enumerable#take, but chains operation to be lazy-evaluated.\n"],["_enumerable_take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_take_while","()","<p>Like Enumerable#take_while, but chains operation to be lazy-evaluated.\n"],["_enumerable_uniq","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_uniq","()","<p>Like Enumerable#uniq, but chains operation to be lazy-evaluated.\n"],["_enumerable_zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_zip","(*args)","<p>Like Enumerable#zip, but chains operation to be lazy-evaluated. However, if a block is given to zip, …\n"],["_fork","Process","Process.html#method-c-_fork","()","<p>An internal API for fork. Do not call this method directly. Currently, this is called via Kernel#fork …\n"],["_id2ref","ObjectSpace","ObjectSpace.html#method-c-_id2ref","(p1)",""],["`","Kernel","Kernel.html#method-i-60","(p1)","<p>Returns the <code>$stdout</code> output from running <code>command</code> in a subshell; sets global variable <code>$?</code> to the process …\n"],["abort","Kernel","Kernel.html#method-i-abort","(*args)","<p>Terminate execution immediately, effectively by calling <code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort","Process","Process.html#method-c-abort","(*args)","<p>Terminate execution immediately, effectively by calling <code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort_on_exception","Thread","Thread.html#method-c-abort_on_exception","()","<p>Returns the status of the global “abort on exception” condition.\n<p>The default is <code>false</code>.\n<p>When set …\n"],["abort_on_exception","Thread","Thread.html#method-i-abort_on_exception","()","<p>Returns the status of the thread-local “abort on exception” condition for this <code>thr</code>.\n<p>The default …\n"],["abort_on_exception=","Thread","Thread.html#method-c-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if any thread is aborted by an exception, the raised exception will be re-raised in …\n"],["abort_on_exception=","Thread","Thread.html#method-i-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if this <code>thr</code> is aborted by an exception, the raised exception will be re-raised in the …\n"],["abs","Complex","Complex.html#method-i-abs","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["abs","Numeric","Numeric.html#method-i-abs","()","<p>Returns the absolute value of <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>        <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["abs","Rational","Rational.html#method-i-abs","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n(<span class=\"ruby-value\">-1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n<p>Rational#magnitude is …\n"],["abs2","Complex","Complex.html#method-i-abs2","()","<p>Returns square of the absolute value.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs2</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs2</span>  <span class=\"ruby-comment\">#=&gt; 25.0</span>\n</pre>\n"],["abs2","Numeric","Numeric.html#method-i-abs2","()","<p>Returns square of self.\n"],["absolute_path","File","File.html#method-c-absolute_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory …\n"],["absolute_path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-absolute_path","()","<p>Returns the absolute path of this instruction sequence.\n<p><code>nil</code> if the iseq was evaluated from a string.\n<p>For …\n"],["absolute_path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-absolute_path","()","<p>Returns the full file path of this frame.\n<p>Same as #path, except that it will return absolute path even …\n"],["absolute_path?","File","File.html#method-c-absolute_path-3F","(p1)","<p>Returns <code>true</code> if <code>file_name</code> is an absolute path, and <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">absolute_path?</span>(<span class=\"ruby-string\">&quot;c:/foo&quot;</span>)     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["acos","Math","Math.html#method-c-acos","(p1)","<p>Returns the arc cosine of <code>x</code>.\n<p>Domain: <code>[-1, 1]</code>.\n<p>Range: <code>[0, PI]</code>.\n"],["acosh","Math","Math.html#method-c-acosh","(p1)","<p>Returns the inverse hyperbolic cosine of <code>x</code>.\n<p>Domain: <code>[1, INFINITY]</code>.\n<p>Range: <code>[0, INFINITY]</code>.\n"],["add","ThreadGroup","ThreadGroup.html#method-i-add","(p1)","<p>Adds the given <code>thread</code> to this group, removing it from any other group to which it may have previously …\n"],["add_stress_to_class","GC","GC.html#method-c-add_stress_to_class","(*args)","<p>Raises NoMemoryError when allocating an instance of the given classes.\n"],["add_trace_func","Thread","Thread.html#method-i-add_trace_func","(p1)","<p>Adds <em>proc</em> as a handler for tracing.\n<p>See Thread#set_trace_func and Kernel#set_trace_func.\n"],["address_resolve","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-address_resolve","()","<p>Invoked by any method that performs a non-reverse DNS lookup. The most notable method is Addrinfo.getaddrinfo …\n"],["advise","IO","IO.html#method-i-advise","(p1, p2 = v2, p3 = v3)","<p>Invokes Posix system call posix_fadvise(2), which announces an intention to access data from the current …\n"],["alias_method","Module","Module.html#method-i-alias_method","(p1, p2)","<p>Makes <em>new_name</em> a new copy of the method <em>old_name</em>. This can be used to retain access to methods that are …\n"],["aliases","Encoding","Encoding.html#method-c-aliases","()","<p>Returns the hash of available encoding alias and original encoding name.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">aliases</span>\n<span class=\"ruby-comment\">#=&gt; {&quot;BINARY&quot;=&gt;&quot;ASCII-8BIT&quot;, ...</span>\n</pre>\n"],["alive?","Fiber","Fiber.html#method-i-alive-3F","()","<p>Returns true if the fiber can still be resumed (or transferred to). After finishing execution of the …\n"],["alive?","Thread","Thread.html#method-i-alive-3F","()","<p>Returns <code>true</code> if <code>thr</code> is running or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">thr</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { }\n<span class=\"ruby-identifier\">thr</span>.<span class=\"ruby-identifier\">join</span>                <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401b3fb0 ...</span>\n</pre>\n"],["all?","Array","Array.html#method-i-all-3F","(*args)","<p>Returns <code>true</code> if all elements of <code>self</code> meet a given criterion.\n<p>With no block given and no argument, returns …\n"],["all?","Enumerable","Enumerable.html#method-i-all-3F","(*args)","<p>Returns whether every element meets a given criterion.\n<p>With no argument and no block, returns whether …\n"],["all_symbols","Symbol","Symbol.html#method-c-all_symbols","()","<p>Returns an array of all symbols currently in Ruby’s symbol table:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Symbol</span>.<span class=\"ruby-identifier\">all_symbols</span>.<span class=\"ruby-identifier\">size</span>    <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["allbits?","Integer","Integer.html#method-i-allbits-3F","(p1)","<p>Returns <code>true</code> if all bits that are set (=1) in <code>mask</code> are also set in <code>self</code>; returns <code>false</code> otherwise.\n<p>Example …\n"],["allocate","Class","Class.html#method-i-allocate","()","<p>Allocates space for a new object of <em>class</em>’s class and does not call initialize on the new instance. …\n"],["ancestors","Module","Module.html#method-i-ancestors","()","<p>Returns a list of modules included/prepended in <em>mod</em> (including <em>mod</em> itself).\n\n<pre>module Mod\n  include Math ...</pre>\n"],["and!","IO::Buffer","IO/Buffer.html#method-i-and-21","(p1)","<p>Modify the source buffer in place by applying the binary AND operation to the source, using the mask, …\n"],["angle","Complex","Complex.html#method-i-angle","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["angle","Float","Float.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["angle","Numeric","Numeric.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["any?","Array","Array.html#method-i-any-3F","(*args)","<p>Returns <code>true</code> if any element of <code>self</code> meets a given criterion.\n<p>With no block given and no argument, returns …\n"],["any?","Enumerable","Enumerable.html#method-i-any-3F","(*args)","<p>Returns whether any element meets a given criterion.\n<p>With no argument and no block, returns whether any …\n"],["any?","Hash","Hash.html#method-i-any-3F","(*args)","<p>Returns <code>true</code> if any element satisfies a given criterion; <code>false</code> otherwise.\n<p>With no argument and no block, …\n"],["anybits?","Integer","Integer.html#method-i-anybits-3F","(p1)","<p>Returns <code>true</code> if any bit that is set (=1) in <code>mask</code> is also set in <code>self</code>; returns <code>false</code> otherwise.\n<p>Example …\n"],["append","Array","Array.html#method-i-append","(*args)","<p>Appends trailing elements.\n<p>Appends each argument in <code>objects</code> to <code>self</code>;  returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["arg","Complex","Complex.html#method-i-arg","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["arg","Float","Float.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arg","Numeric","Numeric.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["args","NoMethodError","NoMethodError.html#method-i-args","()","<p>Return the arguments passed in as the third parameter to the constructor.\n"],["args_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-args_directive","baz","<p>The <code>:args:</code> directive overrides the actual arguments found in the Ruby code.\n<p>Click on the calling sequence …\n"],["argv","ARGF","ARGF.html#method-i-argv","()","<p>Returns the <code>ARGV</code> array, which contains the arguments passed to your script, one per element.\n<p>For example: …\n"],["argv0","Process","Process.html#method-c-argv0","()","<p>Returns the name of the script being executed.  The value is not affected by assigning a new value to …\n"],["arity","Method","Method.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method. Returns a nonnegative integer …\n"],["arity","Proc","Proc.html#method-i-arity","()","<p>Returns the number of mandatory arguments. If the block is declared to take no arguments, returns 0. …\n"],["arity","UnboundMethod","UnboundMethod.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method. Returns a nonnegative integer …\n"],["ascii_compatible?","Encoding","Encoding.html#method-i-ascii_compatible-3F","()","<p>Returns whether ASCII-compatible or not.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">ascii_compatible?</span>     <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_16BE</span>.<span class=\"ruby-identifier\">ascii_compatible?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ascii_only?","String","String.html#method-i-ascii_only-3F","()","<p>Returns <code>true</code> if <code>self</code> contains only ASCII characters, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;abc&#39;</span>.<span class=\"ruby-identifier\">ascii_only?</span>         <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["asciicompat_encoding","Encoding::Converter","Encoding/Converter.html#method-c-asciicompat_encoding","(p1)","<p>Returns the corresponding ASCII compatible encoding.\n<p>Returns nil if the argument is an ASCII compatible …\n"],["asctime","Time","Time.html#method-i-asctime","()","<p>Returns a string representation of <code>self</code>, formatted by <code>strftime(&#39;%a %b %e %T %Y&#39;)</code> or its shorthand …\n"],["asin","Math","Math.html#method-c-asin","(p1)","<p>Returns the arc sine of <code>x</code>.\n<p>Domain: <code>[-1, -1]</code>.\n<p>Range: <code>[-PI/2, PI/2]</code>.\n"],["asinh","Math","Math.html#method-c-asinh","(p1)","<p>Returns the inverse hyperbolic sine of <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>. …\n"],["assoc","Array","Array.html#method-i-assoc","(p1)","<p>Returns the first element in <code>self</code> that is an Array whose first element <code>==</code> <code>obj</code>:\n\n<pre>a = [{foo: 0}, [2, 4], ...</pre>\n"],["assoc","ENV","ENV.html#method-c-assoc","(p1)","<p>Returns a 2-element Array containing the name and value of the environment variable for <code>name</code> if it exists: …\n"],["assoc","Hash","Hash.html#method-i-assoc","(p1)","<p>If the given <code>key</code> is found, returns a 2-element Array containing that key and its value:\n\n<pre>h = {foo: 0, bar: ...</pre>\n"],["at","Array","Array.html#method-i-at","(p1)","<p>Returns the element at Integer offset <code>index</code>; does not modify <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">at</span>(<span class=\"ruby-value\">0</span>) <span class=\"ruby-comment\"># =&gt; :foo ...</span>\n</pre>\n"],["at_exit","Kernel","Kernel.html#method-i-at_exit","()","<p>Converts <em>block</em> to a <code>Proc</code> object (and therefore binds it at the point of call) and registers it for execution …\n"],["atan","Math","Math.html#method-c-atan","(p1)","<p>Returns the arc tangent of <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-PI/2, PI/2]  </code>.\n"],["atan2","Math","Math.html#method-c-atan2","(p1, p2)","<p>Returns the arc tangent of <code>y</code> and <code>x</code> in radians.\n<p>Domain of <code>y</code>: <code>[-INFINITY, INFINITY]</code>.\n<p>Domain of <code>x</code>: <code>[-INFINITY,</code> …\n"],["atanh","Math","Math.html#method-c-atanh","(p1)","<p>Returns the inverse hyperbolic tangent of <code>x</code>.\n<p>Domain: <code>[-1, 1]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["atime","File","File.html#method-c-atime","(p1)","<p>Returns the last access time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">atime</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["atime","File","File.html#method-i-atime","()","<p>Returns the last access time (a Time object) for <em>file</em>, or epoch if <em>file</em> has not been accessed.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">atime</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["atime","File::Stat","File/Stat.html#method-i-atime","()","<p>Returns the last access time for this file as an object of class Time.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">atime</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["attr","Module","Module.html#method-i-attr","(*args)","<p>The first form is equivalent to #attr_reader. The second form is equivalent to <code>attr_accessor(name)</code> but …\n"],["attr_accessor","Module","Module.html#method-i-attr_accessor","(*args)","<p>Defines a named attribute for this module, where the name is <em>symbol.</em><code>id2name</code>, creating an instance variable …\n"],["attr_reader","Module","Module.html#method-i-attr_reader","(*args)","<p>Creates instance variables and corresponding methods that return the value of each instance variable. …\n"],["attr_writer","Module","Module.html#method-i-attr_writer","(*args)","<p>Creates an accessor method to allow assignment to the attribute <em>symbol</em><code>.id2name</code>. String arguments are …\n"],["auto_compact","GC","GC.html#method-c-auto_compact","()","<p>Returns whether or not automatic compaction has been enabled.\n"],["auto_compact=","GC","GC.html#method-c-auto_compact-3D","(p1)","<p>Updates automatic compaction mode.\n<p>When enabled, the compactor will execute on every major collection. …\n"],["autoclose=","IO","IO.html#method-i-autoclose-3D","(p1)","<p>Sets auto-close flag.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">for_fd</span>(<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">fileno</span>)\n<span class=\"ruby-comment\"># ...</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span> <span class=\"ruby-comment\"># may cause Errno::EBADF ...</span>\n</pre>\n"],["autoclose?","IO","IO.html#method-i-autoclose-3F","()","<p>Returns <code>true</code> if the underlying file descriptor of <em>ios</em> will be closed automatically at its finalization, …\n"],["autoload","Kernel","Kernel.html#method-i-autoload","(p1, p2)","\n<pre>Registers _filename_ to be loaded (using Kernel::require)\nthe first time that _const_ (which may be a ...</pre>\n"],["autoload","Module","Module.html#method-i-autoload","(p1, p2)","\n<pre>Registers _filename_ to be loaded (using Kernel::require)\nthe first time that _const_ (which may be a ...</pre>\n"],["autoload?","Kernel","Kernel.html#method-i-autoload-3F","(*args)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as <code>autoload</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">autoload</span>(<span class=\"ruby-value\">:B</span>, <span class=\"ruby-string\">&quot;b&quot;</span>)\n<span class=\"ruby-identifier\">autoload?</span>(<span class=\"ruby-value\">:B</span>)      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["autoload?","Module","Module.html#method-i-autoload-3F","(*args)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as <code>autoload</code> in the namespace of <em>mod</em> or one of its …\n"],["b","String","String.html#method-i-b","()","<p>Returns a copy of <code>self</code> that has ASCII-8BIT encoding; the underlying bytes are not modified:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&quot;\\x99&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["backtrace","Exception","Exception.html#method-i-backtrace","()","<p>Returns any backtrace associated with the exception. The backtrace is an array of strings, each containing …\n"],["backtrace","Fiber","Fiber.html#method-i-backtrace","(*args)","<p>Returns the current execution stack of the fiber. <code>start</code>, <code>count</code> and <code>end</code> allow to select only parts of …\n"],["backtrace","Thread","Thread.html#method-i-backtrace","(*args)","<p>Returns the current backtrace of the target thread.\n"],["backtrace_locations","Exception","Exception.html#method-i-backtrace_locations","()","<p>Returns any backtrace associated with the exception. This method is similar to Exception#backtrace, but …\n"],["backtrace_locations","Fiber","Fiber.html#method-i-backtrace_locations","(*args)","<p>Like #backtrace, but returns each line of the execution stack as a Thread::Backtrace::Location. Accepts …\n"],["backtrace_locations","Thread","Thread.html#method-i-backtrace_locations","(*args)","<p>Returns the execution stack for the target thread—an array containing backtrace location objects.\n<p>See …\n"],["base_label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-base_label","()","<p>Returns the base label of this instruction sequence.\n<p>For example, using irb:\n\n<pre>iseq = RubyVM::InstructionSequence.compile(&#39;num ...</pre>\n"],["base_label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-base_label","()","<p>Returns the base label of this frame.\n<p>Usually same as #label, without decoration.\n"],["basename","File","File.html#method-c-basename","(*args)","<p>Returns the last component of the filename given in <em>file_name</em> (after first stripping trailing separators), …\n"],["begin","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-begin","()",""],["begin","MatchData","MatchData.html#method-i-begin","(p1)","<p>Returns the offset (in characters) of the beginning of the specified match.\n<p>When non-negative integer …\n"],["begin","Range","Range.html#method-i-begin","()","<p>Returns the object that defines the beginning of <code>self</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">begin</span> <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-operator\">..</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">begin</span>  <span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n<p>Related: …\n"],["between?","Comparable","Comparable.html#method-i-between-3F","(p1, p2)","<p>Returns <code>false</code> if <em>obj</em> <code>&lt;=&gt;</code> <em>min</em> is less than zero or if <em>obj</em> <code>&lt;=&gt;</code> <em>max</em> is greater than zero, <code>true</code> …\n"],["bind","UnboundMethod","UnboundMethod.html#method-i-bind","(p1)","<p>Bind <em>umeth</em> to <em>obj</em>. If Klass was the class from which <em>umeth</em> was obtained, <code>obj.kind_of?(Klass)</code> must be …\n"],["bind_call","UnboundMethod","UnboundMethod.html#method-i-bind_call","(*args)","<p>Bind <em>umeth</em> to <em>recv</em> and then invokes the method with the specified arguments. This is semantically equivalent …\n"],["binding","Kernel","Kernel.html#method-i-binding","()","<p>Returns a <code>Binding</code> object, describing the variable and method bindings at the point of call. This object …\n"],["binding","Proc","Proc.html#method-i-binding","()","<p>Returns the binding associated with <em>prc</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">fred</span>(<span class=\"ruby-identifier\">param</span>)\n  <span class=\"ruby-identifier\">proc</span> {}\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">b</span> = <span class=\"ruby-identifier\">fred</span>(<span class=\"ruby-value\">99</span>)\n<span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&quot;param&quot;</span>, <span class=\"ruby-identifier\">b</span>.<span class=\"ruby-identifier\">binding</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["binmode","ARGF","ARGF.html#method-i-binmode","()","<p>Puts ARGF into binary mode. Once a stream is in binary mode, it cannot be reset to non-binary mode.  …\n"],["binmode","IO","IO.html#method-i-binmode","()","<p>Sets the stream’s data mode as binary (see Data Mode).\n<p>A stream’s data mode may not be changed …\n"],["binmode?","ARGF","ARGF.html#method-i-binmode-3F","()","<p>Returns true if ARGF is being read in binary mode; false otherwise. To enable binary mode use ARGF.binmode …\n"],["binmode?","IO","IO.html#method-i-binmode-3F","()","<p>Returns <code>true</code> if the stream is on binary mode, <code>false</code> otherwise. See Data Mode.\n"],["binread","IO","IO.html#method-c-binread","(p1, p2 = v2, p3 = v3)","<p>Behaves like IO.read, except that the stream is opened in binary mode with ASCII-8BIT encoding.\n<p>When called …\n"],["binwrite","IO","IO.html#method-c-binwrite","(*args)","<p>Behaves like IO.write, except that the stream is opened in binary mode with ASCII-8BIT encoding.\n<p>When …\n"],["birthtime","File","File.html#method-c-birthtime","(p1)",""],["birthtime","File","File.html#method-i-birthtime","()","<p>Returns the birth time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">birthtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n<p>If the …\n"],["birthtime","File::Stat","File/Stat.html#method-i-birthtime","()","<p>Returns the birth time for <em>stat</em>.\n<p>If the platform doesn’t have birthtime, raises NotImplementedError …\n"],["blksize","File::Stat","File/Stat.html#method-i-blksize","()","<p>Returns the native file system’s block size. Will return <code>nil</code> on platforms that don’t support …\n"],["block","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-block","()","<p>Invoked by methods like Thread.join, and by Mutex, to signify that current Fiber is blocked until further …\n"],["block_given?","Kernel","Kernel.html#method-i-block_given-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in the current context. The <code>iterator?</code> form is mildly deprecated. …\n"],["blockdev?","File","File.html#method-c-blockdev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a block device, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">blockdev?</span>(<span class=\"ruby-string\">&#39;/dev/sda1&#39;</span>)       <span class=\"ruby-operator\">...</span>\n</pre>\n"],["blockdev?","File::Stat","File/Stat.html#method-i-blockdev-3F","()","<p>Returns <code>true</code> if the file is a block device, <code>false</code> if it isn’t or if the operating system doesn’t …\n"],["blockdev?","FileTest","FileTest.html#method-i-blockdev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a block device, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">blockdev?</span>(<span class=\"ruby-string\">&#39;/dev/sda1&#39;</span>)       <span class=\"ruby-operator\">...</span>\n</pre>\n"],["blocking?","Fiber","Fiber.html#method-i-blocking-3F","()","<p>Returns <code>true</code> if <code>fiber</code> is blocking and <code>false</code> otherwise. Fiber is non-blocking if it was created via passing …\n"],["blocking?","Fiber","Fiber.html#method-c-blocking-3F","()","<p>Returns <code>false</code> if the current fiber is non-blocking. Fiber is non-blocking if it was created via passing …\n"],["blocks","File::Stat","File/Stat.html#method-i-blocks","()","<p>Returns the number of native file system blocks allocated for this file, or <code>nil</code> if the operating system …\n"],["broadcast","Thread::ConditionVariable","Thread/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["bsearch","Array","Array.html#method-i-bsearch","()","<p>Returns an element from <code>self</code> selected by a binary search.\n<p>See Binary Searching.\n"],["bsearch","Range","Range.html#method-i-bsearch","()","<p>Returns an element from <code>self</code> selected by a binary search.\n<p>See Binary Searching.\n"],["bsearch_index","Array","Array.html#method-i-bsearch_index","()","<p>Searches <code>self</code> as described at method #bsearch, but returns the <em>index</em> of the found element instead of …\n"],["byteindex","String","String.html#method-i-byteindex","(p1, p2 = v2)","<p>Returns the Integer byte-based index of the first occurrence of the given <code>substring</code>, or <code>nil</code> if none found: …\n"],["byteoffset","MatchData","MatchData.html#method-i-byteoffset","(p1)","<p>Returns a two-element array containing the beginning and ending byte-based offsets of the <em>n</em>th match. …\n"],["byterindex","String","String.html#method-i-byterindex","(p1, p2 = v2)","<p>Returns the Integer byte-based index of the <em>last</em> occurrence of the given <code>substring</code>, or <code>nil</code> if none found: …\n"],["bytes","Random","Random.html#method-i-bytes","(p1)","<p>Returns a random binary string containing <code>size</code> bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">random_string</span> = <span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">bytes</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-comment\"># =&gt; &quot;\\xD7:R\\xAB?\\x83\\xCE\\xFAkO&quot; ...</span>\n</pre>\n"],["bytes","Random","Random.html#method-c-bytes","(p1)","<p>Returns a random binary string. The argument <code>size</code> specifies the length of the returned string.\n"],["bytes","String","String.html#method-i-bytes","()","<p>Returns an array of the bytes in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">bytes</span> <span class=\"ruby-comment\"># =&gt; [104, 101, 108, 108, 111]</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">bytes</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["bytesize","String","String.html#method-i-bytesize","()","<p>Returns the count of bytes (not characters) in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">bytesize</span>        <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">bytesize</span>     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["byteslice","String","String.html#method-i-byteslice","(*args)","<p>Returns a substring of <code>self</code>, or <code>nil</code> if the substring cannot be constructed.\n<p>With integer arguments <code>index</code> …\n"],["bytesplice","String","String.html#method-i-bytesplice","(*args)","<p>Replaces some or all of the content of <code>self</code> with <code>str</code>, and returns <code>str</code>. The portion of the string affected …\n"],["call","Continuation","Continuation.html#method-i-call","(*args)","<p>Invokes the continuation. The program continues from the end of the #callcc block. If no arguments are …\n"],["call","Method","Method.html#method-i-call","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the method’s return value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-string\">&quot;+&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["call","Proc","Proc.html#method-i-call","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["call_seq_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-call_seq_directive","()","<p>The <code>:call-seq:</code> directive overrides the actual calling sequence found in the Ruby code.\n<p>It can specify …\n"],["callcc","Kernel","Kernel.html#method-i-callcc","()","<p>Generates a Continuation object, which it passes to the associated block. You need to <code>require &#39;continuation&#39;</code> …\n"],["caller","Kernel","Kernel.html#method-i-caller","(*args)","<p>Returns the current execution stack—an array containing strings in the form <code>file:line</code> or <code>file:line:</code> …\n"],["caller_locations","Kernel","Kernel.html#method-i-caller_locations","(*args)","<p>Returns the current execution stack—an array containing backtrace location objects.\n<p>See Thread::Backtrace::Location …\n"],["capitalize","String","String.html#method-i-capitalize","(*args)","<p>Returns a string containing the characters in <code>self</code>; the first character is upcased; the remaining characters …\n"],["capitalize","Symbol","Symbol.html#method-i-capitalize","(*args)","<p>Equivalent to <code>sym.to_s.capitalize.to_sym</code>.\n<p>See String#capitalize.\n"],["capitalize!","String","String.html#method-i-capitalize-21","(*args)","<p>Upcases the first character in <code>self</code>; downcases the remaining characters; returns <code>self</code> if any changes …\n"],["captures","MatchData","MatchData.html#method-i-captures","()","<p>Returns the array of captures, which are all matches except <code>m[0]</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casecmp","String","String.html#method-i-casecmp","(p1)","<p>Compares <code>self.downcase</code> and <code>other_string.downcase</code>; returns:\n<p>-1 if <code>other_string.downcase</code> is larger.\n<p>0 if …\n"],["casecmp","Symbol","Symbol.html#method-i-casecmp","(p1)","<p>Like Symbol#<=>, but case-insensitive; equivalent to <code>self.to_s.casecmp(object.to_s)</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lower</span> = <span class=\"ruby-value\">:abc</span>\n<span class=\"ruby-identifier\">upper</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casecmp?","String","String.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other_string</code> are equal after Unicode case folding, otherwise <code>false</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">casecmp?</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casecmp?","Symbol","Symbol.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>object</code> are equal after Unicode case folding, otherwise <code>false</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lower</span> = <span class=\"ruby-value\">:abc</span>\n<span class=\"ruby-identifier\">upper</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["casefold?","Regexp","Regexp.html#method-i-casefold-3F","()","<p>Returns <code>true</code> if the case-insensitivity flag in <code>self</code> is set, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/a/</span>.<span class=\"ruby-identifier\">casefold?</span>           <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["catch","Kernel","Kernel.html#method-i-catch","(*args)","<p><code>catch</code> executes its block. If <code>throw</code> is not called, the block executes normally, and <code>catch</code> returns the …\n"],["cause","Exception","Exception.html#method-i-cause","()","<p>Returns the previous exception ($!) at the time this exception was raised. This is useful for wrapping …\n"],["cbrt","Math","Math.html#method-c-cbrt","(p1)","<p>Returns the cube root of <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["ceil","Float","Float.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits. …\n"],["ceil","Integer","Integer.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits. …\n"],["ceil","Numeric","Numeric.html#method-i-ceil","(*args)","<p>Returns the smallest number that is greater than or equal to <code>self</code> with a precision of <code>digits</code> decimal …\n"],["ceil","Rational","Rational.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>rat</code> with a precision of <code>ndigits</code> decimal digits (default: …\n"],["ceil","Time","Time.html#method-i-ceil","(*args)","<p>Returns a new Time object whose numerical value is greater than or equal to <code>self</code> with its seconds truncated …\n"],["center","String","String.html#method-i-center","(*args)","<p>Returns a centered copy of <code>self</code>.\n<p>If integer argument <code>size</code> is greater than the size (in characters) of …\n"],["chain","Enumerable","Enumerable.html#method-i-chain","(*args)","<p>Returns an enumerator object generated from this enumerator and given enumerables.\n\n<pre>e = (1..3).chain([4, ...</pre>\n"],["change_privilege","Process::GID","Process/GID.html#method-c-change_privilege","(p1)","<p>Change the current process’s real and effective group ID to that specified by <em>group</em>. Returns the …\n"],["change_privilege","Process::UID","Process/UID.html#method-c-change_privilege","(p1)","<p>Change the current process’s real and effective user ID to that specified by <em>user</em>. Returns the new …\n"],["chardev?","File","File.html#method-c-chardev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a character device, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">chardev?</span>(<span class=\"ruby-identifier\">$stdin</span>)     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["chardev?","File::Stat","File/Stat.html#method-i-chardev-3F","()","<p>Returns <code>true</code> if the file is a character device, <code>false</code> if it isn’t or if the operating system doesn’t …\n"],["chardev?","FileTest","FileTest.html#method-i-chardev-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a character device, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">chardev?</span>(<span class=\"ruby-identifier\">$stdin</span>)     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["chars","String","String.html#method-i-chars","()","<p>Returns an array of the characters in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">chars</span>     <span class=\"ruby-comment\"># =&gt; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">chars</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["chdir","Dir","Dir.html#method-c-chdir","(*args)","<p>Changes the current working directory of the process to the given string. When called without an argument, …\n"],["children","Dir","Dir.html#method-c-children","(*args)","<p>Returns an array containing all of the filenames except for “.” and “..” in the given …\n"],["children","Dir","Dir.html#method-i-children","()","<p>Returns an array containing all of the filenames except for “.” and “..” in this …\n"],["chmod","File","File.html#method-c-chmod","(*args)","<p>Changes permission bits on the named file(s) to the bit pattern represented by <em>mode_int</em>. Actual effects …\n"],["chmod","File","File.html#method-i-chmod","(p1)","<p>Changes permission bits on <em>file</em> to the bit pattern represented by <em>mode_int</em>. Actual effects are platform …\n"],["chomp","Kernel","Kernel.html#method-i-chomp","(*args)","<p>Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See String#chomp. Available only when -p/-n command line option …\n"],["chomp","String","String.html#method-i-chomp","(*args)","<p>Returns a new string copied from <code>self</code>, with trailing characters possibly removed:\n<p>When <code>line_sep</code> is <code>&quot;\\n&quot;</code> …\n"],["chomp!","String","String.html#method-i-chomp-21","(*args)","<p>Like String#chomp, but modifies <code>self</code> in place; returns <code>nil</code> if no modification made, <code>self</code> otherwise.\n"],["chop","Kernel","Kernel.html#method-i-chop","()","<p>Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code> is never returned. See String#chop!. Available only when -p/-n …\n"],["chop","String","String.html#method-i-chop","()","<p>Returns a new string copied from <code>self</code>, with trailing characters possibly removed.\n<p>Removes <code>&quot;\\r\\n&quot;</code> …\n"],["chop!","String","String.html#method-i-chop-21","()","<p>Like String#chop, but modifies <code>self</code> in place; returns <code>nil</code> if <code>self</code> is empty, <code>self</code> otherwise.\n<p>Related:  …\n"],["chown","File","File.html#method-c-chown","(*args)","<p>Changes the owner and group of the named file(s) to the given numeric owner and group id’s. Only …\n"],["chown","File","File.html#method-i-chown","(p1, p2)","<p>Changes the owner and group of <em>file</em> to the given numeric owner and group id’s. Only a process with …\n"],["chr","Integer","Integer.html#method-i-chr","(*args)","<p>Returns a 1-character string containing the character represented by the value of <code>self</code>, according to …\n"],["chr","String","String.html#method-i-chr","()","<p>Returns a string containing the first character of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">chr</span>     <span class=\"ruby-comment\"># =&gt; &quot;f&quot;</span>\n</pre>\n"],["chroot","Dir","Dir.html#method-c-chroot","(p1)","<p>Changes this process’s idea of the file system root. Only a privileged process may make this call. …\n"],["chunk","Enumerable","Enumerable.html#method-i-chunk","()","<p>Each element in the returned enumerator is a 2-element array consisting of:\n<p>A value returned by the block. …\n"],["chunk","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk","(*args)","<p>Like Enumerable#chunk, but chains operation to be lazy-evaluated.\n"],["chunk_while","Enumerable","Enumerable.html#method-i-chunk_while","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks are defined by the block.\n<p>This …\n"],["chunk_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk_while","(*args)","<p>Like Enumerable#chunk_while, but chains operation to be lazy-evaluated.\n"],["clamp","Comparable","Comparable.html#method-i-clamp","(p1, p2 = v2)","<p>In <code>(min, max)</code> form, returns <em>min</em> if <em>obj</em> <code>&lt;=&gt;</code> <em>min</em> is less than zero, <em>max</em> if <em>obj</em> <code>&lt;=&gt;</code> <em>max</em> is greater …\n"],["class_eval","Module","Module.html#method-i-class_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that when a block is given, constant/class …\n"],["class_exec","Module","Module.html#method-i-class_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method defined in the block will belong …\n"],["class_variable_defined?","Module","Module.html#method-i-class_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given class variable is defined in <em>obj</em>. String arguments are converted to symbols. …\n"],["class_variable_get","Module","Module.html#method-i-class_variable_get","(p1)","<p>Returns the value of the given class variable (or throws a NameError exception). The <code>@@</code> part of the variable …\n"],["class_variable_set","Module","Module.html#method-i-class_variable_set","(p1, p2)","<p>Sets the class variable named by <em>symbol</em> to the given object. If the class variable name is passed as …\n"],["class_variables","Module","Module.html#method-i-class_variables","(*args)","<p>Returns an array of the names of class variables in <em>mod</em>. This includes the names of class variables in …\n"],["clear","Array","Array.html#method-i-clear","()","<p>Removes all elements from <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">clear</span> <span class=\"ruby-comment\"># =&gt; []</span>\n</pre>\n"],["clear","ENV","ENV.html#method-c-clear","()","<p>Removes every environment variable; returns ENV:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["clear","GC::Profiler","GC/Profiler.html#method-c-clear","()","<p>Clears the GC profiler data.\n"],["clear","Hash","Hash.html#method-i-clear","()","<p>Removes all hash entries; returns <code>self</code>.\n"],["clear","IO::Buffer","IO/Buffer.html#method-i-clear","(*args)","<p>Fill buffer with <code>value</code>, starting with <code>offset</code> and going for <code>length</code> bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buffer</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">for</span>(<span class=\"ruby-string\">&#39;test&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clear","String","String.html#method-i-clear","()","<p>Removes the contents of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">clear</span>   <span class=\"ruby-comment\"># =&gt; &quot;&quot;</span>\n</pre>\n"],["clear","Thread::Queue","Thread/Queue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","Thread::SizedQueue","Thread/SizedQueue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clock_getres","Process","Process.html#method-c-clock_getres","(*args)","<p>Returns an estimate of the resolution of a <code>clock_id</code> using the POSIX <code>clock_getres()</code> function.\n<p>Note the …\n"],["clock_gettime","Process","Process.html#method-c-clock_gettime","(*args)","<p>Returns a time returned by POSIX clock_gettime() function.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">clock_gettime</span>(<span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CLOCK_MONOTONIC</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clone","ENV","ENV.html#method-c-clone","(p1 = {})","<p>Raises TypeError, because ENV is a wrapper for the process-wide environment variables and a clone is …\n"],["clone","Method","Method.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">A</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>\n    <span class=\"ruby-keyword\">return</span> <span class=\"ruby-string\">&quot;bar&quot;</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">A</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">call</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clone","Numeric","Numeric.html#method-i-clone","(*args)","<p>Returns <code>self</code>.\n<p>Raises an exception if the value for <code>freeze</code> is neither <code>true</code> nor <code>nil</code>.\n<p>Related: Numeric#dup …\n"],["clone","UnboundMethod","UnboundMethod.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">A</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>\n    <span class=\"ruby-keyword\">return</span> <span class=\"ruby-string\">&quot;bar&quot;</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">A</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">call</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close","ARGF","ARGF.html#method-i-close","()","<p>Closes the current file and skips to the next file in ARGV. If there are no more files to open, just …\n"],["close","Dir","Dir.html#method-i-close","()","<p>Closes the directory stream. Calling this method on closed Dir object is ignored since Ruby 2.3.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-close","()","<p>Called when the current thread exits. The scheduler is expected to implement this method in order to …\n"],["close","IO","IO.html#method-i-close","()","<p>Closes the stream, if it is open, after flushing any buffered writes to the operating system; does nothing …\n"],["close","Thread::Queue","Thread/Queue.html#method-i-close","()","<p>Closes the queue. A closed queue cannot be re-opened.\n<p>After the call to close completes, the following …\n"],["close","Thread::SizedQueue","Thread/SizedQueue.html#method-i-close","()","<p>Similar to Thread::Queue#close.\n<p>The difference is behavior with waiting enqueuing threads.\n<p>If there are …\n"],["close_on_exec=","IO","IO.html#method-i-close_on_exec-3D","(p1)","<p>Sets a close-on-exec flag.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close_on_exec</span> = <span class=\"ruby-keyword\">true</span>\n<span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;cat&quot;</span>, <span class=\"ruby-node\">&quot;/proc/self/fd/#{f.fileno}&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close_on_exec?","IO","IO.html#method-i-close_on_exec-3F","()","<p>Returns <code>true</code> if the stream will be closed on exec, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close_on_exec?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close_read","IO","IO.html#method-i-close_read","()","<p>Closes the read end of a duplexed stream (i.e., one that is both readable and writable, such as a pipe); …\n"],["close_write","IO","IO.html#method-i-close_write","()","<p>Closes the write end of a duplexed stream (i.e., one that is both readable and writable, such as a pipe); …\n"],["closed?","ARGF","ARGF.html#method-i-closed-3F","()","<p>Returns <em>true</em> if the current file has been closed; <em>false</em> otherwise. Use ARGF.close to actually close the …\n"],["closed?","IO","IO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the stream is closed for both reading and writing, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["closed?","Thread::Queue","Thread/Queue.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the queue is closed.\n"],["codepoints","String","String.html#method-i-codepoints","()","<p>Returns an array of the codepoints in <code>self</code>; each codepoint is the integer value for a character:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">codepoints</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["coerce","Float","Float.html#method-i-coerce","(p1)","<p>Returns a 2-element array containing <code>other</code> converted to a Float and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>                 <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["coerce","Integer","Integer.html#method-i-coerce","(p1)","<p>Returns an array with both a <code>numeric</code> and a <code>int</code> represented as Integer objects or Float objects.\n<p>This is …\n"],["coerce","Numeric","Numeric.html#method-i-coerce","(p1)","<p>Returns a 2-element array containing two numeric elements, formed from the two operands <code>self</code> and <code>other</code> …\n"],["collect","Array","Array.html#method-i-collect","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array whose elements are the return …\n"],["collect","Enumerable","Enumerable.html#method-i-collect","()","<p>Returns an array of objects returned by the block.\n<p>With a block given, calls the block with successive …\n"],["collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["collect!","Array","Array.html#method-i-collect-21","()","<p>Calls the block, if given, with each element; replaces the element with the block’s return value: …\n"],["collect_concat","Enumerable","Enumerable.html#method-i-collect_concat","()","<p>Returns an array of flattened objects returned by the block.\n<p>With a block given, calls the block with …\n"],["collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect_concat","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["column","Ripper","Ripper.html#method-i-column","()","<p>Return column number of current parsing line. This number starts from 0.\n"],["combination","Array","Array.html#method-i-combination","(p1)","<p>Calls the block, if given, with combinations of elements of <code>self</code>; returns <code>self</code>. The order of combinations …\n"],["compact","Array","Array.html#method-i-compact","()","<p>Returns a new Array containing all non-<code>nil</code> elements from <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-keyword\">nil</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">compact</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compact","Enumerable","Enumerable.html#method-i-compact","()","<p>Returns an array of all non-<code>nil</code> elements:\n\n<pre>a = [nil, 0, nil, &#39;a&#39;, false, nil, false, nil, &#39;a&#39;, nil, 0, ...</pre>\n"],["compact","Enumerator::Lazy","Enumerator/Lazy.html#method-i-compact","()","<p>Like Enumerable#compact, but chains operation to be lazy-evaluated.\n"],["compact","GC","GC.html#method-c-compact","()","<p>This function compacts objects together in Ruby’s heap.  It eliminates unused space (or fragmentation) …\n"],["compact","Hash","Hash.html#method-i-compact","()","<p>Returns a copy of <code>self</code> with all <code>nil</code>-valued entries removed:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">bat:</span> <span class=\"ruby-keyword\">nil</span>}\n<span class=\"ruby-identifier\">h1</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compact!","Array","Array.html#method-i-compact-21","()","<p>Removes all <code>nil</code> elements from <code>self</code>.\n<p>Returns <code>self</code> if any elements removed, otherwise <code>nil</code>.\n"],["compact!","Hash","Hash.html#method-i-compact-21","()","<p>Returns <code>self</code> with all its <code>nil</code>-valued entries removed (in place):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">bat:</span> <span class=\"ruby-keyword\">nil</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compare_by_identity","Hash","Hash.html#method-i-compare_by_identity","()","<p>Sets <code>self</code> to consider only identity in comparing keys; two keys are considered the same only if they …\n"],["compare_by_identity?","Hash","Hash.html#method-i-compare_by_identity-3F","()","<p>Returns <code>true</code> if #compare_by_identity has been called, <code>false</code> otherwise.\n"],["compatible?","Encoding","Encoding.html#method-c-compatible-3F","(p1, p2)","<p>Checks the compatibility of two objects.\n<p>If the objects are both strings they are compatible when they …\n"],["compile","Regexp","Regexp.html#method-c-compile","(*args)","<p>Alias for Regexp.new\n"],["compile","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an InstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["compile_file","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_file","(p1, *args, p3 = {})","<p>Takes <code>file</code>, a String with the location of a Ruby source file, reads, parses and compiles the file, and …\n"],["compile_option","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option","()","<p>Returns a hash of default options used by the Ruby iseq compiler.\n<p>For details, see InstructionSequence.compile_option= …\n"],["compile_option=","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option-3D","(p1)","<p>Sets the default values for various optimizations in the Ruby iseq compiler.\n<p>Possible values for <code>options</code> …\n"],["concat","Array","Array.html#method-i-concat","(*args)","<p>Adds to <code>array</code> all elements from each Array in <code>other_arrays</code>; returns <code>self</code>:\n\n<pre>a = [0, 1]\na.concat([2, 3], ...</pre>\n"],["concat","String","String.html#method-i-concat","(*args)","<p>Concatenates each object in <code>objects</code> to <code>self</code> and returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">concat</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;baz&#39;</span>) <span class=\"ruby-comment\"># =&gt; &quot;foobarbaz&quot; ...</span>\n</pre>\n"],["conj","Complex","Complex.html#method-i-conj","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conj","Numeric","Numeric.html#method-i-conj","()","<p>Returns self.\n"],["conjugate","Complex","Complex.html#method-i-conjugate","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conjugate","Numeric","Numeric.html#method-i-conjugate","()","<p>Returns self.\n"],["const_defined?","Module","Module.html#method-i-const_defined-3F","(*args)","<p>Says whether <em>mod</em> or its ancestors have a constant with the given name:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Float</span>.<span class=\"ruby-identifier\">const_defined?</span>(<span class=\"ruby-value\">:EPSILON</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["const_get","Module","Module.html#method-i-const_get","(*args)","<p>Checks for a constant with the given name in <em>mod</em>. If <code>inherit</code> is set, the lookup will also search the …\n"],["const_missing","Module","Module.html#method-i-const_missing","(p1)","<p>Invoked when a reference is made to an undefined constant in <em>mod</em>. It is passed a symbol for the undefined …\n"],["const_set","Module","Module.html#method-i-const_set","(p1, p2)","<p>Sets the named constant to the given object, returning that object. Creates a new constant if no constant …\n"],["const_source_location","Module","Module.html#method-i-const_source_location","(*args)","<p>Returns the Ruby source filename and line number containing the definition of the constant specified. …\n"],["constants","Module","Module.html#method-c-constants","(*args)","<p>In the first form, returns an array of the names of all constants accessible from the point of call. …\n"],["constants","Module","Module.html#method-i-constants","(*args)","<p>Returns an array of the names of the constants accessible in <em>mod</em>. This includes the names of constants …\n"],["convert","Encoding::Converter","Encoding/Converter.html#method-i-convert","(p1)","<p>Convert source_string and return destination_string.\n<p>source_string is assumed as a part of source. i.e. …\n"],["convpath","Encoding::Converter","Encoding/Converter.html#method-i-convpath","()","<p>Returns the conversion path of ec.\n<p>The result is an array of conversions.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["copy","IO::Buffer","IO/Buffer.html#method-i-copy","(*args)","<p>Efficiently copy data from a source IO::Buffer into the buffer, at <code>offset</code> using <code>memcpy</code>. For copying  …\n"],["copy_stream","IO","IO.html#method-c-copy_stream","(p1, p2, p3 = v3, p4 = v4)","<p>Copies from the given <code>src</code> to the given <code>dst</code>, returning the number of bytes copied.\n<p>The given <code>src</code> must be …\n"],["coredump?","Process::Status","Process/Status.html#method-i-coredump-3F","()","<p>Returns <code>true</code> if <em>stat</em> generated a coredump when it terminated. Not available on all platforms.\n"],["cos","Math","Math.html#method-c-cos","(p1)","<p>Returns the cosine of <code>x</code> in radians.\n<p>Domain: <code>(-INFINITY, INFINITY)</code>.\n<p>Range: <code>[-1.0, 1.0]</code>.\n"],["cosh","Math","Math.html#method-c-cosh","(p1)","<p>Returns the hyperbolic cosine of <code>x</code> in radians.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[1, INFINITY]</code>.\n"],["count","Array","Array.html#method-i-count","(*args)","<p>Returns a count of specified elements.\n<p>With no argument and no block, returns the count of all elements: …\n"],["count","Enumerable","Enumerable.html#method-i-count","(p1)","<p>Returns the count of elements, based on an argument or block criterion, if given.\n<p>With no argument and …\n"],["count","Range","Range.html#method-i-count","(*args)","<p>Returns the count of elements, based on an argument or block criterion, if given.\n<p>With no argument and …\n"],["count","String","String.html#method-i-count","(*args)","<p>Returns the total number of characters in <code>self</code> that are specified by the given <code>selectors</code> (see Multiple …\n"],["count_objects","ObjectSpace","ObjectSpace.html#method-c-count_objects","(*args)","<p>Counts all objects grouped by type.\n<p>It returns a hash, such as:\n\n<pre>{\n  :TOTAL=&gt;10000,\n  :FREE=&gt;3011,\n  :T_OBJECT=&gt;6, ...</pre>\n"],["cover?","Range","Range.html#method-i-cover-3F","(p1)","\n<pre>Returns +true+ if the given argument is within +self+, +false+ otherwise.\n\nWith non-range argument +object+, ...</pre>\n"],["crypt","String","String.html#method-i-crypt","(p1)","<p>Returns the string generated by calling <code>crypt(3)</code> standard library function with <code>str</code> and <code>salt_str</code>, in …\n"],["ctime","File","File.html#method-c-ctime","(p1)","<p>Returns the change time for the named file (the time at which directory information about the file was …\n"],["ctime","File","File.html#method-i-ctime","()","<p>Returns the change time for <em>file</em> (that is, the time directory information about the file was changed, …\n"],["ctime","File::Stat","File/Stat.html#method-i-ctime","()","<p>Returns the change time for <em>stat</em> (that is, the time directory information about the file was changed, …\n"],["ctime","Time","Time.html#method-i-ctime","()","<p>Returns a string representation of <code>self</code>, formatted by <code>strftime(&#39;%a %b %e %T %Y&#39;)</code> or its shorthand …\n"],["current","Fiber","Fiber.html#method-c-current","()","<p>Returns the current fiber. If you are not running in the context of a fiber this method will return the …\n"],["current","Thread","Thread.html#method-c-current","()","<p>Returns the currently executing thread.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401bdf4c run&gt;</span>\n</pre>\n"],["current_scheduler","Fiber","Fiber.html#method-c-current_scheduler","()","<p>Returns the Fiber scheduler, that was last set for the current thread with Fiber.set_scheduler if and …\n"],["curry","Method","Method.html#method-i-curry","(*args)","<p>Returns a curried proc based on the method. When the proc is called with a number of arguments that is …\n"],["curry","Proc","Proc.html#method-i-curry","(*args)","<p>Returns a curried proc. If the optional <em>arity</em> argument is given, it determines the number of arguments. …\n"],["cycle","Array","Array.html#method-i-cycle","(*args)","<p>When called with positive Integer argument <code>count</code> and a block, calls the block with each element, then …\n"],["cycle","Enumerable","Enumerable.html#method-i-cycle","(*args)","<p>When called with positive integer argument <code>n</code> and a block, calls the block with each element, then does …\n"],["daemon","Process","Process.html#method-c-daemon","(*args)","<p>Detach the process from controlling terminal and run in the background as system daemon.  Unless the …\n"],["day","Time","Time.html#method-i-day","()","<p>Returns the integer day of the month for <code>self</code>, in range (1..31):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["debug_output","Ripper","Ripper.html#method-i-debug_output","()","<p>Get debug output.\n"],["debug_output=","Ripper","Ripper.html#method-i-debug_output-3D","(p1)","<p>Set debug output.\n"],["deconstruct","Array","Array.html#method-i-deconstruct","()",""],["deconstruct","Data","Data.html#method-i-deconstruct","()","<p>Returns the values in <code>self</code> as an array, to use in pattern matching:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Measure</span> = <span class=\"ruby-constant\">Data</span>.<span class=\"ruby-identifier\">define</span>(<span class=\"ruby-value\">:amount</span>, <span class=\"ruby-value\">:unit</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deconstruct","Struct","Struct.html#method-i-deconstruct","()","<p>Returns the values in <code>self</code> as an array:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["deconstruct_keys","Data","Data.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the name/value pairs, to use in pattern matching.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Measure</span> = <span class=\"ruby-constant\">Data</span>.<span class=\"ruby-identifier\">define</span>(<span class=\"ruby-value\">:amount</span>, <span class=\"ruby-value\">:unit</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deconstruct_keys","Hash","Hash.html#method-i-deconstruct_keys","(p1)",""],["deconstruct_keys","Struct","Struct.html#method-i-deconstruct_keys","(p1)","<p>Returns a hash of the name/value pairs for the given member names.\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["dedent_string","Ripper","Ripper.html#method-c-dedent_string","(p1, p2)","<p>USE OF RIPPER LIBRARY ONLY.\n<p>Strips up to <code>width</code> leading whitespaces from <code>input</code>, and returns the stripped …\n"],["dedup","String","String.html#method-i-dedup","()","<p>Returns a frozen, possibly pre-existing copy of the string.\n<p>The returned String will be deduplicated as …\n"],["default","Hash","Hash.html#method-i-default","(*args)","<p>Returns the default value for the given <code>key</code>. The returned value will be determined either by the default …\n"],["default=","Hash","Hash.html#method-i-default-3D","(p1)","<p>Sets the default value to <code>value</code>; returns <code>value</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default</span> = <span class=\"ruby-keyword\">false</span> <span class=\"ruby-comment\"># =&gt; false ...</span>\n</pre>\n"],["default_external","Encoding","Encoding.html#method-c-default_external","()","<p>Returns default external encoding.\n<p>The default external encoding is used by default for strings created …\n"],["default_external=","Encoding","Encoding.html#method-c-default_external-3D","(p1)","<p>Sets default external encoding.  You should not set Encoding::default_external in ruby code as strings …\n"],["default_internal","Encoding","Encoding.html#method-c-default_internal","()","<p>Returns default internal encoding.  Strings will be transcoded to the default internal encoding in the …\n"],["default_internal=","Encoding","Encoding.html#method-c-default_internal-3D","(p1)","<p>Sets default internal encoding or removes default internal encoding when passed nil.  You should not …\n"],["default_proc","Hash","Hash.html#method-i-default_proc","()","<p>Returns the default proc for <code>self</code> (see Default Values):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_proc=","Hash","Hash.html#method-i-default_proc-3D","(p1)","<p>Sets the default proc for <code>self</code> to <code>proc</code>: (see Default Values):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">default_proc</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["define","Data","Data.html#method-c-define","(*args)","<p>Defines a new Data class. If the first argument is a string, the class is stored in <code>Data::&lt;name&gt;</code> …\n"],["define_finalizer","ObjectSpace","ObjectSpace.html#method-c-define_finalizer","(p1, p2 = v2)","<p>Adds <em>aProc</em> as a finalizer, to be called after <em>obj</em> was destroyed. The object ID of the <em>obj</em> will be passed …\n"],["define_method","Module","Module.html#method-i-define_method","(*args)","<p>Defines an instance method in the receiver. The <em>method</em> parameter can be a <code>Proc</code>, a <code>Method</code> or an <code>UnboundMethod</code> …\n"],["define_singleton_method","Object","Object.html#method-i-define_singleton_method","(*args)","<p>Defines a public singleton method in the receiver. The <em>method</em> parameter can be a <code>Proc</code>, a <code>Method</code> or an …\n"],["delete","Array","Array.html#method-i-delete","(p1)","<p>Removes zero or more elements from <code>self</code>.\n<p>When no block is given, removes from <code>self</code> each element <code>ele</code> such …\n"],["delete","Dir","Dir.html#method-c-delete","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.\n"],["delete","ENV","ENV.html#method-c-delete","(p1)","<p>Deletes the environment variable with <code>name</code> if it exists and returns its value:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">delete</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delete","File","File.html#method-c-delete","(*args)","<p>Deletes the named files, returning the number of names passed as arguments. Raises an exception on any …\n"],["delete","Hash","Hash.html#method-i-delete","(p1)","<p>Deletes the entry for the given <code>key</code> and returns its associated value.\n<p>If no block is given and <code>key</code> is …\n"],["delete","String","String.html#method-i-delete","(*args)","<p>Returns a copy of <code>self</code> with characters specified by <code>selectors</code> removed (see Multiple Character Selectors …\n"],["delete!","String","String.html#method-i-delete-21","(*args)","<p>Like String#delete, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise. …\n"],["delete_at","Array","Array.html#method-i-delete_at","(p1)","<p>Deletes an element from <code>self</code>, per the given Integer <code>index</code>.\n<p>When <code>index</code> is non-negative, deletes the element …\n"],["delete_if","Array","Array.html#method-i-delete_if","()","\n<pre>Removes each element in +self+ for which the block returns a truthy value;\nreturns +self+:\n\n  a = [:foo, ...</pre>\n"],["delete_if","ENV","ENV.html#method-c-delete_if","()","<p>Yields each environment variable name and its value as a 2-element Array, deleting each environment variable …\n"],["delete_if","Hash","Hash.html#method-i-delete_if","()","<p>If a block given, calls the block with each key-value pair; deletes each entry for which the block returns …\n"],["delete_prefix","String","String.html#method-i-delete_prefix","(p1)","<p>Returns a copy of <code>self</code> with leading substring <code>prefix</code> removed:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">delete_prefix</span>(<span class=\"ruby-string\">&#39;hel&#39;</span>)      <span class=\"ruby-comment\"># =&gt; &quot;lo&quot; ...</span>\n</pre>\n"],["delete_prefix!","String","String.html#method-i-delete_prefix-21","(p1)","<p>Like String#delete_prefix, except that <code>self</code> is modified in place. Returns <code>self</code> if the prefix is removed, …\n"],["delete_suffix","String","String.html#method-i-delete_suffix","(p1)","<p>Returns a copy of <code>self</code> with trailing substring <code>suffix</code> removed:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">delete_suffix</span>(<span class=\"ruby-string\">&#39;llo&#39;</span>)      <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["delete_suffix!","String","String.html#method-i-delete_suffix-21","(p1)","<p>Like String#delete_suffix, except that <code>self</code> is modified in place. Returns <code>self</code> if the suffix is removed, …\n"],["denominator","Complex","Complex.html#method-i-denominator","()","<p>Returns the denominator (lcm of both denominator - real and imag).\n<p>See numerator.\n"],["denominator","Float","Float.html#method-i-denominator","()","<p>Returns the denominator (always positive).  The result is machine dependent.\n<p>See also Float#numerator …\n"],["denominator","Integer","Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Numeric","Numeric.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n"],["denominator","Rational","Rational.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">denominator</span>             <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">7</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">denominator</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deprecate_constant","Module","Module.html#method-i-deprecate_constant","(*args)","<p>Makes a list of existing constants deprecated. Attempt to refer to them will produce a warning.\n\n<pre>module ...</pre>\n"],["destination_encoding","Encoding::Converter","Encoding/Converter.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an Encoding object.\n"],["destination_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destination_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["detach","Process","Process.html#method-c-detach","(p1)","<p>Some operating systems retain the status of terminated child processes until the parent collects that …\n"],["detailed_message","Exception","Exception.html#method-i-detailed_message","(p1 = {})","<p>Processes a string returned by #message.\n<p>It may add the class name of the exception to the end of the …\n"],["detect","Enumerable","Enumerable.html#method-i-detect","(*args)","<p>Returns the first element for which the block returns a truthy value.\n<p>With a block given, calls the block …\n"],["dev","File::Stat","File/Stat.html#method-i-dev","()","<p>Returns an integer representing the device on which <em>stat</em> resides.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">dev</span>   <span class=\"ruby-comment\">#=&gt; 774</span>\n</pre>\n"],["dev_major","File::Stat","File/Stat.html#method-i-dev_major","()","<p>Returns the major part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">dev_major</span>   <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">dev_major</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dev_minor","File::Stat","File/Stat.html#method-i-dev_minor","()","<p>Returns the minor part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">dev_minor</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">dev_minor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["difference","Array","Array.html#method-i-difference","(*args)","<p>Returns a new Array containing only those elements from <code>self</code> that are not found in any of the Arrays …\n"],["dig","Array","Array.html#method-i-dig","(*args)","<p>Finds and returns the object in nested objects that is specified by <code>index</code> and <code>identifiers</code>. The nested …\n"],["dig","Hash","Hash.html#method-i-dig","(*args)","<p>Finds and returns the object in nested objects that is specified by <code>key</code> and <code>identifiers</code>. The nested objects …\n"],["dig","Struct","Struct.html#method-i-dig","(*args)","<p>Finds and returns an object among nested objects. The nested objects may be instances of various classes. …\n"],["digits","Integer","Integer.html#method-i-digits","(*args)","<p>Returns an array of integers representing the <code>base</code>-radix digits of <code>self</code>; the first element of the array …\n"],["directory?","File","File.html#method-c-directory-3F","(p1)","<p>With string <code>object</code> given, returns <code>true</code> if <code>path</code> is a string path leading to a directory, or to a symbolic …\n"],["directory?","File::Stat","File/Stat.html#method-i-directory-3F","()","<p>With string <code>object</code> given, returns <code>true</code> if <code>path</code> is a string path leading to a directory, or to a symbolic …\n"],["directory?","FileTest","FileTest.html#method-i-directory-3F","(p1)","<p>With string <code>object</code> given, returns <code>true</code> if <code>path</code> is a string path leading to a directory, or to a symbolic …\n"],["dirname","File","File.html#method-c-dirname","(*args)","<p>Returns all components of the filename given in <em>file_name</em> except the last one (after first stripping …\n"],["disable","GC::Profiler","GC/Profiler.html#method-c-disable","()","<p>Stops the GC profiler.\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disasm","()","<p>Returns the instruction sequence as a <code>String</code> in human readable form.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disasm","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with the human readable instructions for <code>body</code> …\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disassemble","()","<p>Returns the instruction sequence as a <code>String</code> in human readable form.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disassemble","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with the human readable instructions for <code>body</code> …\n"],["display","Object","Object.html#method-i-display","(*args)","<p>Writes <code>self</code> on the given port:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">display</span>\n<span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">display</span>\n[ <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span> ].<span class=\"ruby-identifier\">display</span>\n<span class=\"ruby-identifier\">puts</span>\n</pre>\n<p>Output:\n"],["div","Integer","Integer.html#method-i-div","(p1)","<p>Performs integer division; returns the integer result of dividing <code>self</code> by <code>numeric</code>:\n\n<pre class=\"ruby\">  <span class=\"ruby-value\">4</span>.<span class=\"ruby-identifier\">div</span>(<span class=\"ruby-value\">3</span>)      <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["div","Numeric","Numeric.html#method-i-div","(p1)","<p>Returns the quotient <code>self/other</code> as an integer (via <code>floor</code>), using method <code>/</code> in the derived class of <code>self</code> …\n"],["divmod","Float","Float.html#method-i-divmod","(p1)","<p>Returns a 2-element array <code>[q, r]</code>, where\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">q</span> = (<span class=\"ruby-keyword\">self</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">other</span>).<span class=\"ruby-identifier\">floor</span>      <span class=\"ruby-comment\"># Quotient</span>\n<span class=\"ruby-identifier\">r</span> = <span class=\"ruby-keyword\">self</span> <span class=\"ruby-operator\">%</span> <span class=\"ruby-identifier\">other</span>       <span class=\"ruby-operator\">...</span>\n</pre>\n"],["divmod","Integer","Integer.html#method-i-divmod","(p1)","<p>Returns a 2-element array <code>[q, r]</code>, where\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">q</span> = (<span class=\"ruby-keyword\">self</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">other</span>).<span class=\"ruby-identifier\">floor</span>    <span class=\"ruby-comment\"># Quotient</span>\n<span class=\"ruby-identifier\">r</span> = <span class=\"ruby-keyword\">self</span> <span class=\"ruby-operator\">%</span> <span class=\"ruby-identifier\">other</span>         <span class=\"ruby-operator\">...</span>\n</pre>\n"],["divmod","Numeric","Numeric.html#method-i-divmod","(p1)","<p>Returns a 2-element array <code>[q, r]</code>, where\n\n<pre>q = (self/other).floor                  # Quotient\nr = self % ...</pre>\n"],["downcase","String","String.html#method-i-downcase","(*args)","<p>Returns a string containing the downcased characters in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;Hello World!&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">downcase</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["downcase","Symbol","Symbol.html#method-i-downcase","(*args)","<p>Equivalent to <code>sym.to_s.downcase.to_sym</code>.\n<p>See String#downcase.\n<p>Related: Symbol#upcase.\n"],["downcase!","String","String.html#method-i-downcase-21","(*args)","<p>Downcases the characters in <code>self</code>; returns <code>self</code> if any changes were made, <code>nil</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["downto","Integer","Integer.html#method-i-downto","(p1)","<p>Calls the given block with each integer value from <code>self</code> down to <code>limit</code>; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n<span class=\"ruby-value\">10</span>.<span class=\"ruby-identifier\">downto</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["drop","Array","Array.html#method-i-drop","(p1)","<p>Returns a new Array containing all but the first <code>n</code> element of <code>self</code>, where <code>n</code> is a non-negative Integer …\n"],["drop","Enumerable","Enumerable.html#method-i-drop","(p1)","<p>For positive integer <code>n</code>, returns an array containing all but the first <code>n</code> elements:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = (<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>)\n<span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">drop</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop","(p1)","<p>Like Enumerable#drop, but chains operation to be lazy-evaluated.\n"],["drop_while","Array","Array.html#method-i-drop_while","()","<p>Returns a new Array containing zero or more trailing elements of <code>self</code>; does not modify <code>self</code>.\n<p>With a block …\n"],["drop_while","Enumerable","Enumerable.html#method-i-drop_while","()","<p>Calls the block with successive elements as long as the block returns a truthy value; returns an array …\n"],["drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop_while","()","<p>Like Enumerable#drop_while, but chains operation to be lazy-evaluated.\n"],["dst?","Time","Time.html#method-i-dst-3F","()","<p>Returns <code>true</code> if <code>self</code> is in daylight saving time, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 ...</span>\n</pre>\n"],["dummy?","Encoding","Encoding.html#method-i-dummy-3F","()","<p>Returns true for dummy encodings. A dummy encoding is an encoding for which character handling is not …\n"],["dummy_instance_alias","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-dummy_instance_alias","(foo, bar)",""],["dummy_instance_method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-dummy_instance_method","(foo, bar)",""],["dummy_singleton_method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-c-dummy_singleton_method","(foo, bar)",""],["dump","Marshal","Marshal.html#method-c-dump","(p1, p2 = v2, p3 = v3)","<p>Serializes obj and all descendant objects. If anIO is specified, the serialized data will be written …\n"],["dump","String","String.html#method-i-dump","()","<p>Returns a printable version of <code>self</code>, enclosed in double-quotes, with special characters escaped, and …\n"],["dup","ENV","ENV.html#method-c-dup","()","<p>Raises TypeError, because ENV is a singleton object. Use #to_h to get a copy of ENV data as a hash.\n"],["dup","Numeric","Numeric.html#method-i-dup","()","<p>Returns <code>self</code>.\n<p>Related: Numeric#clone.\n"],["dup","Object","Object.html#method-i-dup","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of <em>obj</em> are copied, but not the objects they reference. …\n"],["each","ARGF","ARGF.html#method-i-each","(*args)","<p>Returns an enumerator which iterates over each line (separated by <em>sep</em>, which defaults to your platform’s …\n"],["each","Array","Array.html#method-i-each","()","<p>Iterates over array elements.\n<p>When a block given, passes each successive array element to the block; returns …\n"],["each","Dir","Dir.html#method-i-each","()","<p>Calls the block once for each entry in this directory, passing the filename of each entry as a parameter …\n"],["each","ENV","ENV.html#method-c-each","()","<p>Yields each environment variable name and its value as a 2-element Array:\n\n<pre>h = {}\nENV.each_pair { |name, ...</pre>\n"],["each","Enumerator","Enumerator.html#method-i-each","(*args)","<p>Iterates over the block according to how this Enumerator was constructed. If no block and no arguments …\n"],["each","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-each","()",""],["each","Enumerator::Chain","Enumerator/Chain.html#method-i-each","(*args)","<p>Iterates over the elements of the first enumerable by calling the “each” method on it with …\n"],["each","Enumerator::Product","Enumerator/Product.html#method-i-each","()","<p>Iterates over the elements of the first enumerable by calling the “each_entry” method on it …\n"],["each","Hash","Hash.html#method-i-each","()","<p>Hash#each is an alias for Hash#each_pair.\n<p>Calls the given block with each key-value pair; returns <code>self</code> …\n"],["each","IO","IO.html#method-i-each","(*args)","<p>Calls the block with each remaining line read from the stream (see Lines); does nothing if already at …\n"],["each","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each","Range","Range.html#method-i-each","()","<p>With a block given, passes each element of <code>self</code> to the block:\n\n<pre>a = []\n(1..4).each {|element| a.push(element) ...</pre>\n"],["each","Struct","Struct.html#method-i-each","()","<p>Calls the given block with the value of each member; returns <code>self</code>:\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["each_builtin","RubyVM","RubyVM.html#method-c-each_builtin","()",""],["each_byte","ARGF","ARGF.html#method-i-each_byte","()","<p>Iterates over each byte of each file in <code>ARGV</code>. A byte is returned as an Integer in the range 0..255.\n<p>This …\n"],["each_byte","IO","IO.html#method-i-each_byte","()","<p>Calls the given block with each byte (0..255) in the stream; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.rus&#39;</span>)\n<span class=\"ruby-identifier\">a</span> = [] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_byte","String","String.html#method-i-each_byte","()","<p>Calls the given block with each successive byte from <code>self</code>; returns <code>self</code>:\n\n<pre>&#39;hello&#39;.each_byte {|byte| print ...</pre>\n"],["each_caller_location","Thread","Thread.html#method-c-each_caller_location","()","<p>Yields each frame of the current execution stack as a backtrace location object.\n"],["each_char","ARGF","ARGF.html#method-i-each_char","()","<p>Iterates over each character of each file in ARGF.\n<p>This method allows you to treat the files supplied …\n"],["each_char","IO","IO.html#method-i-each_char","()","<p>Calls the given block with each character in the stream; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.rus&#39;</span>)\n<span class=\"ruby-identifier\">a</span> = []\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">each_char</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_char","String","String.html#method-i-each_char","()","<p>Calls the given block with each successive character from <code>self</code>; returns <code>self</code>:\n\n<pre>&#39;hello&#39;.each_char {|char| ...</pre>\n"],["each_child","Dir","Dir.html#method-c-each_child","(*args)","<p>Calls the block once for each entry except for “.” and “..” in the named directory, …\n"],["each_child","Dir","Dir.html#method-i-each_child","()","<p>Calls the block once for each entry except for “.” and “..” in this directory, passing …\n"],["each_child","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-each_child","()","<p>Iterate all direct child instruction sequences. Iteration order is implementation/version defined so …\n"],["each_codepoint","ARGF","ARGF.html#method-i-each_codepoint","()","<p>Iterates over each codepoint of each file in ARGF.\n<p>This method allows you to treat the files supplied …\n"],["each_codepoint","IO","IO.html#method-i-each_codepoint","()","<p>Calls the given block with each codepoint in the stream; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.rus&#39;</span>)\n<span class=\"ruby-identifier\">a</span> = []\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">each_codepoint</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_codepoint","String","String.html#method-i-each_codepoint","()","<p>Calls the given block with each successive codepoint from <code>self</code>; each codepoint is the integer value for …\n"],["each_cons","Enumerable","Enumerable.html#method-i-each_cons","(p1)","<p>Calls the block with each successive overlapped <code>n</code>-tuple of elements; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">each_cons</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_entry","Enumerable","Enumerable.html#method-i-each_entry","(*args)","<p>Calls the given block with each element, converting multiple values from yield to an array; returns  …\n"],["each_grapheme_cluster","String","String.html#method-i-each_grapheme_cluster","()","<p>Calls the given block with each successive grapheme cluster from <code>self</code> (see Unicode Grapheme Cluster Boundaries …\n"],["each_index","Array","Array.html#method-i-each_index","()","<p>Iterates over array indexes.\n<p>When a block given, passes each successive array index to the block; returns …\n"],["each_key","ENV","ENV.html#method-c-each_key","()","<p>Yields each environment variable name:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>) <span class=\"ruby-comment\"># =&gt; ENV</span>\n<span class=\"ruby-identifier\">names</span> = []\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">each_key</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_key","Hash","Hash.html#method-i-each_key","()","<p>Calls the given block with each key; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.each_key {|key| puts ...</pre>\n"],["each_key","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_key","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_line","ARGF","ARGF.html#method-i-each_line","(*args)","<p>Returns an enumerator which iterates over each line (separated by <em>sep</em>, which defaults to your platform’s …\n"],["each_line","IO","IO.html#method-i-each_line","(*args)","<p>Calls the block with each remaining line read from the stream (see Lines); does nothing if already at …\n"],["each_line","String","String.html#method-i-each_line","(*args)","<p>With a block given, forms the substrings (“lines”) that are the result of splitting <code>self</code> at …\n"],["each_object","ObjectSpace","ObjectSpace.html#method-c-each_object","(*args)","<p>Calls the block once for each living, nonimmediate object in this Ruby process. If <em>module</em> is specified, …\n"],["each_pair","ENV","ENV.html#method-c-each_pair","()","<p>Yields each environment variable name and its value as a 2-element Array:\n\n<pre>h = {}\nENV.each_pair { |name, ...</pre>\n"],["each_pair","Hash","Hash.html#method-i-each_pair","()","<p>Hash#each is an alias for Hash#each_pair.\n<p>Calls the given block with each key-value pair; returns <code>self</code> …\n"],["each_pair","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_pair","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_pair","Struct","Struct.html#method-i-each_pair","()","<p>Calls the given block with each member name/value pair; returns <code>self</code>:\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["each_slice","Enumerable","Enumerable.html#method-i-each_slice","(p1)","<p>Calls the block with each successive disjoint <code>n</code>-tuple of elements; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">each_slice</span>(<span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_value","ENV","ENV.html#method-c-each_value","()","<p>Yields each environment variable value:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>) <span class=\"ruby-comment\"># =&gt; ENV</span>\n<span class=\"ruby-identifier\">values</span> = []\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">each_value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_value","Hash","Hash.html#method-i-each_value","()","<p>Calls the given block with each value; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.each_value {|value| ...</pre>\n"],["each_value","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_value","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_with_index","Enumerable","Enumerable.html#method-i-each_with_index","(*args)","<p>With a block given, calls the block with each element and its index; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {}\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">each_with_index</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_with_index","Enumerator","Enumerator.html#method-i-each_with_index","()","<p>Same as Enumerator#with_index(0), i.e. there is no starting offset.\n<p>If no block is given, a new Enumerator …\n"],["each_with_object","Enumerable","Enumerable.html#method-i-each_with_object","(p1)","<p>Calls the block once for each element, passing both the element and the given object:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">each_with_object</span>([]) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each_with_object","Enumerator","Enumerator.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object, <code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["eager","Enumerator::Lazy","Enumerator/Lazy.html#method-i-eager","()","<p>Returns a non-lazy Enumerator converted from the lazy enumerator.\n"],["egid","Process","Process.html#method-c-egid","()","<p>Returns the effective group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["egid=","Process","Process.html#method-c-egid-3D","(p1)","<p>Sets the effective group ID for this process. Not available on all platforms.\n"],["eid","Process::GID","Process/GID.html#method-c-eid","()","<p>Returns the effective group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["eid","Process::UID","Process/UID.html#method-c-eid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["empty?","Array","Array.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the count of elements in <code>self</code> is zero, <code>false</code> otherwise.\n"],["empty?","Dir","Dir.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file is an empty directory, <code>false</code> if it is not a directory or non-empty.\n"],["empty?","ENV","ENV.html#method-c-empty-3F","()","<p>Returns <code>true</code> when there are no environment variables, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">clear</span>\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">empty?</span> <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["empty?","File","File.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","FileTest","FileTest.html#method-i-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","Hash","Hash.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no hash entries, <code>false</code> otherwise:\n\n<pre>{}.empty? # =&gt; true\n{foo: 0, bar: 1, baz: ...</pre>\n"],["empty?","IO::Buffer","IO/Buffer.html#method-i-empty-3F","()","<p>If the buffer has 0 size: it is created by ::new with size 0, or with ::for from an empty string. (Note …\n"],["empty?","String","String.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the length of <code>self</code> is zero, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">empty?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-string\">&quot; &quot;</span>.<span class=\"ruby-identifier\">empty?</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["empty?","Symbol","Symbol.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <code>self</code> is <code>:&#39;&#39;</code>, <code>false</code> otherwise.\n"],["empty?","Thread::Queue","Thread/Queue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","Thread::SizedQueue","Thread/SizedQueue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["enable","GC::Profiler","GC/Profiler.html#method-c-enable","()","<p>Starts the GC profiler.\n"],["enabled?","GC::Profiler","GC/Profiler.html#method-c-enabled-3F","()","<p>The current status of GC profile mode.\n"],["enclose","ThreadGroup","ThreadGroup.html#method-i-enclose","()","<p>Prevents threads from being added to or removed from the receiving ThreadGroup.\n<p>New threads can still …\n"],["enclosed?","ThreadGroup","ThreadGroup.html#method-i-enclosed-3F","()","<p>Returns <code>true</code> if the <code>thgrp</code> is enclosed. See also ThreadGroup#enclose.\n"],["encode","String","String.html#method-i-encode","(dst_encoding = Encoding.default_internal, **enc_opts)","<p>Returns a copy of <code>self</code> transcoded as determined by <code>dst_encoding</code>. By default, raises an exception if  …\n"],["encode!","String","String.html#method-i-encode-21","(*args)","<p>Like #encode, but applies encoding changes to <code>self</code>; returns <code>self</code>.\n"],["encoding","Regexp","Regexp.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Ripper","Ripper.html#method-i-encoding","()","<p>Return encoding of the source.\n"],["encoding","String","String.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Symbol","Symbol.html#method-i-encoding","()","<p>Equivalent to <code>self.to_s.encoding</code>; see String#encoding.\n"],["end","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-end","()",""],["end","MatchData","MatchData.html#method-i-end","(p1)","<p>Returns the offset (in characters) of the end of the specified match.\n<p>When non-negative integer argument …\n"],["end","Range","Range.html#method-i-end","()","<p>Returns the object that defines the end of <code>self</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">end</span>  <span class=\"ruby-comment\"># =&gt; 4</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">end</span> <span class=\"ruby-comment\"># =&gt; 4</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span>).<span class=\"ruby-identifier\">end</span>   <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["end_seen?","Ripper","Ripper.html#method-i-end_seen-3F","()","<p>Return true if parsed source ended by +_<em>END</em>_+.\n"],["end_with?","String","String.html#method-i-end_with-3F","(*args)","<p>Returns whether <code>self</code> ends with any of the given <code>strings</code>.\n<p>Returns <code>true</code> if any given string matches the …\n"],["end_with?","Symbol","Symbol.html#method-i-end_with-3F","(*args)","<p>Equivalent to <code>self.to_s.end_with?</code>; see String#end_with?.\n"],["enq","Thread::Queue","Thread/Queue.html#method-i-enq","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["entries","Dir","Dir.html#method-c-entries","(*args)","<p>Returns an array containing all of the filenames in the given directory. Will raise a SystemCallError …\n"],["entries","Enumerable","Enumerable.html#method-i-entries","(*args)","<p>Returns an array containing the items in <code>self</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">0</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [0, 1, 2, 3, 4]</span>\n</pre>\n<p>Enumerable#entries is an …\n"],["entries","Range","Range.html#method-i-entries","()","<p>Returns an array containing the elements in <code>self</code>, if a finite collection; raises an exception otherwise. …\n"],["enum_for","Enumerator::Lazy","Enumerator/Lazy.html#method-i-enum_for","(*args)","<p>Similar to Object#to_enum, except it returns a lazy enumerator. This makes it easy to define Enumerable …\n"],["enum_for","Object","Object.html#method-i-enum_for","(*args)","<p>Creates a new Enumerator which will enumerate by calling <code>method</code> on <code>obj</code>, passing <code>args</code> if any. What was …\n"],["eof","ARGF","ARGF.html#method-i-eof","()","<p>Returns true if the current file in ARGF is at end of file, i.e. it has no data to read. The stream must …\n"],["eof","IO","IO.html#method-i-eof","()","<p>Returns <code>true</code> if the stream is positioned at its end, <code>false</code> otherwise; see Position:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eof?","ARGF","ARGF.html#method-i-eof-3F","()","<p>Returns true if the current file in ARGF is at end of file, i.e. it has no data to read. The stream must …\n"],["eof?","IO","IO.html#method-i-eof-3F","()","<p>Returns <code>true</code> if the stream is positioned at its end, <code>false</code> otherwise; see Position:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eql?","Array","Array.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other_array</code> are the same size, and if, for each index <code>i</code> in <code>self</code>, <code>self[i].eql?</code> …\n"],["eql?","Data","Data.html#method-i-eql-3F","(p1)","<p>Equality check that is used when two items of data are keys of a Hash.\n<p>The subtle difference with #== …\n"],["eql?","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an Enumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["eql?","Float","Float.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>other</code> is a Float with the same value as <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">eql?</span>(<span class=\"ruby-value\">2.0</span>)          <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eql?","Hash","Hash.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if all of the following are true:\n<p><code>object</code> is a Hash object.\n<p><code>hash</code> and <code>object</code> have the same keys …\n"],["eql?","MatchData","MatchData.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is another MatchData object whose target string, regexp, match, and captures are …\n"],["eql?","Method","Method.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer to the same method definition …\n"],["eql?","Numeric","Numeric.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other</code> are the same type and have equal values.\n<p>Of the Core and Standard Library …\n"],["eql?","Object","Object.html#method-i-eql-3F","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["eql?","Proc","Proc.html#method-i-eql-3F","(p1)","<p>Two procs are the same if, and only if, they were created from the same code block.\n\n<pre>def return_block(&amp;block) ...</pre>\n"],["eql?","Range","Range.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if and only if:\n<p><code>other</code> is a range.\n<p><code>other.begin eql? self.begin</code>.\n"],["eql?","Regexp","Regexp.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is another Regexp whose pattern, flags, and encoding are the same as <code>self</code>, <code>false</code> …\n"],["eql?","String","String.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> has the same length and content; as <code>self</code>; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">eql?</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eql?","Struct","Struct.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if and only if the following are true; otherwise returns <code>false</code>:\n<p><code>other.class == self.class</code> …\n"],["eql?","Time","Time.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other_time</code> are both Time objects with the exact same time value.\n"],["eql?","UnboundMethod","UnboundMethod.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer to the same method definition …\n"],["equal?","BasicObject","BasicObject.html#method-i-equal-3F","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if <code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["equal?","Ractor::MovedObject","Ractor/MovedObject.html#method-i-equal-3F","(*args)",""],["erf","Math","Math.html#method-c-erf","(p1)","<p>Returns the value of the Gauss error function for <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-1, 1]</code>.\n"],["erfc","Math","Math.html#method-c-erfc","(p1)","<p>Returns the value of the complementary error function for <code>x</code>.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[0,</code> …\n"],["errno","SystemCallError","SystemCallError.html#method-i-errno","()","<p>Return this SystemCallError’s error number.\n"],["error?","Ripper","Ripper.html#method-i-error-3F","()","<p>Return true if parsed source has errors.\n"],["error_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-error_bytes","()","<p>Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["error_char","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-error_char","()","<p>Returns the one-character string which cause Encoding::UndefinedConversionError.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["escape","Regexp","Regexp.html#method-c-escape","(p1)","<p>Returns a new string that escapes any characters that have special meaning in a regular expression:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["euid","Process","Process.html#method-c-euid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["euid=","Process","Process.html#method-c-euid-3D","(p1)","<p>Sets the effective user ID for this process. Not available on all platforms.\n"],["eval","Binding","Binding.html#method-i-eval","(p1, p2 = v2, p3 = v3)","<p>Evaluates the Ruby expression(s) in <em>string</em>, in the <em>binding</em>’s context.  If the optional <em>filename</em> and …\n"],["eval","Kernel","Kernel.html#method-i-eval","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Evaluates the Ruby expression(s) in <em>string</em>. If <em>binding</em> is given, which must be a Binding object, the …\n"],["eval","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-eval","()","<p>Evaluates the instruction sequence and returns the result.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RubyVM</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">InstructionSequence</span>.<span class=\"ruby-identifier\">compile</span>(<span class=\"ruby-string\">&quot;1 + 2&quot;</span>).<span class=\"ruby-identifier\">eval</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["except","ENV","ENV.html#method-c-except","(*args)","<p>Returns a hash except the given keys from ENV and their values.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>                       <span class=\"ruby-comment\">#=&gt; {&quot;LANG&quot;=&gt;&quot;en_US.UTF-8&quot;, ...</span>\n</pre>\n"],["except","Hash","Hash.html#method-i-except","(*args)","<p>Returns a new Hash excluding entries for the given <code>keys</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-value\">a:</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-value\">b:</span> <span class=\"ruby-value\">200</span>, <span class=\"ruby-value\">c:</span> <span class=\"ruby-value\">300</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">except</span>(<span class=\"ruby-value\">:a</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["exception","Exception","Exception.html#method-c-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return the receiver. Otherwise, create …\n"],["exception","Exception","Exception.html#method-i-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return the receiver. Otherwise, create …\n"],["exclude_end?","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-exclude_end-3F","()",""],["exclude_end?","Range","Range.html#method-i-exclude_end-3F","()","<p>Returns <code>true</code> if <code>self</code> excludes its end value; <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Range</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">exclude_end?</span>       <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["exec","Kernel","Kernel.html#method-i-exec","(*args)","<p>Replaces the current process by running the given external <em>command</em>, which can take one of the following …\n"],["exec","Process","Process.html#method-c-exec","(*args)","<p>Replaces the current process by running the given external <em>command</em>, which can take one of the following …\n"],["executable?","File","File.html#method-c-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective user and group id of this process. See …\n"],["executable?","File::Stat","File/Stat.html#method-i-executable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is executable or if the operating system doesn’t distinguish executable files …\n"],["executable?","FileTest","FileTest.html#method-i-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective user and group id of this process. See …\n"],["executable_real?","File","File.html#method-c-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user and group id of this process. See access(3). …\n"],["executable_real?","File::Stat","File/Stat.html#method-i-executable_real-3F","()","<p>Same as <code>executable?</code>, but tests using the real owner of the process.\n"],["executable_real?","FileTest","FileTest.html#method-i-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user and group id of this process. See access(3). …\n"],["exist?","Dir","Dir.html#method-c-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, <code>false</code> otherwise.\n"],["exist?","File","File.html#method-c-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","FileTest","FileTest.html#method-i-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exit","Kernel","Kernel.html#method-i-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the SystemExit exception. This exception may …\n"],["exit","Process","Process.html#method-c-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the SystemExit exception. This exception may …\n"],["exit","Thread","Thread.html#method-c-exit","()","<p>Terminates the currently running thread and schedules another thread to be run.\n<p>If this thread is already …\n"],["exit","Thread","Thread.html#method-i-exit","()","<p>Terminates <code>thr</code> and schedules another thread to be run, returning the terminated Thread.  If this is the …\n"],["exit!","Kernel","Kernel.html#method-i-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is returned to the underlying system …\n"],["exit!","Process","Process.html#method-c-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is returned to the underlying system …\n"],["exit_value","LocalJumpError","LocalJumpError.html#method-i-exit_value","()","<p>Returns the exit value associated with this <code>LocalJumpError</code>.\n"],["exited?","Process::Status","Process/Status.html#method-i-exited-3F","()","<p>Returns <code>true</code> if <em>stat</em> exited normally (for example using an <code>exit()</code> call or finishing the program).\n"],["exitstatus","Process::Status","Process/Status.html#method-i-exitstatus","()","<p>Returns the least significant eight bits of the return code of <em>stat</em>. Only available if #exited? is <code>true</code> …\n"],["exp","Math","Math.html#method-c-exp","(p1)","<p>Returns <code>e</code> raised to the <code>x</code> power.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[0, INFINITY]</code>.\n"],["expand_path","File","File.html#method-c-expand_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory …\n"],["extend","Object","Object.html#method-i-extend","(*args)","<p>Adds to <em>obj</em> the instance methods from each module given as a parameter.\n\n<pre>module Mod\n  def hello\n    &quot;Hello ...</pre>\n"],["external?","IO::Buffer","IO/Buffer.html#method-i-external-3F","()","<p>The buffer is <em>external</em> if it references the memory which is not allocated or mapped by the buffer itself. …\n"],["external_encoding","ARGF","ARGF.html#method-i-external_encoding","()","<p>Returns the external encoding for files read from ARGF as an Encoding object. The external encoding is …\n"],["external_encoding","IO","IO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the stream, or <code>nil</code> if the stream is in write …\n"],["extname","File","File.html#method-c-extname","(p1)","<p>Returns the extension (the portion of file name in <code>path</code> starting from the last period).\n<p>If <code>path</code> is a dotfile, …\n"],["fail","Kernel","Kernel.html#method-i-fail","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a RuntimeError if <code>$!</code> is <code>nil</code>.  With a single  …\n"],["fcntl","IO","IO.html#method-i-fcntl","(p1, p2 = v2)","<p>Invokes Posix system call fcntl(2), which provides a mechanism for issuing low-level commands to control …\n"],["fdatasync","IO","IO.html#method-i-fdatasync","()","<p>Immediately writes to disk all data buffered in the stream, via the operating system’s: <code>fdatasync(2)</code> …\n"],["fdiv","Complex","Complex.html#method-i-fdiv","(p1)","<p>Performs division as each part is a float, never returns a float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">11</span>, <span class=\"ruby-value\">22</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; (3.6666666666666665+7.333333333333333i)</span>\n</pre>\n"],["fdiv","Float","Float.html#method-i-fdiv","(p1)","<p>Returns the quotient from dividing <code>self</code> by <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">2</span>)              <span class=\"ruby-comment\"># =&gt; 1.57</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">-2</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fdiv","Integer","Integer.html#method-i-fdiv","(p1)","<p>Returns the Float result of dividing <code>self</code> by <code>numeric</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">4</span>.<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">2</span>)      <span class=\"ruby-comment\"># =&gt; 2.0</span>\n<span class=\"ruby-value\">4</span>.<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">-2</span>)      <span class=\"ruby-comment\"># =&gt; -2.0 ...</span>\n</pre>\n"],["fdiv","Numeric","Numeric.html#method-i-fdiv","(p1)","<p>Returns the quotient <code>self/other</code> as a float, using method <code>/</code> in the derived class of <code>self</code>. (Numeric itself …\n"],["fdiv","Rational","Rational.html#method-i-fdiv","(p1)","<p>Performs division and returns the value as a Float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">1</span>)       <span class=\"ruby-comment\">#=&gt; 0.6666666666666666 ...</span>\n</pre>\n"],["feed","Enumerator","Enumerator.html#method-i-feed","(p1)","<p>Sets the value to be returned by the next yield inside <code>e</code>.\n<p>If the value is not set, the yield returns nil. …\n"],["fetch","Array","Array.html#method-i-fetch","(p1, p2 = v2)","<p>Returns the element at offset  <code>index</code>.\n<p>With the single Integer argument <code>index</code>, returns the element at offset …\n"],["fetch","ENV","ENV.html#method-c-fetch","(*args)","<p>If <code>name</code> is the name of an environment variable, returns its value:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["fetch","Hash","Hash.html#method-i-fetch","(*args)","<p>Returns the value for the given <code>key</code>, if found.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-value\">:bar</span>) <span class=\"ruby-comment\"># =&gt; 1</span>\n</pre>\n<p>If <code>key</code> …\n"],["fetch","Thread","Thread.html#method-i-fetch","(*args)","<p>Returns a fiber-local for the given key. If the key can’t be found, there are several options: With …\n"],["fetch_values","Hash","Hash.html#method-i-fetch_values","(*args)","<p>Returns a new Array containing the values associated with the given keys *keys:\n\n<pre>h = {foo: 0, bar: 1, baz: ...</pre>\n"],["fiber","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-fiber","()","<p>Implementation of the Fiber.schedule. The method is <em>expected</em> to immediately run the given block of code …\n"],["file","ARGF","ARGF.html#method-i-file","()","<p>Returns the current file as an IO or File object. <code>$stdin</code> is returned when the current file is STDIN. …\n"],["file?","File","File.html#method-c-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a regular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","File::Stat","File/Stat.html#method-i-file-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a regular file (not a device file, pipe, socket, etc.).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">file?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["file?","FileTest","FileTest.html#method-i-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a regular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["filename","ARGF","ARGF.html#method-i-filename","()","<p>Returns the current filename. “-” is returned when the current file is STDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["filename","Ripper","Ripper.html#method-i-filename","()","<p>Return current parsing filename.\n"],["fileno","ARGF","ARGF.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for the current file. Raises an ArgumentError …\n"],["fileno","Dir","Dir.html#method-i-fileno","()","<p>Returns the file descriptor used in <em>dir</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-comment\">#=&gt; 8</span>\n</pre>\n<p>This method uses dirfd() function …\n"],["fileno","IO","IO.html#method-i-fileno","()","<p>Returns the integer file descriptor for the stream:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdin</span>.<span class=\"ruby-identifier\">fileno</span>             <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fill","Array","Array.html#method-i-fill","(p1 = v1, p2 = v2)","<p>Replaces specified elements in <code>self</code> with specified objects; returns <code>self</code>.\n<p>With argument <code>obj</code> and no block …\n"],["filter","Array","Array.html#method-i-filter","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array containing those elements of …\n"],["filter","ENV","ENV.html#method-c-filter","()","<p>ENV.filter is an alias for ENV.select.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["filter","Enumerable","Enumerable.html#method-i-filter","()","<p>Returns an array containing elements selected by the block.\n<p>With a block given, calls the block with successive …\n"],["filter","Enumerator::Lazy","Enumerator/Lazy.html#method-i-filter","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["filter","Hash","Hash.html#method-i-filter","()","<p>Hash#filter is an alias for Hash#select.\n<p>Returns a new Hash object whose entries are those for which the …\n"],["filter","Struct","Struct.html#method-i-filter","(*args)","<p>With a block given, returns an array of values from <code>self</code> for which the block returns a truthy value: …\n"],["filter!","Array","Array.html#method-i-filter-21","()","<p>Calls the block, if given  with each element of <code>self</code>; removes from <code>self</code> those elements for which the …\n"],["filter!","ENV","ENV.html#method-c-filter-21","()","<p>ENV.filter! is an alias for ENV.select!.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["filter!","Hash","Hash.html#method-i-filter-21","()","<p>Hash#filter! is an alias for Hash#select!.\n<p>Returns <code>self</code>, whose entries are those for which the block returns …\n"],["filter_map","Enumerable","Enumerable.html#method-i-filter_map","()","<p>Returns an array containing truthy elements returned by the block.\n<p>With a block given, calls the block …\n"],["filter_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-filter_map","()","<p>Like Enumerable#filter_map, but chains operation to be lazy-evaluated.\n\n<pre>(1..).lazy.filter_map { |i| i * ...</pre>\n"],["find","Encoding","Encoding.html#method-c-find","(p1)","<p>Search the encoding with specified <em>name</em>. <em>name</em> should be a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">find</span>(<span class=\"ruby-string\">&quot;US-ASCII&quot;</span>)  <span class=\"ruby-comment\">#=&gt; #&lt;Encoding:US-ASCII&gt;</span>\n</pre>\n"],["find","Enumerable","Enumerable.html#method-i-find","(*args)","<p>Returns the first element for which the block returns a truthy value.\n<p>With a block given, calls the block …\n"],["find_all","Enumerable","Enumerable.html#method-i-find_all","()","<p>Returns an array containing elements selected by the block.\n<p>With a block given, calls the block with successive …\n"],["find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-find_all","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["find_index","Array","Array.html#method-i-find_index","(*args)","<p>Returns the index of a specified element.\n<p>When argument <code>object</code> is given but no block, returns the index …\n"],["find_index","Enumerable","Enumerable.html#method-i-find_index","(p1)","<p>Returns the index of the first element that meets a specified criterion, or <code>nil</code> if no such element is …\n"],["finish","Encoding::Converter","Encoding/Converter.html#method-i-finish","()","<p>Finishes the converter. It returns the last part of the converted string.\n\n<pre>ec = Encoding::Converter.new(&quot;utf-8&quot;, ...</pre>\n"],["finite?","Complex","Complex.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>cmp</code>‘s real and imaginary parts are both finite numbers, otherwise returns <code>false</code>. …\n"],["finite?","Float","Float.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>self</code> is not <code>Infinity</code>, <code>-Infinity</code>, or <code>NaN</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">2.0</span>      <span class=\"ruby-comment\"># =&gt; 2.0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">finite?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["first","Array","Array.html#method-i-first","(*args)","<p>Returns elements from <code>self</code>; does not modify <code>self</code>.\n<p>When no argument is given, returns the first element: …\n"],["first","Enumerable","Enumerable.html#method-i-first","(*args)","<p>Returns the first element or elements.\n<p>With no argument, returns the first element, or <code>nil</code> if there is …\n"],["first","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-first","(*args)","<p>Returns the first number in this arithmetic sequence, or an array of the first <code>n</code> elements.\n"],["first","Range","Range.html#method-i-first","(p1)","<p>With no argument, returns the first element of <code>self</code>, if it exists:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">first</span>     <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-string\">&#39;a&#39;</span><span class=\"ruby-operator\">..</span><span class=\"ruby-string\">&#39;d&#39;</span>).<span class=\"ruby-identifier\">first</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["first_lineno","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-first_lineno","()","<p>Returns the number of the first source line where the instruction sequence was loaded from.\n<p>For example, …\n"],["fixed_encoding?","Regexp","Regexp.html#method-i-fixed_encoding-3F","()","<p>Returns <code>false</code> if <code>self</code> is applicable to a string with any ASCII-compatible encoding; otherwise returns …\n"],["flat_map","Enumerable","Enumerable.html#method-i-flat_map","()","<p>Returns an array of flattened objects returned by the block.\n<p>With a block given, calls the block with …\n"],["flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-flat_map","()","<p>Returns a new lazy enumerator with the concatenated results of running <code>block</code> once for every element in …\n"],["flatten","Array","Array.html#method-i-flatten","(*args)","<p>Returns a new Array that is a recursive flattening of <code>self</code>:\n<p>Each non-Array element is unchanged.\n<p>Each  …\n"],["flatten","Hash","Hash.html#method-i-flatten","(*args)","<p>Returns a new Array object that is a 1-dimensional flattening of <code>self</code>.\n<p>By default, nested Arrays are not …\n"],["flatten!","Array","Array.html#method-i-flatten-21","(*args)","<p>Replaces each nested Array in <code>self</code> with the elements from that Array; returns <code>self</code> if any changes, <code>nil</code> …\n"],["flock","File","File.html#method-i-flock","(p1)","<p>Locks or unlocks a file according to <em>locking_constant</em> (a logical <em>or</em> of the values in the table below). …\n"],["floor","Float","Float.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When …\n"],["floor","Integer","Integer.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>self</code> with a precision of <code>ndigits</code> decimal digits.\n<p>When …\n"],["floor","Numeric","Numeric.html#method-i-floor","(*args)","<p>Returns the largest number that is less than or equal to <code>self</code> with a precision of <code>digits</code> decimal digits. …\n"],["floor","Rational","Rational.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>rat</code> with a precision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Time","Time.html#method-i-floor","(*args)","<p>Returns a new Time object whose numerical value is less than or equal to <code>self</code> with its seconds truncated …\n"],["flush","IO","IO.html#method-i-flush","()","<p>Flushes data buffered in <code>self</code> to the operating system (but does not necessarily flush data buffered in …\n"],["for","IO::Buffer","IO/Buffer.html#method-c-for","(p1)","<p>Creates a IO::Buffer from the given string’s memory. Without a block a frozen internal copy of the …\n"],["for_fd","IO","IO.html#method-c-for_fd","(*args)","<p>Synonym for IO.new.\n"],["force","Enumerator::Lazy","Enumerator/Lazy.html#method-i-force","()","<p>Expands <code>lazy</code> enumerator to an array. See Enumerable#to_a.\n"],["force_encoding","String","String.html#method-i-force_encoding","(p1)","<p>Changes the encoding of <code>self</code> to <code>encoding</code>, which may be a string encoding name or an Encoding object; …\n"],["foreach","Dir","Dir.html#method-c-foreach","(*args)","<p>Calls the block once for each entry in the named directory, passing the filename of each entry as a parameter …\n"],["foreach","IO","IO.html#method-c-foreach","(p1, p2 = v2, p3 = v3, p4 = {})","<p>Calls the block with each successive line read from the stream.\n<p>When called from class IO (but not subclasses …\n"],["fork","Kernel","Kernel.html#method-i-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the subprocess, and the subprocess …\n"],["fork","Process","Process.html#method-c-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the subprocess, and the subprocess …\n"],["fork","Thread","Thread.html#method-c-fork","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then calling <code>start</code> in that subclass …\n"],["format","Kernel","Kernel.html#method-i-format","(*args)","<p>Returns the string resulting from formatting <code>objects</code> into <code>format_string</code>.\n<p>For details on <code>format_string</code> …\n"],["free","IO::Buffer","IO/Buffer.html#method-i-free","()","<p>If the buffer references memory, release it back to the operating system.\n<p>for a <em>mapped</em> buffer (e.g. from …\n"],["freeze","ENV","ENV.html#method-c-freeze","()","<p>Raises an exception:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">freeze</span> <span class=\"ruby-comment\"># Raises TypeError (cannot freeze ENV)</span>\n</pre>\n"],["freeze","Module","Module.html#method-i-freeze","()","<p>Prevents further modifications to <em>mod</em>.\n<p>This method returns self.\n"],["freeze","Object","Object.html#method-i-freeze","()","<p>Prevents further modifications to <em>obj</em>. A FrozenError will be raised if modification is attempted. There …\n"],["freeze","String","String.html#method-i-freeze","()",""],["frexp","Math","Math.html#method-c-frexp","(p1)","<p>Returns a 2-element array containing the normalized signed float <code>fraction</code> and integer <code>exponent</code> of <code>x</code> such …\n"],["friday?","Time","Time.html#method-i-friday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Friday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">7</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-07 00:00:00 ...</span>\n</pre>\n"],["from_name","Process::GID","Process/GID.html#method-c-from_name","(p1)","<p>Get the group ID by the <em>name</em>. If the group is not found, <code>ArgumentError</code> will be raised.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">GID</span>.<span class=\"ruby-identifier\">from_name</span>(<span class=\"ruby-string\">&quot;wheel&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from_name","Process::UID","Process/UID.html#method-c-from_name","(p1)","<p>Get the user ID by the <em>name</em>. If the user is not found, <code>ArgumentError</code> will be raised.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UID</span>.<span class=\"ruby-identifier\">from_name</span>(<span class=\"ruby-string\">&quot;root&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fsync","IO","IO.html#method-i-fsync","()","<p>Immediately writes to disk all data buffered in the stream, via the operating system’s <code>fsync(2)</code>. …\n"],["ftype","File","File.html#method-c-ftype","(p1)","<p>Identifies the type of the named file; the return string is one of “<code>file</code>”, “<code>directory</code>”, …\n"],["ftype","File::Stat","File/Stat.html#method-i-ftype","()","<p>Identifies the type of <em>stat</em>. The return string is one of: “<code>file</code>”, “<code>directory</code>”, “ …\n"],["full_message","Exception","Exception.html#method-i-full_message","(p1 = {})","<p>Returns formatted string of <em>exception</em>. The returned string is formatted using the same format that Ruby …\n"],["gamma","Math","Math.html#method-c-gamma","(p1)","<p>Returns the value of the gamma function for <code>x</code>.\n<p>Domain: <code>(-INFINITY, INFINITY]</code> excluding negative integers. …\n"],["gcd","Integer","Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor of the two integers. The result is always positive. 0.gcd(x) and …\n"],["gcdlcm","Integer","Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array with the greatest common divisor and the least common multiple of the two integers, …\n"],["get_string","IO::Buffer","IO/Buffer.html#method-i-get_string","(*args)","<p>Read a chunk or all of the buffer into a string, in the specified <code>encoding</code>. If no encoding is provided …\n"],["get_value","IO::Buffer","IO/Buffer.html#method-i-get_value","(p1, p2)","<p>Read from buffer a value of <code>type</code> at <code>offset</code>. <code>type</code> should be one of symbols:\n<p><code>:U8</code>: unsigned integer, 1 byte …\n"],["getbyte","ARGF","ARGF.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from ARGF. Returns <code>nil</code> if called at the end of the stream.\n<p>For example: …\n"],["getbyte","IO","IO.html#method-i-getbyte","()","<p>Reads and returns the next byte (in range 0..255) from the stream; returns <code>nil</code> if already at end-of-file: …\n"],["getbyte","String","String.html#method-i-getbyte","(p1)","<p>Returns the byte at zero-based <code>index</code> as an integer, or <code>nil</code> if <code>index</code> is out of range:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;abcde&#39;</span>   <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["getc","ARGF","ARGF.html#method-i-getc","()","<p>Reads the next character from ARGF and returns it as a String. Returns <code>nil</code> at the end of the stream. …\n"],["getc","IO","IO.html#method-i-getc","()","<p>Reads and returns the next 1-character string from the stream; returns <code>nil</code> if already at end-of-file: …\n"],["getegid","Process::Sys","Process/Sys.html#method-c-getegid","()","<p>Returns the effective group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["geteuid","Process::Sys","Process/Sys.html#method-c-geteuid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getgid","Process::Sys","Process/Sys.html#method-c-getgid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["getgm","Time","Time.html#method-i-getgm","()","<p>Returns a new Time object representing the value of <code>self</code> converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">local</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getlocal","Time","Time.html#method-i-getlocal","(*args)","<p>Returns a new Time object representing the value of <code>self</code> converted to a given timezone; if <code>zone</code> is <code>nil</code> …\n"],["getpgid","Process","Process.html#method-c-getpgid","(p1)","<p>Returns the process group ID for the given process id. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">getpgid</span>(<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">ppid</span>()) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getpgrp","Process","Process.html#method-c-getpgrp","()","<p>Returns the process group ID for this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">getpgid</span>(<span class=\"ruby-value\">0</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["getpriority","Process","Process.html#method-c-getpriority","(p1, p2)","<p>Gets the scheduling priority for specified process, process group, or user. <em>kind</em> indicates the kind of …\n"],["getrlimit","Process","Process.html#method-c-getrlimit","(p1)","<p>Gets the resource limit of the process. <em>cur_limit</em> means current (soft) limit and <em>max_limit</em> means maximum …\n"],["gets","ARGF","ARGF.html#method-i-gets","(*args)","<p>Returns the next line from the current file in ARGF.\n<p>By default lines are assumed to be separated by  …\n"],["gets","IO","IO.html#method-i-gets","(*args)","<p>Reads and returns a line from the stream (see Lines); assigns the return value to <code>$_</code>.\n<p>With no arguments …\n"],["gets","Kernel","Kernel.html#method-i-gets","(*args)","<p>Returns (and assigns to <code>$_</code>) the next line from the list of files in <code>ARGV</code> (or <code>$*</code>), or from standard input …\n"],["getsid","Process","Process.html#method-c-getsid","(*args)","<p>Returns the session ID for the given process id. If not given, return current process sid. Not available …\n"],["getuid","Process::Sys","Process/Sys.html#method-c-getuid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getutc","Time","Time.html#method-i-getutc","()","<p>Returns a new Time object representing the value of <code>self</code> converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">local</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getwd","Dir","Dir.html#method-c-getwd","()","<p>Returns the path to the current working directory of this process as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["gid","File::Stat","File/Stat.html#method-i-gid","()","<p>Returns the numeric group id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid","Process","Process.html#method-c-gid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid=","Process","Process.html#method-c-gid-3D","(p1)","<p>Sets the group ID for this process.\n"],["global_variables","Kernel","Kernel.html#method-i-global_variables","()","<p>Returns an array of the names of global variables. This includes special regexp global variables such …\n"],["gm","Time","Time.html#method-c-gm","(*args)","<p>Returns a new Time object based the on given arguments, in the UTC timezone.\n<p>With one to seven arguments …\n"],["gmt?","Time","Time.html#method-i-gmt-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a time in UTC (GMT):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">now</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>\n<span class=\"ruby-comment\"># =&gt; 2022-08-18 10:24:13.5398485 -0500 ...</span>\n</pre>\n"],["gmt_offset","Time","Time.html#method-i-gmt_offset","()","<p>Returns the offset in seconds between the timezones of UTC and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">utc_offset</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["gmtime","Time","Time.html#method-i-gmtime","()","<p>Returns <code>self</code>, converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 00:00:00 -0600</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">utc?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["gmtoff","Time","Time.html#method-i-gmtoff","()","<p>Returns the offset in seconds between the timezones of UTC and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">utc_offset</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["grant_privilege","Process::GID","Process/GID.html#method-c-grant_privilege","(p1)","<p>Set the effective group ID, and if possible, the saved group ID of the process to the given <em>group</em>. Returns …\n"],["grant_privilege","Process::UID","Process/UID.html#method-c-grant_privilege","(p1)","<p>Set the effective user ID, and if possible, the saved user ID of the process to the given <em>user</em>. Returns …\n"],["grapheme_clusters","String","String.html#method-i-grapheme_clusters","()","<p>Returns an array of the grapheme clusters in <code>self</code> (see Unicode Grapheme Cluster Boundaries):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&quot;\\u0061\\u0308-pqr-\\u0062\\u0308-xyz-\\u0063\\u0308&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["grep","Enumerable","Enumerable.html#method-i-grep","(p1)","<p>Returns an array of objects based elements of <code>self</code> that match the given pattern.\n<p>With no block given, …\n"],["grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep","(p1)","<p>Like Enumerable#grep, but chains operation to be lazy-evaluated.\n"],["grep_v","Enumerable","Enumerable.html#method-i-grep_v","(p1)","<p>Returns an array of objects based on elements of <code>self</code> that <em>don’t</em> match the given pattern.\n<p>With no …\n"],["grep_v","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep_v","(p1)","<p>Like Enumerable#grep_v, but chains operation to be lazy-evaluated.\n"],["group","Thread","Thread.html#method-i-group","()","<p>Returns the ThreadGroup which contains the given thread.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">main</span>.<span class=\"ruby-identifier\">group</span>   <span class=\"ruby-comment\">#=&gt; #&lt;ThreadGroup:0x4029d914&gt;</span>\n</pre>\n"],["group_by","Enumerable","Enumerable.html#method-i-group_by","()","<p>With a block given returns a hash:\n<p>Each key is a return value from the block.\n<p>Each value is an array of …\n"],["groups","Process","Process.html#method-c-groups","()","<p>Get an Array of the group IDs in the supplemental group access list for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">groups</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["groups=","Process","Process.html#method-c-groups-3D","(p1)","<p>Set the supplemental group access list to the given Array of group IDs.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">groups</span>   <span class=\"ruby-comment\">#=&gt; [0, 1, 2, ...</span>\n</pre>\n"],["grpowned?","File","File.html#method-c-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group id of the calling process is the owner …\n"],["grpowned?","File::Stat","File/Stat.html#method-i-grpowned-3F","()","<p>Returns true if the effective group id of the process is the same as the group id of <em>stat</em>. On Windows …\n"],["grpowned?","FileTest","FileTest.html#method-i-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group id of the calling process is the owner …\n"],["gsub","Kernel","Kernel.html#method-i-gsub","(*args)","<p>Equivalent to <code>$_.gsub...</code>, except that <code>$_</code> will be updated if substitution occurs. Available only when …\n"],["gsub","String","String.html#method-i-gsub","(*args)","<p>Returns a copy of <code>self</code> with all occurrences of the given <code>pattern</code> replaced.\n<p>See Substitution Methods.\n<p>Returns …\n"],["gsub!","String","String.html#method-i-gsub-21","(*args)","<p>Performs the specified substring replacement(s) on <code>self</code>; returns <code>self</code> if any replacement occurred, <code>nil</code> …\n"],["handle_interrupt","Thread","Thread.html#method-c-handle_interrupt","(p1)","<p>Changes asynchronous interrupt timing.\n<p><em>interrupt</em> means asynchronous event and corresponding procedure …\n"],["has_key?","ENV","ENV.html#method-c-has_key-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["has_key?","Hash","Hash.html#method-i-has_key-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["has_value?","ENV","ENV.html#method-c-has_value-3F","(p1)","<p>Returns <code>true</code> if <code>value</code> is the value for some environment variable name, <code>false</code> otherwise:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["has_value?","Hash","Hash.html#method-i-has_value-3F","(p1)","<p>Method #value? is an alias for #has_value?.\n<p>Returns <code>true</code> if <code>value</code> is a value in <code>self</code>, otherwise <code>false</code> …\n"],["hash","Array","Array.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Two arrays with the same content will have the same hash code …\n"],["hash","Complex","Complex.html#method-i-hash","()",""],["hash","Data","Data.html#method-i-hash","()","<p>Redefines Object#hash (used to distinguish objects as Hash keys) so that data objects of the same class …\n"],["hash","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-hash","()","<p>Compute a hash-value for this arithmetic sequence. Two arithmetic sequences with same begin, end, step, …\n"],["hash","Float","Float.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>See also Object#hash.\n"],["hash","Hash","Hash.html#method-i-hash","()","<p>Returns the Integer hash-code for the hash.\n<p>Two Hash objects have the same hash-code if their content …\n"],["hash","MatchData","MatchData.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>, based on the target string, regexp, match, and captures.\n<p>See …\n"],["hash","Method","Method.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash","Object","Object.html#method-i-hash","()","<p>Generates an Integer hash value for this object.  This function must have the property that <code>a.eql?(b)</code> …\n"],["hash","Proc","Proc.html#method-i-hash","()","<p>Returns a hash value corresponding to proc body.\n<p>See also Object#hash.\n"],["hash","Range","Range.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>. Two range objects <code>r0</code> and <code>r1</code> have the same hash value if and …\n"],["hash","Rational","Rational.html#method-i-hash","()",""],["hash","Regexp","Regexp.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Related: Object#hash.\n"],["hash","String","String.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>. The value is based on the length, content and encoding of <code>self</code> …\n"],["hash","Struct","Struct.html#method-i-hash","()","<p>Returns the integer hash value for <code>self</code>.\n<p>Two structs of the same class and with the same content will …\n"],["hash","Time","Time.html#method-i-hash","()","<p>Returns the integer hash code for <code>self</code>.\n<p>Related: Object#hash.\n"],["hash","UnboundMethod","UnboundMethod.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hex","String","String.html#method-i-hex","()","<p>Interprets the leading substring of <code>self</code> as a string of hexadecimal digits (with an optional sign and …\n"],["hexdump","IO::Buffer","IO/Buffer.html#method-i-hexdump","()",""],["home","Dir","Dir.html#method-c-home","(*args)","<p>Returns the home directory of the current user or the named user if given.\n"],["hour","Time","Time.html#method-i-hour","()","<p>Returns the integer hour of the day for <code>self</code>, in range (0..23):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>)\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["hypot","Math","Math.html#method-c-hypot","(p1, p2)","<p>Returns <code>sqrt(a**2 + b**2)</code>, which is the length of the longest side <code>c</code> (the hypotenuse) of the right triangle …\n"],["i","Numeric","Numeric.html#method-i-i","()","<p>Returns <code>Complex(0, self)</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">i</span>              <span class=\"ruby-comment\"># =&gt; (0+2i)</span>\n<span class=\"ruby-value\">-2</span>.<span class=\"ruby-identifier\">i</span>             <span class=\"ruby-comment\"># =&gt; (0-2i)</span>\n<span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">i</span>            <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["id2name","Symbol","Symbol.html#method-i-id2name","()","<p>Returns a string representation of <code>self</code> (not including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n</pre>\n<p>Symbol#id2name …\n"],["identical?","File","File.html#method-c-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;w&quot;</span>) {} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["identical?","FileTest","FileTest.html#method-i-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;w&quot;</span>) {} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ignore_deadlock","Thread","Thread.html#method-c-ignore_deadlock","()","<p>Returns the status of the global “ignore deadlock” condition. The default is <code>false</code>, so that …\n"],["ignore_deadlock=","Thread","Thread.html#method-c-ignore_deadlock-3D","(p1)","<p>Returns the new state. When set to <code>true</code>, the VM will not check for deadlock conditions. It is only useful …\n"],["imag","Complex","Complex.html#method-i-imag","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imag","Numeric","Numeric.html#method-i-imag","()","<p>Returns zero.\n"],["imaginary","Complex","Complex.html#method-i-imaginary","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imaginary","Numeric","Numeric.html#method-i-imaginary","()","<p>Returns zero.\n"],["import_methods","Refinement","Refinement.html#method-i-import_methods","(*args)","<p>Imports methods from modules. Unlike Module#include, Refinement#import_methods copies methods and adds …\n"],["include","Module","Module.html#method-i-include","(*args)","<p>Invokes Module.append_features on each parameter in reverse order.\n"],["include?","Array","Array.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if for some index <code>i</code> in <code>self</code>, <code>obj == self[i]</code>; otherwise <code>false</code>:\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["include?","ENV","ENV.html#method-c-include-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["include?","Enumerable","Enumerable.html#method-i-include-3F","(p1)","<p>Returns whether for any element <code>object == element</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)                       <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["include?","Hash","Hash.html#method-i-include-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["include?","Module","Module.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>module</em> is included or prepended in <em>mod</em> or one of <em>mod</em>’s ancestors.\n\n<pre>module A\nend\nclass ...</pre>\n"],["include?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["include?","Range","Range.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is an element of <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)        <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","String","String.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> contains <code>other_string</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-string\">&#39;f&#39;</span>)    <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-string\">&#39;fo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included_modules","Module","Module.html#method-i-included_modules","()","<p>Returns the list of modules included or prepended in <em>mod</em> or one of <em>mod</em>’s ancestors.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Sub</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["incomplete_input?","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F","()","<p>Returns true if the invalid byte sequence error is caused by premature end of string.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["index","Array","Array.html#method-i-index","(*args)","<p>Returns the index of a specified element.\n<p>When argument <code>object</code> is given but no block, returns the index …\n"],["index","String","String.html#method-i-index","(p1, p2 = v2)","<p>Returns the integer index of the first match for the given argument, or <code>nil</code> if none found; the search …\n"],["infinite?","Complex","Complex.html#method-i-infinite-3F","()","<p>Returns <code>1</code> if <code>cmp</code>‘s real or imaginary part is an infinite number, otherwise returns <code>nil</code>.\n\n<pre>For example: ...</pre>\n"],["infinite?","Float","Float.html#method-i-infinite-3F","()","<p>Returns:\n<p>1, if <code>self</code> is <code>Infinity</code>.\n<p>-1 if <code>self</code> is <code>-Infinity</code>.\n"],["initgroups","Process","Process.html#method-c-initgroups","(p1, p2)","<p>Initializes the supplemental group access list by reading the system group database and using all groups …\n"],["initialize_copy","Array","Array.html#method-i-initialize_copy","(p1)","<p>Replaces the content of <code>self</code> with the content of <code>other_array</code>; returns <code>self</code>:\n\n<pre>a = [:foo, &#39;bar&#39;, 2]\na.replace([&#39;foo&#39;, ...</pre>\n"],["initialize_copy","Hash","Hash.html#method-i-initialize_copy","(p1)","<p>Replaces the entire contents of <code>self</code> with the contents of <code>other_hash</code>; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: ...</pre>\n"],["initialize_copy","IO::Buffer","IO/Buffer.html#method-i-initialize_copy","(p1)","<p>Make an internal copy of the source buffer. Updates to the copy will not affect the source buffer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["initialize_copy","String","String.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <code>self</code> with the contents of <code>other_string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>        <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inject","Enumerable","Enumerable.html#method-i-inject","(p1 = v1, p2 = v2)","<p>Returns an object formed from operands via either:\n<p>A method named by <code>symbol</code>.\n<p>A block to which each operand …\n"],["ino","File::Stat","File/Stat.html#method-i-ino","()","<p>Returns the inode number for <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">ino</span>   <span class=\"ruby-comment\">#=&gt; 1083669</span>\n</pre>\n"],["inplace_mode","ARGF","ARGF.html#method-i-inplace_mode","()","<p>Returns the file extension appended to the names of backup copies of modified files under in-place edit …\n"],["inplace_mode=","ARGF","ARGF.html#method-i-inplace_mode-3D","(p1)","<p>Sets the filename extension for in-place editing mode to the given String. The backup copy of each file …\n"],["insert","Array","Array.html#method-i-insert","(*args)","<p>Inserts given <code>objects</code> before or after the element at Integer index <code>offset</code>; returns <code>self</code>.\n<p>When <code>index</code> is …\n"],["insert","String","String.html#method-i-insert","(p1, p2)","<p>Inserts the given <code>other_string</code> into <code>self</code>; returns <code>self</code>.\n<p>If the Integer <code>index</code> is positive, inserts <code>other_string</code> …\n"],["insert_output","Encoding::Converter","Encoding/Converter.html#method-i-insert_output","(p1)","<p>Inserts string into the encoding converter. The string will be converted to the destination encoding …\n"],["inspect","ARGF","ARGF.html#method-i-inspect","()","<p>Returns “ARGF”.\n"],["inspect","Array","Array.html#method-i-inspect","()","<p>Returns the new String formed by calling method <code>#inspect</code> on each array element:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Complex","Complex.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">inspect</span>                       <span class=\"ruby-comment\">#=&gt; &quot;(2+0i)&quot;</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;-8/6&#39;</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Data","Data.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre>Measure = Data.define(:amount, :unit)\n\ndistance = Measure[10, ...</pre>\n"],["inspect","Dir","Dir.html#method-i-inspect","()","<p>Return a string describing this Dir object.\n"],["inspect","ENV","ENV.html#method-c-inspect","()","<p>Returns the contents of the environment as a String:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Encoding","Encoding.html#method-i-inspect","()","<p>Returns a string which represents the encoding for programmers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">inspect</span>       <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Encoding:UTF-8&gt;&quot; ...</span>\n</pre>\n"],["inspect","Encoding::Converter","Encoding/Converter.html#method-i-inspect","()","<p>Returns a printable version of <em>ec</em>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ec</span> = <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;iso-8859-1&quot;</span>, <span class=\"ruby-string\">&quot;utf-8&quot;</span>)\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">ec</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Enumerator","Enumerator.html#method-i-inspect","()","<p>Creates a printable version of <em>e</em>.\n"],["inspect","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-inspect","()","<p>Convert this arithmetic sequence to a printable form.\n"],["inspect","Enumerator::Chain","Enumerator/Chain.html#method-i-inspect","()","<p>Returns a printable version of the enumerator chain.\n"],["inspect","Enumerator::Product","Enumerator/Product.html#method-i-inspect","()","<p>Returns a printable version of the product enumerator.\n"],["inspect","Exception","Exception.html#method-i-inspect","()","<p>Return this exception’s class name and message.\n"],["inspect","FalseClass","FalseClass.html#method-i-inspect","()","<p>The string representation of <code>false</code> is “false”.\n"],["inspect","Fiber","Fiber.html#method-i-inspect","()",""],["inspect","File::Stat","File/Stat.html#method-i-inspect","()","<p>Produce a nicely formatted description of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/etc/passwd&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;File::Stat ...</span>\n</pre>\n"],["inspect","Float","Float.html#method-i-inspect","()","<p>Returns a string containing a representation of <code>self</code>; depending of the value of <code>self</code>, the string representation …\n"],["inspect","Hash","Hash.html#method-i-inspect","()","<p>Returns a new String containing the hash entries:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;{:foo=&gt;0, ...</span>\n</pre>\n"],["inspect","IO","IO.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;#&lt;File:t.txt&gt;&quot;</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close</span>\n</pre>\n"],["inspect","IO::Buffer","IO/Buffer.html#method-i-inspect","()",""],["inspect","Integer","Integer.html#method-i-inspect","(*args)","<p>Returns a string containing the place-value representation of <code>self</code> in radix <code>base</code> (in 2..36).\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","MatchData","MatchData.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\">  <span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/.$/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;foo&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;o&quot;&gt;</span>\n  <span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["inspect","Method","Method.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["inspect","Module","Module.html#method-i-inspect","()","<p>Returns a string representing this module or class. For basic classes and modules, this is the name. …\n"],["inspect","NilClass","NilClass.html#method-i-inspect","()","<p>Always returns the string “nil”.\n"],["inspect","Object","Object.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of <em>obj</em>. The default #inspect shows the object’s …\n"],["inspect","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-inspect","()",""],["inspect","Proc","Proc.html#method-i-inspect","()","<p>Returns the unique identifier for this proc, along with an indication of where the proc was defined. …\n"],["inspect","Process::Status","Process/Status.html#method-i-inspect","()","<p>Override the inspection method.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Process::Status: pid 12861 exit 1&gt;&quot;</span>\n</pre>\n"],["inspect","Range","Range.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>, including <code>begin.inspect</code> and <code>end.inspect</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">inspect</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["inspect","Rational","Rational.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">inspect</span>      <span class=\"ruby-comment\">#=&gt; &quot;(2/1)&quot;</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Regexp","Regexp.html#method-i-inspect","()","<p>Returns a nicely-formatted string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/ab+c/ix</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;/ab+c/ix&quot;</span>\n</pre>\n<p>Related: Regexp#to_s …\n"],["inspect","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-inspect","()","<p>Returns a human-readable string representation of this instruction sequence, including the #label and …\n"],["inspect","String","String.html#method-i-inspect","()","<p>Returns a printable version of <code>self</code>, enclosed in double-quotes, and with special characters escaped: …\n"],["inspect","Struct","Struct.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>) <span class=\"ruby-comment\"># =&gt; Customer</span>\n<span class=\"ruby-identifier\">joe</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","Symbol","Symbol.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code> (including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;:foo&quot;</span>\n</pre>\n<p>Related: …\n"],["inspect","Thread","Thread.html#method-i-inspect","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["inspect","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-inspect","()","<p>Returns the same as calling <code>inspect</code> on the string representation of #to_str\n"],["inspect","Time","Time.html#method-i-inspect","()","<p>Returns a string representation of <code>self</code> with subseconds:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">31</span>, <span class=\"ruby-value\">23</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">0.5</span>)\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","TrueClass","TrueClass.html#method-i-inspect","()","<p>The string representation of <code>true</code> is “true”.\n"],["inspect","UnboundMethod","UnboundMethod.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["instance_eval","BasicObject","BasicObject.html#method-i-instance_eval","(*args)","<p>Evaluates a string containing Ruby source code, or the given block, within the context of the receiver …\n"],["instance_eval","Ractor::MovedObject","Ractor/MovedObject.html#method-i-instance_eval","(*args)",""],["instance_exec","BasicObject","BasicObject.html#method-i-instance_exec","(*args)","<p>Executes the given block within the context of the receiver (<em>obj</em>). In order to set the context, the variable …\n"],["instance_exec","Ractor::MovedObject","Ractor/MovedObject.html#method-i-instance_exec","(*args)",""],["instance_method","Module","Module.html#method-i-instance_method","(p1)","<p>Returns an <code>UnboundMethod</code> representing the given instance method in <em>mod</em>.\n\n<pre>class Interpreter\n  def do_a() ...</pre>\n"],["instance_methods","Module","Module.html#method-i-instance_methods","(*args)","<p>Returns an array containing the names of the public and protected instance methods in the receiver.  …\n"],["instance_of?","Object","Object.html#method-i-instance_of-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an instance of the given class. See also Object#kind_of?.\n\n<pre>class A;     end\nclass ...</pre>\n"],["instance_variable_defined?","Object","Object.html#method-i-instance_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given instance variable is defined in <em>obj</em>. String arguments are converted to symbols. …\n"],["instance_variable_get","Object","Object.html#method-i-instance_variable_get","(p1)","<p>Returns the value of the given instance variable, or nil if the instance variable is not set. The <code>@</code> part …\n"],["instance_variable_set","Object","Object.html#method-i-instance_variable_set","(p1, p2)","<p>Sets the instance variable named by <em>symbol</em> to the given object. This may circumvent the encapsulation …\n"],["instance_variables","Object","Object.html#method-i-instance_variables","()","<p>Returns an array of instance variable names for the receiver. Note that simply defining an accessor does …\n"],["intern","String","String.html#method-i-intern","()","<p>Returns the Symbol corresponding to <em>str</em>, creating the symbol if it did not previously exist. See Symbol#id2name …\n"],["intern","Symbol","Symbol.html#method-i-intern","()","<p>Returns <code>self</code>.\n<p>Symbol#intern is an alias for Symbol#to_sym.\n<p>Related: String#to_sym.\n"],["internal?","IO::Buffer","IO/Buffer.html#method-i-internal-3F","()","<p>If the buffer is <em>internal</em>, meaning it references memory allocated by the buffer itself.\n<p>An internal buffer …\n"],["internal_encoding","ARGF","ARGF.html#method-i-internal_encoding","()","<p>Returns the internal encoding for strings read from ARGF as an Encoding object.\n<p>If ARGF.set_encoding has …\n"],["internal_encoding","IO","IO.html#method-i-internal_encoding","()","<p>Returns the Encoding object that represents the encoding of the internal string, if conversion is specified, …\n"],["intersect?","Array","Array.html#method-i-intersect-3F","(p1)","<p>Returns <code>true</code> if the array and <code>other_ary</code> have at least one element in common, otherwise returns <code>false</code> …\n"],["intersection","Array","Array.html#method-i-intersection","(*args)","<p>Returns a new Array containing each element found both in <code>self</code> and in all of the given Arrays <code>other_arrays</code> …\n"],["invert","ENV","ENV.html#method-c-invert","()","<p>Returns a Hash whose keys are the ENV values, and whose values are the corresponding ENV names:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["invert","Hash","Hash.html#method-i-invert","()","<p>Returns a new Hash object with the each key-value pair inverted:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h1</span> = <span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">invert</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["io_read","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-io_read","()","<p>Invoked by IO#read to read <code>length</code> bytes from <code>io</code> into a specified <code>buffer</code> (see IO::Buffer).\n<p>The <code>length</code> argument …\n"],["io_wait","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-io_wait","()","<p>Invoked by IO#wait, IO#wait_readable, IO#wait_writable to ask whether the specified descriptor is ready …\n"],["io_write","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-io_write","()","<p>Invoked by IO#write to write <code>length</code> bytes to <code>io</code> from from a specified <code>buffer</code> (see IO::Buffer).\n<p>The <code>length</code> …\n"],["ioctl","IO","IO.html#method-i-ioctl","(p1, p2 = v2)","<p>Invokes Posix system call ioctl(2), which issues a low-level command to an I/O device.\n<p>Issues a low-level …\n"],["is_a?","Object","Object.html#method-i-is_a-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>, or if <em>class</em> is one of the superclasses of <em>obj</em> or modules included …\n"],["isatty","IO","IO.html#method-i-isatty","()","<p>Returns <code>true</code> if the stream is associated with a terminal device (tty), <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>).<span class=\"ruby-identifier\">isatty</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["isdst","Time","Time.html#method-i-isdst","()","<p>Returns <code>true</code> if <code>self</code> is in daylight saving time, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 ...</span>\n</pre>\n"],["issetugid","Process::Sys","Process/Sys.html#method-c-issetugid","()","<p>Returns <code>true</code> if the process was created as a result of an execve(2) system call which had either of the …\n"],["iterator?","Kernel","Kernel.html#method-i-iterator-3F","()","<p>Deprecated.  Use block_given? instead.\n"],["itself","Object","Object.html#method-i-itself","()","<p>Returns the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&quot;my string&quot;</span>\n<span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">itself</span>.<span class=\"ruby-identifier\">object_id</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">object_id</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["join","Array","Array.html#method-i-join","(*args)","<p>Returns the new String formed by joining the array elements after conversion. For each element <code>element</code> …\n"],["join","File","File.html#method-c-join","(*args)","<p>Returns a new string formed by joining the strings using <code>&quot;/&quot;</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">join</span>(<span class=\"ruby-string\">&quot;usr&quot;</span>, <span class=\"ruby-string\">&quot;mail&quot;</span>, <span class=\"ruby-string\">&quot;gumby&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["join","Thread","Thread.html#method-i-join","(*args)","<p>The calling thread will suspend execution and run this <code>thr</code>.\n<p>Does not return until <code>thr</code> exits or until the …\n"],["keep_if","Array","Array.html#method-i-keep_if","()","<p>Retains those elements for which the block returns a truthy value; deletes all other elements; returns …\n"],["keep_if","ENV","ENV.html#method-c-keep_if","()","<p>Yields each environment variable name and its value as a 2-element Array, deleting each environment variable …\n"],["keep_if","Hash","Hash.html#method-i-keep_if","()","<p>Calls the block for each key-value pair; retains the entry if the block returns a truthy value; otherwise …\n"],["keep_script_lines","RubyVM","RubyVM.html#method-c-keep_script_lines","()","<p>Return current <code>keep_script_lines</code> status. Now it only returns <code>true</code> of <code>false</code>, but it can return other objects …\n"],["keep_script_lines=","RubyVM","RubyVM.html#method-c-keep_script_lines-3D","(p1)","<p>It set <code>keep_script_lines</code> flag. If the flag is set, all loaded scripts are recorded in a interpreter process. …\n"],["kernel_sleep","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-kernel_sleep","()","<p>Invoked by Kernel#sleep and Mutex#sleep and is expected to provide an implementation of sleeping in a …\n"],["key","ENV","ENV.html#method-c-key","(p1)","<p>Returns the name of the first environment variable with <code>value</code>, if it exists:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, ...</pre>\n"],["key","Hash","Hash.html#method-i-key","(p1)","<p>Returns the key for the first-found entry with the given <code>value</code> (see Entry Order):\n\n<pre>h = {foo: 0, bar: 2, ...</pre>\n"],["key","KeyError","KeyError.html#method-i-key","()","<p>Return the key caused this KeyError exception.\n"],["key","NoMatchingPatternKeyError","NoMatchingPatternKeyError.html#method-i-key","()","<p>Return the key caused this NoMatchingPatternKeyError exception.\n"],["key?","ENV","ENV.html#method-c-key-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["key?","Hash","Hash.html#method-i-key-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["key?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["key?","Thread","Thread.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a fiber-local variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">me</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>\n<span class=\"ruby-identifier\">me</span>[<span class=\"ruby-value\">:oliver</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["keys","ENV","ENV.html#method-c-keys","()","<p>Returns all variable names in an Array:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># =&gt; [&#39;bar&#39;, ...</span>\n</pre>\n"],["keys","Hash","Hash.html#method-i-keys","()","<p>Returns a new Array containing all keys in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># =&gt; [:foo, :bar, ...</span>\n</pre>\n"],["keys","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-keys","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["keys","Thread","Thread.html#method-i-keys","()","<p>Returns an array of the names of the fiber-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current[:cat] ...</pre>\n"],["keyword_init?","Struct","Struct.html#method-c-keyword_init-3F","()","<p>Returns <code>true</code> if the class was initialized with <code>keyword_init: true</code>. Otherwise returns <code>nil</code> or <code>false</code>.\n<p>Examples: …\n"],["kill","Process","Process.html#method-c-kill","(*args)","<p>Sends the given signal to the specified process id(s) if <em>pid</em> is positive. If <em>pid</em> is zero, <em>signal</em> is sent …\n"],["kill","Thread","Thread.html#method-c-kill","(p1)","<p>Causes the given <code>thread</code> to exit, see also Thread::exit.\n\n<pre>count = 0\na = Thread.new { loop { count += 1 } ...</pre>\n"],["kill","Thread","Thread.html#method-i-kill","()","<p>Terminates <code>thr</code> and schedules another thread to be run, returning the terminated Thread.  If this is the …\n"],["kind_of?","Object","Object.html#method-i-kind_of-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>, or if <em>class</em> is one of the superclasses of <em>obj</em> or modules included …\n"],["label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-label","()","<p>Returns the label of this instruction sequence.\n<p><code>&lt;main&gt;</code> if it’s at the top level, <code>&lt;compiled&gt;</code> …\n"],["label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-label","()","<p>Returns the label of this frame.\n<p>Usually consists of method, class, module, etc names with decoration. …\n"],["lambda","Kernel","Kernel.html#method-i-lambda","()","<p>Equivalent to Proc.new, except the resulting Proc objects check the number of parameters passed when …\n"],["lambda?","Proc","Proc.html#method-i-lambda-3F","()","<p>Returns <code>true</code> if a Proc object is lambda. <code>false</code> if non-lambda.\n<p>The lambda-ness affects argument handling …\n"],["last","Array","Array.html#method-i-last","(*args)","<p>Returns elements from <code>self</code>; <code>self</code> is not modified.\n<p>When no argument is given, returns the last element: …\n"],["last","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-last","(p1)","<p>Returns the last number in this arithmetic sequence, or an array of the last <code>n</code> elements.\n"],["last","Range","Range.html#method-i-last","(*args)","<p>With no argument, returns the last element of <code>self</code>, if it exists:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">last</span>     <span class=\"ruby-comment\"># =&gt; 4</span>\n(<span class=\"ruby-string\">&#39;a&#39;</span><span class=\"ruby-operator\">..</span><span class=\"ruby-string\">&#39;d&#39;</span>).<span class=\"ruby-identifier\">last</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["last_error","Encoding::Converter","Encoding/Converter.html#method-i-last_error","()","<p>Returns an exception object for the last conversion. Returns nil if the last conversion did not produce …\n"],["last_match","Regexp","Regexp.html#method-c-last_match","(*args)","<p>With no argument, returns the value of <code>$!</code>, which is the result of the most recent pattern match (see …\n"],["last_status","Process","Process.html#method-c-last_status","()","<p>Returns the status of the last executed child process in the current thread.\n\n<pre>Process.wait Process.spawn(&quot;ruby&quot;, ...</pre>\n"],["latest_compact_info","GC","GC.html#method-c-latest_compact_info","()","\n<pre>Returns information about object moved in the most recent GC compaction.</pre>\n<p>The returned hash has two keys …\n"],["lazy","Enumerable","Enumerable.html#method-i-lazy","()","<p>Returns an Enumerator::Lazy, which redefines most Enumerable methods to postpone enumeration and enumerate …\n"],["lazy","Enumerator::Lazy","Enumerator/Lazy.html#method-i-lazy","()","<p>Returns self.\n"],["lchmod","File","File.html#method-c-lchmod","(*args)","<p>Equivalent to File::chmod, but does not follow symbolic links (so it will change the permissions associated …\n"],["lchown","File","File.html#method-c-lchown","(*args)","<p>Equivalent to File::chown, but does not follow symbolic links (so it will change the owner associated …\n"],["lcm","Integer","Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple of the two integers. The result is always positive. 0.lcm(x) and x.lcm …\n"],["ldexp","Math","Math.html#method-c-ldexp","(p1, p2)","<p>Returns the value of <code>fraction * 2**exponent</code>.\n<p>Domain of <code>fraction</code>: <code>[0.0, 1.0)</code>.\n<p>Domain of <code>exponent</code>: <code>[0, 1024]</code> …\n"],["length","Array","Array.html#method-i-length","()","<p>Returns the count of elements in <code>self</code>.\n"],["length","ENV","ENV.html#method-c-length","()","<p>Returns the count of environment variables:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 2 ...</span>\n</pre>\n"],["length","Hash","Hash.html#method-i-length","()","<p>Returns the count of entries in <code>self</code>:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 3</span>\n</pre>\n<p>Hash#length is an alias for …\n"],["length","MatchData","MatchData.html#method-i-length","()","<p>Returns size of the match array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; ...</span>\n</pre>\n"],["length","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-length","()","<p>Returns the number of referenced objects\n"],["length","String","String.html#method-i-length","()","<p>Returns the count of characters (not bytes) in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">length</span>        <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">length</span>       <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["length","Struct","Struct.html#method-i-length","()","<p>Returns the number of members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe Smith&quot;, ...</pre>\n"],["length","Symbol","Symbol.html#method-i-length","()","<p>Equivalent to <code>self.to_s.length</code>; see String#length.\n<p>Symbol#size is an alias for Symbol#length.\n"],["length","Thread::Queue","Thread/Queue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","Thread::SizedQueue","Thread/SizedQueue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["lex_state_name","Ripper","Ripper.html#method-c-lex_state_name","(p1)","<p>Returns a string representation of lex_state.\n"],["lgamma","Math","Math.html#method-c-lgamma","(p1)","<p>Returns a 2-element array equivalent to:\n\n<pre class=\"ruby\">[<span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">log</span>(<span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">gamma</span>(<span class=\"ruby-identifier\">x</span>).<span class=\"ruby-identifier\">abs</span>), <span class=\"ruby-constant\">Math</span>.<span class=\"ruby-identifier\">gamma</span>(<span class=\"ruby-identifier\">x</span>) <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-value\">0</span> <span class=\"ruby-operator\">?</span> <span class=\"ruby-value\">-1</span> <span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>]\n</pre>\n<p>See …\n"],["limit","Thread::Backtrace","Thread/Backtrace.html#method-c-limit","()","<p>Returns maximum backtrace length set by <code>--backtrace-limit</code> command-line option. The defalt is <code>-1</code> which …\n"],["lineno","ARGF","ARGF.html#method-i-lineno","()","<p>Returns the current line number of ARGF as a whole. This value can be set manually with ARGF.lineno= …\n"],["lineno","IO","IO.html#method-i-lineno","()","<p>Returns the current line number for the stream. See Line Number.\n"],["lineno","Ripper","Ripper.html#method-i-lineno","()","<p>Return line number of current parsing line. This number starts from 1.\n"],["lineno","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-lineno","()","<p>Returns the line number of this frame.\n<p>For example, using <code>caller_locations.rb</code> from Thread::Backtrace::Location …\n"],["lineno=","ARGF","ARGF.html#method-i-lineno-3D","(p1)","<p>Sets the line number of ARGF as a whole to the given Integer.\n<p>ARGF sets the line number automatically …\n"],["lineno=","IO","IO.html#method-i-lineno-3D","(p1)","<p>Sets and returns the line number for the stream. See Line Number.\n"],["lines","String","String.html#method-i-lines","(*args)","<p>Forms substrings (“lines”) of <code>self</code> according to the given arguments (see String#each_line for …\n"],["link","File","File.html#method-c-link","(p1, p2)","<p>Creates a new name for an existing file using a hard link. Will not overwrite <em>new_name</em> if it already …\n"],["list","Encoding","Encoding.html#method-c-list","()","<p>Returns the list of loaded encodings.\n\n<pre>Encoding.list\n#=&gt; [#&lt;Encoding:ASCII-8BIT&gt;, #&lt;Encoding:UTF-8&gt;,\n  ...</pre>\n"],["list","Signal","Signal.html#method-c-list","()","<p>Returns a list of signal names mapped to the corresponding underlying signal numbers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Signal</span>.<span class=\"ruby-identifier\">list</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["list","Thread","Thread.html#method-c-list","()","<p>Returns an array of Thread objects for all threads that are either runnable or stopped.\n\n<pre>Thread.new { sleep(200) ...</pre>\n"],["list","ThreadGroup","ThreadGroup.html#method-i-list","()","<p>Returns an array of all existing Thread objects that belong to this group.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ThreadGroup</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Default</span>.<span class=\"ruby-identifier\">list</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ljust","String","String.html#method-i-ljust","(*args)","<p>Returns a left-justified copy of <code>self</code>.\n<p>If integer argument <code>size</code> is greater than the size (in characters) …\n"],["load","Kernel","Kernel.html#method-i-load","(p1, p2 = v2)","<p>Loads and executes the Ruby program in the file <em>filename</em>.\n<p>If the filename is an absolute path (e.g. starts …\n"],["load_from_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary","(p1)","<p>Load an iseq object from binary format String object created by RubyVM::InstructionSequence.to_binary …\n"],["load_from_binary_extra_data","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary_extra_data","(p1)","<p>Load extra data embed into binary format String object.\n"],["local","Time","Time.html#method-c-local","(*args)","<p>Like Time.utc, except that the returned Time object has the local timezone, not the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># With ...</span>\n</pre>\n"],["local_variable_defined?","Binding","Binding.html#method-i-local_variable_defined-3F","(p1)","<p>Returns <code>true</code> if a local variable <code>symbol</code> exists.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_defined?(:a) ...</pre>\n"],["local_variable_get","Binding","Binding.html#method-i-local_variable_get","(p1)","<p>Returns the value of the local variable <code>symbol</code>.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_get(:a) #=&gt; 1 ...</pre>\n"],["local_variable_set","Binding","Binding.html#method-i-local_variable_set","(p1, p2)","<p>Set local variable named <code>symbol</code> as <code>obj</code>.\n\n<pre>def foo\n  a = 1\n  bind = binding\n  bind.local_variable_set(:a, ...</pre>\n"],["local_variables","Binding","Binding.html#method-i-local_variables","()","<p>Returns the names of the binding’s local variables as symbols.\n\n<pre>def foo\n  a = 1\n  2.times do |n|\n  ...</pre>\n"],["local_variables","Kernel","Kernel.html#method-i-local_variables","()","<p>Returns the names of the current local variables.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fred</span> = <span class=\"ruby-value\">1</span>\n<span class=\"ruby-keyword\">for</span> <span class=\"ruby-identifier\">i</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>\n   <span class=\"ruby-comment\"># ...</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">local_variables</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["local_variables","NameError","NameError.html#method-i-local_variables","()","<p>Return a list of the local variable names defined where this NameError exception was raised.\n<p>Internal …\n"],["locale_charmap","Encoding","Encoding.html#method-c-locale_charmap","()","<p>Returns the locale charmap name. It returns nil if no appropriate information.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Debian</span> <span class=\"ruby-constant\">GNU</span><span class=\"ruby-operator\">/</span><span class=\"ruby-constant\">Linux</span>\n  <span class=\"ruby-constant\">LANG</span>=<span class=\"ruby-constant\">C</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["localtime","Time","Time.html#method-i-localtime","(*args)","<p>With no argument given:\n<p>Returns <code>self</code> if <code>self</code> is a local time.\n<p>Otherwise returns a new Time in the user’s …\n"],["lock","Thread::Mutex","Thread/Mutex.html#method-i-lock","()","<p>Attempts to grab the lock and waits if it isn’t available. Raises <code>ThreadError</code> if <code>mutex</code> was locked …\n"],["locked","IO::Buffer","IO/Buffer.html#method-i-locked","()","<p>Allows to process a buffer in exclusive way, for concurrency-safety. While the block is performed, the …\n"],["locked?","IO::Buffer","IO/Buffer.html#method-i-locked-3F","()","<p>If the buffer is <em>locked</em>, meaning it is inside #locked block execution. Locked buffer can’t be resized …\n"],["locked?","Thread::Mutex","Thread/Mutex.html#method-i-locked-3F","()","<p>Returns <code>true</code> if this lock is currently held by some thread.\n"],["log","Math","Math.html#method-c-log","(*args)","<p>Returns the base <code>base</code> logarithm of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY)]</code>.\n"],["log10","Math","Math.html#method-c-log10","(p1)","<p>Returns the base 10 logarithm of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["log2","Math","Math.html#method-c-log2","(p1)","<p>Returns the base 2 logarithm of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code>.\n"],["loop","Kernel","Kernel.html#method-i-loop","()","<p>Repeatedly executes the block.\n<p>If no block is given, an enumerator is returned instead.\n\n<pre>loop do\n  print ...</pre>\n"],["lstat","File","File.html#method-c-lstat","(p1)","<p>Like File::stat, but does not follow the last symbolic link; instead, returns a File::Stat object for …\n"],["lstat","File","File.html#method-i-lstat","()","<p>Like File#stat, but does not follow the last symbolic link; instead, returns a File::Stat object for …\n"],["lstrip","String","String.html#method-i-lstrip","()","<p>Returns a copy of <code>self</code> with leading whitespace removed; see Whitespace in Strings:\n\n<pre>whitespace = &quot;\\x00\\t\\n\\v\\f\\r ...</pre>\n"],["lstrip!","String","String.html#method-i-lstrip-21","()","<p>Like String#lstrip, except that any modifications are made in <code>self</code>; returns <code>self</code> if any modification …\n"],["lutime","File","File.html#method-c-lutime","(*args)","<p>Sets the access and modification times of each named file to the first two arguments. If a file is a …\n"],["magnitude","Complex","Complex.html#method-i-magnitude","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["magnitude","Numeric","Numeric.html#method-i-magnitude","()","<p>Returns the absolute value of <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>        <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["magnitude","Rational","Rational.html#method-i-magnitude","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n(<span class=\"ruby-value\">-1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2r</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n<p>Rational#magnitude is …\n"],["main","Thread","Thread.html#method-c-main","()","<p>Returns the main thread.\n"],["malloc_allocated_size","GC","GC.html#method-c-malloc_allocated_size","()","<p>Returns the size of memory allocated by malloc().\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["malloc_allocations","GC","GC.html#method-c-malloc_allocations","()","<p>Returns the number of malloc() allocations.\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["map","Array","Array.html#method-i-map","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array whose elements are the return …\n"],["map","Enumerable","Enumerable.html#method-i-map","()","<p>Returns an array of objects returned by the block.\n<p>With a block given, calls the block with successive …\n"],["map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-map","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["map","IO::Buffer","IO/Buffer.html#method-c-map","(*args)","<p>Create an IO::Buffer for reading from <code>file</code> by memory-mapping the file. <code>file_io</code> should be a <code>File</code> instance, …\n"],["map!","Array","Array.html#method-i-map-21","()","<p>Calls the block, if given, with each element; replaces the element with the block’s return value: …\n"],["mapped?","IO::Buffer","IO/Buffer.html#method-i-mapped-3F","()","<p>If the buffer is <em>mapped</em>, meaning it references memory mapped by the buffer.\n<p>Mapped buffers are either …\n"],["match","MatchData","MatchData.html#method-i-match","(p1)","<p>Returns the matched substring corresponding to the given argument.\n<p>When non-negative argument <code>n</code> is given, …\n"],["match","Regexp","Regexp.html#method-i-match","(p1, p2 = v2)","<p>With no block given, returns the MatchData object that describes the match, if any, or <code>nil</code> if none; the …\n"],["match","String","String.html#method-i-match","(*args)","<p>Returns a Matchdata object (or <code>nil</code>) based on <code>self</code> and the given <code>pattern</code>.\n<p>Note: also updates Regexp@Special+global+variables …\n"],["match","Symbol","Symbol.html#method-i-match","(*args)","<p>Equivalent to <code>self.to_s.match</code>, including possible updates to global variables; see String#match.\n"],["match?","Regexp","Regexp.html#method-i-match-3F","(*args)","<p>Returns <code>true</code> or <code>false</code> to indicate whether the regexp is matched or not without updating $~ and other …\n"],["match?","String","String.html#method-i-match-3F","(*args)","<p>Returns <code>true</code> or <code>false</code> based on whether a match is found for <code>self</code> and <code>pattern</code>.\n<p>Note: does not update Regexp@Special+global+variables …\n"],["match?","Symbol","Symbol.html#method-i-match-3F","(*args)","<p>Equivalent to <code>sym.to_s.match?</code>; see String#match.\n"],["match_length","MatchData","MatchData.html#method-i-match_length","(p1)","<p>Returns the length (in characters) of the matched substring corresponding to the given argument.\n<p>When …\n"],["matchee","NoMatchingPatternKeyError","NoMatchingPatternKeyError.html#method-i-matchee","()","<p>Return the matchee associated with this NoMatchingPatternKeyError exception.\n"],["max","Array","Array.html#method-i-max","(*args)","<p>Returns one of the following:\n<p>The maximum-valued element from <code>self</code>.\n<p>A new Array of maximum-valued elements …\n"],["max","Enumerable","Enumerable.html#method-i-max","(*args)","<p>Returns the element with the maximum element according to a given criterion. The ordering of equal elements …\n"],["max","Range","Range.html#method-i-max","(*args)","<p>Returns the maximum value in <code>self</code>, using method <code>&lt;=&gt;</code> or a given block for comparison.\n<p>With no argument …\n"],["max","Thread::SizedQueue","Thread/SizedQueue.html#method-i-max","()","<p>Returns the maximum size of the queue.\n"],["max=","Thread::SizedQueue","Thread/SizedQueue.html#method-i-max-3D","(p1)","<p>Sets the maximum size of the queue to the given <code>number</code>.\n"],["max_by","Enumerable","Enumerable.html#method-i-max_by","(*args)","<p>Returns the elements for which the block returns the maximum values.\n<p>With a block given and no argument, …\n"],["maxgroups","Process","Process.html#method-c-maxgroups","()","<p>Returns the maximum number of GIDs allowed in the supplemental group access list.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">maxgroups</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["maxgroups=","Process","Process.html#method-c-maxgroups-3D","(p1)","<p>Sets the maximum number of GIDs allowed in the supplemental group access list.\n"],["mday","Time","Time.html#method-i-mday","()","<p>Returns the integer day of the month for <code>self</code>, in range (1..31):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["member?","ENV","ENV.html#method-c-member-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["member?","Enumerable","Enumerable.html#method-i-member-3F","(p1)","<p>Returns whether for any element <code>object == element</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)                       <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["member?","Hash","Hash.html#method-i-member-3F","(p1)","<p>Methods #has_key?, #key?, and #member? are aliases for #include?.\n<p>Returns <code>true</code> if <code>key</code> is a key in <code>self</code> …\n"],["member?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["member?","Range","Range.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>object</code> is an element of <code>self</code>, <code>false</code> otherwise:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span>)        <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["members","Data","Data.html#method-c-members","()","<p>Returns an array of member names of the data class:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Measure</span> = <span class=\"ruby-constant\">Data</span>.<span class=\"ruby-identifier\">define</span>(<span class=\"ruby-value\">:amount</span>, <span class=\"ruby-value\">:unit</span>)\n<span class=\"ruby-constant\">Measure</span>.<span class=\"ruby-identifier\">members</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["members","Data","Data.html#method-i-members","()","<p>Returns the member names from <code>self</code> as an array:\n\n<pre>Measure = Data.define(:amount, :unit)\ndistance = Measure[10, ...</pre>\n"],["members","Struct","Struct.html#method-c-members","()","<p>Returns the member names of the Struct descendant as an array:\n\n<pre>Customer = Struct.new(:name, :address, ...</pre>\n"],["members","Struct","Struct.html#method-i-members","()","<p>Returns the member names from <code>self</code> as an array:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>)\n<span class=\"ruby-constant\">Customer</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">members</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["merge","Hash","Hash.html#method-i-merge","(*args)","<p>Returns the new Hash formed by merging each of <code>other_hashes</code> into a copy of <code>self</code>.\n<p>Each argument in <code>other_hashes</code> …\n"],["merge!","ENV","ENV.html#method-c-merge-21","(*args)","<p>ENV.update is an alias for ENV.merge!.\n<p>Adds to ENV each key/value pair in the given <code>hash</code>; returns ENV: …\n"],["merge!","Hash","Hash.html#method-i-merge-21","(*args)","<p>Merges each of <code>other_hashes</code> into <code>self</code>; returns <code>self</code>.\n<p>Each argument in <code>other_hashes</code> must be a Hash.\n<p>Method …\n"],["message","Exception","Exception.html#method-i-message","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this returns the exception’s message or name. …\n"],["method","Object","Object.html#method-i-method","(p1)","<p>Looks up the named method as a receiver in <em>obj</em>, returning a Method object (or raising NameError). The …\n"],["method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-method","(foo, bar)","<p>This method is documented only by RDoc, except for these comments.\n<p>Click on the calling sequence to see …\n"],["method_defined?","Module","Module.html#method-i-method_defined-3F","(*args)","<p>Returns <code>true</code> if the named method is defined by <em>mod</em>.  If <em>inherit</em> is set, the lookup will also search  …\n"],["method_missing","Ractor::MovedObject","Ractor/MovedObject.html#method-i-method_missing","(*args)",""],["methods","Object","Object.html#method-i-methods","(*args)","<p>Returns a list of the names of public and protected methods of <em>obj</em>. This will include all the methods …\n"],["min","Array","Array.html#method-i-min","(*args)","<p>Returns one of the following:\n<p>The minimum-valued element from <code>self</code>.\n<p>A new Array of minimum-valued elements …\n"],["min","Enumerable","Enumerable.html#method-i-min","(*args)","<p>Returns the element with the minimum element according to a given criterion. The ordering of equal elements …\n"],["min","Range","Range.html#method-i-min","(*args)","<p>Returns the minimum value in <code>self</code>, using method <code>&lt;=&gt;</code> or a given block for comparison.\n<p>With no argument …\n"],["min","Time","Time.html#method-i-min","()","<p>Returns the integer minute of the hour for <code>self</code>, in range (0..59):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["min_by","Enumerable","Enumerable.html#method-i-min_by","(*args)","<p>Returns the elements for which the block returns the minimum values.\n<p>With a block given and no argument, …\n"],["minmax","Array","Array.html#method-i-minmax","()","<p>Returns a new 2-element Array containing the minimum and maximum values from <code>self</code>, either per method …\n"],["minmax","Enumerable","Enumerable.html#method-i-minmax","()","<p>Returns a 2-element array containing the minimum and maximum elements according to a given criterion. …\n"],["minmax","Range","Range.html#method-i-minmax","()","<p>Returns a 2-element array containing the minimum and maximum value in <code>self</code>, either according to comparison …\n"],["minmax_by","Enumerable","Enumerable.html#method-i-minmax_by","()","<p>Returns a 2-element array containing the elements for which the block returns minimum and maximum values: …\n"],["mkdir","Dir","Dir.html#method-c-mkdir","(p1, p2 = v2)","<p>Makes a new directory named by <em>string</em>, with permissions specified by the optional parameter <em>anInteger</em> …\n"],["mkfifo","File","File.html#method-c-mkfifo","(*args)","<p>Creates a FIFO special file with name <em>file_name</em>.  <em>mode</em> specifies the FIFO’s permissions. It is modified …\n"],["mktime","Time","Time.html#method-c-mktime","(*args)","<p>Like Time.utc, except that the returned Time object has the local timezone, not the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># With ...</span>\n</pre>\n"],["mode","File::Stat","File/Stat.html#method-i-mode","()","<p>Returns an integer representing the permission bits of <em>stat</em>. The meaning of the bits is platform dependent; …\n"],["module_eval","Module","Module.html#method-i-module_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that when a block is given, constant/class …\n"],["module_exec","Module","Module.html#method-i-module_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method defined in the block will belong …\n"],["modulo","Float","Float.html#method-i-modulo","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a float.\n<p>For float <code>f</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["modulo","Integer","Integer.html#method-i-modulo","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>For integer <code>n</code> and real number <code>r</code>, these expressions are equivalent: …\n"],["modulo","Numeric","Numeric.html#method-i-modulo","(p1)","<p>Returns <code>self</code> modulo <code>other</code> as a real number.\n<p>Of the Core and Standard Library classes, only Rational uses …\n"],["mon","Time","Time.html#method-i-mon","()","<p>Returns the integer month of the year for <code>self</code>, in range (1..12):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["monday?","Time","Time.html#method-i-monday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Monday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-03 00:00:00 ...</span>\n</pre>\n"],["month","Time","Time.html#method-i-month","()","<p>Returns the integer month of the year for <code>self</code>, in range (1..12):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mtbl","RubyVM","RubyVM.html#method-c-mtbl","(p1, p2)",""],["mtbl2","RubyVM","RubyVM.html#method-c-mtbl2","(p1, p2)",""],["mtime","File","File.html#method-c-mtime","(p1)","<p>Returns the modification time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">mtime</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mtime","File","File.html#method-i-mtime","()","<p>Returns the modification time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["mtime","File::Stat","File/Stat.html#method-i-mtime","()","<p>Returns the modification time of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["name","Encoding","Encoding.html#method-i-name","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["name","Method","Method.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","Module","Module.html#method-i-name","()","<p>Returns the name of the module <em>mod</em>.  Returns nil for anonymous modules.\n"],["name","NameError","NameError.html#method-i-name","()","<p>Return the name associated with this NameError exception.\n"],["name","Symbol","Symbol.html#method-i-name","()","<p>Returns a frozen string representation of <code>self</code> (not including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">name</span>         <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["name","Thread","Thread.html#method-i-name","()","<p>show the name of the thread.\n"],["name","UnboundMethod","UnboundMethod.html#method-i-name","()","<p>Returns the name of the method.\n"],["name=","Thread","Thread.html#method-i-name-3D","(p1)","<p>set given name to the ruby thread. On some platform, it may set the name to pthread and/or kernel.\n"],["name_list","Encoding","Encoding.html#method-c-name_list","()","<p>Returns the list of available encoding names.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">name_list</span>\n<span class=\"ruby-comment\">#=&gt; [&quot;US-ASCII&quot;, &quot;ASCII-8BIT&quot;, &quot;UTF-8&quot;, ...</span>\n</pre>\n"],["named_captures","MatchData","MatchData.html#method-i-named_captures","()","<p>Returns a hash of the named captures; each key is a capture name; each value is its captured string or …\n"],["named_captures","Regexp","Regexp.html#method-i-named_captures","()","<p>Returns a hash representing named captures of <code>self</code> (see Named Captures):\n<p>Each key is the name of a named …\n"],["names","Encoding","Encoding.html#method-i-names","()","<p>Returns the list of name and aliases of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">WINDOWS_31J</span>.<span class=\"ruby-identifier\">names</span>  <span class=\"ruby-comment\">#=&gt; [&quot;Windows-31J&quot;, ...</span>\n</pre>\n"],["names","MatchData","MatchData.html#method-i-names","()","<p>Returns an array of the capture names (see Named Captures):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;hoge&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["names","Regexp","Regexp.html#method-i-names","()","<p>Returns an array of names of captures (see Named Captures):\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/</span>.<span class=\"ruby-identifier\">names</span> <span class=\"ruby-comment\"># =&gt; [&quot;foo&quot;, ...</span>\n</pre>\n"],["nan?","Float","Float.html#method-i-nan-3F","()","<p>Returns <code>true</code> if <code>self</code> is a NaN, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">-1.0</span>     <span class=\"ruby-comment\">#=&gt; -1.0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">nan?</span>       <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">0.0</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">0.0</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["native_thread_id","Thread","Thread.html#method-i-native_thread_id","()","<p>Return the native thread ID which is used by the Ruby thread.\n<p>The ID depends on the OS. (not POSIX thread …\n"],["negative?","Numeric","Numeric.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>self</code> is less than 0, <code>false</code> otherwise.\n"],["negative?","Rational","Rational.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>rat</code> is less than 0.\n"],["nesting","Module","Module.html#method-c-nesting","()","<p>Returns the list of <code>Modules</code> nested at the point of call.\n\n<pre>module M1\n  module M2\n    $a = Module.nesting ...</pre>\n"],["new","Array","Array.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new Array.\n<p>With no block and no arguments, returns a new empty Array object.\n<p>With no block and …\n"],["new","BasicObject","BasicObject.html#method-c-new","()","<p>Returns a new BasicObject.\n"],["new","Class","Class.html#method-i-new","(*args)","<p>Calls #allocate to create a new object of <em>class</em>’s class, then invokes that object’s #initialize …\n"],["new","Class","Class.html#method-c-new","(*args)","<p>Creates a new anonymous (unnamed) class with the given superclass (or Object if no parameter is given). …\n"],["new","Data","Data.html#method-c-new","(*args)","<p>Constructors for classes defined with ::define accept both positional and keyword arguments.\n\n<pre>Measure = ...</pre>\n"],["new","Encoding::Converter","Encoding/Converter.html#method-c-new","(*args)","<p>possible options elements:\n\n<pre>hash form:\n  :invalid =&gt; nil            # raise error on invalid byte sequence ...</pre>\n"],["new","Enumerator","Enumerator.html#method-c-new","(*args)","<p>Creates a new Enumerator object, which can be used as an Enumerable.\n<p>Iteration is defined by the given …\n"],["new","Enumerator::Chain","Enumerator/Chain.html#method-c-new","(*args)","<p>Generates a new enumerator object that iterates over the elements of given enumerable objects in sequence. …\n"],["new","Enumerator::Lazy","Enumerator/Lazy.html#method-c-new","(*args)","<p>Creates a new Lazy enumerator. When the enumerator is actually enumerated (e.g. by calling #force),  …\n"],["new","Enumerator::Product","Enumerator/Product.html#method-c-new","(*args)","<p>Generates a new enumerator object that generates a Cartesian product of given enumerable objects.\n\n<pre>e = ...</pre>\n"],["new","Exception","Exception.html#method-c-new","(*args)","<p>Construct a new Exception object, optionally passing in a message.\n"],["new","Fiber","Fiber.html#method-c-new","(*args)","<p>Creates new Fiber. Initially, the fiber is not running and can be resumed with #resume. Arguments to …\n"],["new","Fiber::Pool","Fiber/Pool.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3)",""],["new","File","File.html#method-c-new","(*args)","<p>Opens the file at the given <code>path</code> according to the given <code>mode</code>; creates and returns a new File object for …\n"],["new","File::Stat","File/Stat.html#method-c-new","(p1)","<p>Create a File::Stat object for the given file name (raising an exception if the file doesn’t exist). …\n"],["new","FrozenError","FrozenError.html#method-c-new","(*args, p2 = {})","<p>Construct a new FrozenError exception. If given the <em>receiver</em> parameter may subsequently be examined using …\n"],["new","Hash","Hash.html#method-c-new","(*args)","<p>Returns a new empty Hash object.\n<p>The initial default value and initial default proc for the new hash depend …\n"],["new","IO","IO.html#method-c-new","(p1, p2 = v2, p3 = {})","<p>Creates and returns a new IO object (file stream) from a file descriptor.\n<p>IO.new may be useful for interaction …\n"],["new","IO::Buffer","IO/Buffer.html#method-c-new","(*args)","<p>Create a new zero-filled IO::Buffer of <code>size</code> bytes. By default, the buffer will be <em>internal</em>: directly …\n"],["new","KeyError","KeyError.html#method-c-new","(p1 = v1, p2 = {})","<p>Construct a new <code>KeyError</code> exception with the given message, receiver and key.\n"],["new","Module","Module.html#method-c-new","()","<p>Creates a new anonymous module. If a block is given, it is passed the module object, and the block is …\n"],["new","NameError","NameError.html#method-c-new","(*args, p2 = {})","<p>Construct a new NameError exception. If given the <em>name</em> parameter may subsequently be examined using the …\n"],["new","NoMatchingPatternKeyError","NoMatchingPatternKeyError.html#method-c-new","(p1 = v1, p2 = {})","<p>Construct a new <code>NoMatchingPatternKeyError</code> exception with the given message, matchee and key.\n"],["new","NoMethodError","NoMethodError.html#method-c-new","(*args, p2 = {})","<p>Construct a NoMethodError exception for a method of the given name called with the given arguments.  …\n"],["new","Proc","Proc.html#method-c-new","(*args)","<p>Creates a new Proc object, bound to the current context.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">proc</span> = <span class=\"ruby-constant\">Proc</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-string\">&quot;hello&quot;</span> }\n<span class=\"ruby-identifier\">proc</span>.<span class=\"ruby-identifier\">call</span>   <span class=\"ruby-comment\">#=&gt; &quot;hello&quot;</span>\n</pre>\n"],["new","Random","Random.html#method-c-new","(*args)","<p>Creates a new PRNG using <code>seed</code> to set the initial state. If <code>seed</code> is omitted, the generator is initialized …\n"],["new","Range","Range.html#method-c-new","(p1, p2, p3 = v3)","<p>Returns a new range based on the given objects <code>begin</code> and <code>end</code>. Optional argument <code>exclude_end</code> determines …\n"],["new","Regexp","Regexp.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = {})","<p>With argument <code>string</code> given, returns a new regexp with the given string and options:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = <span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Ripper","Ripper.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new Ripper object. <em>src</em> must be a String, an IO, or an Object which has #gets method.\n<p>This method …\n"],["new","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-new","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an InstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["new","SignalException","SignalException.html#method-c-new","(*args)","<p>Construct a new SignalException object.  <code>sig_name</code> should be a known signal name.\n"],["new","String","String.html#method-c-new","(p1 = v1, p2 = {})","<p>Returns a new String that is a copy of <code>string</code>.\n<p>With no arguments, returns the empty string with the Encoding …\n"],["new","Struct","Struct.html#method-c-new","(*args)","<p><code>Struct.new</code> returns a new subclass of <code>Struct</code>.  The new subclass:\n<p>May be anonymous, or may have the name …\n"],["new","SyntaxError","SyntaxError.html#method-c-new","(*args)","<p>Construct a SyntaxError exception.\n"],["new","SystemCallError","SystemCallError.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>If <em>errno</em> corresponds to a known system error code, constructs the appropriate Errno class for that error, …\n"],["new","SystemExit","SystemExit.html#method-c-new","(*args)","<p>Create a new <code>SystemExit</code> exception with the given status and message. Status is true, false, or an integer. …\n"],["new","Thread","Thread.html#method-c-new","(*args)","<p>Creates a new thread executing the given block.\n<p>Any <code>args</code> given to ::new will be passed to the block:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">arr</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Thread::ConditionVariable","Thread/ConditionVariable.html#method-c-new","()","<p>Creates a new condition variable instance.\n"],["new","Thread::Mutex","Thread/Mutex.html#method-c-new","()","<p>Creates a new Mutex\n"],["new","Thread::Queue","Thread/Queue.html#method-c-new","(p1 = v1)","<p>Creates a new queue instance, optionally using the contents of an <code>enumerable</code> for its initial state.\n<p>Example: …\n"],["new","Thread::SizedQueue","Thread/SizedQueue.html#method-c-new","(p1)","<p>Creates a fixed-length queue with a maximum size of <code>max</code>.\n"],["new","UncaughtThrowError","UncaughtThrowError.html#method-c-new","(*args)","<p>Document-class: UncaughtThrowError\n<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not have corresponding …\n"],["new_seed","Random","Random.html#method-c-new_seed","()","<p>Returns an arbitrary seed value. This is used by Random.new when no seed value is specified as an argument. …\n"],["next","Enumerator","Enumerator.html#method-i-next","()","<p>Returns the next object in the enumerator, and move the internal position forward.  When the position …\n"],["next","Integer","Integer.html#method-i-next","()","<p>Returns the successor integer of <code>self</code> (equivalent to <code>self + 1</code>):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">succ</span>  <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n<p>Integer#next …\n"],["next","String","String.html#method-i-next","()","<p>Returns the successor to <code>self</code>. The successor is calculated by incrementing characters.\n<p>The first character …\n"],["next","Symbol","Symbol.html#method-i-next","()","<p>Equivalent to <code>self.to_s.succ.to_sym</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\"># =&gt; :fop</span>\n</pre>\n<p>Symbol#next is an alias for Symbol#succ.\n"],["next!","String","String.html#method-i-next-21","()","<p>Equivalent to String#succ, but modifies <code>self</code> in place; returns <code>self</code>.\n<p>String#next! is an alias for String#succ! …\n"],["next_float","Float","Float.html#method-i-next_float","()","<p>Returns the next-larger representable Float.\n<p>These examples show the internally stored values (64-bit …\n"],["next_values","Enumerator","Enumerator.html#method-i-next_values","()","<p>Returns the next object as an array in the enumerator, and move the internal position forward.  When …\n"],["nil?","NilClass","NilClass.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to <code>nil?</code>.\n"],["nil?","Object","Object.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to <code>nil?</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">nil?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">nil?</span>          <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["nlink","File::Stat","File/Stat.html#method-i-nlink","()","<p>Returns the number of hard links to <em>stat</em>.\n\n<pre>File.stat(&quot;testfile&quot;).nlink             #=&gt; 1\nFile.link(&quot;testfile&quot;, ...</pre>\n"],["nobits?","Integer","Integer.html#method-i-nobits-3F","(p1)","<p>Returns <code>true</code> if no bit that is set (=1) in <code>mask</code> is also set in <code>self</code>; returns <code>false</code> otherwise.\n<p>Example …\n"],["none?","Array","Array.html#method-i-none-3F","(*args)","<p>Returns <code>true</code> if no element of <code>self</code> meet a given criterion.\n<p>With no block given and no argument, returns …\n"],["none?","Enumerable","Enumerable.html#method-i-none-3F","(*args)","<p>Returns whether no element meets a given criterion.\n<p>With no argument and no block, returns whether no …\n"],["nonzero?","Numeric","Numeric.html#method-i-nonzero-3F","()","<p>Returns <code>self</code> if <code>self</code> is not a zero value, <code>nil</code> otherwise; uses method <code>zero?</code> for the evaluation.\n<p>The returned …\n"],["not!","IO::Buffer","IO/Buffer.html#method-i-not-21","()","<p>Modify the source buffer in place by applying the binary NOT operation to the source.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">source</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">for</span>(<span class=\"ruby-string\">&quot;1234567890&quot;</span>).<span class=\"ruby-identifier\">dup</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["nsec","Time","Time.html#method-i-nsec","()","<p>Returns the number of nanoseconds in the subseconds part of <code>self</code> in the range (0..999_999_999); lower-order …\n"],["null?","IO::Buffer","IO/Buffer.html#method-i-null-3F","()","<p>If the buffer was freed with #free or was never allocated in the first place.\n"],["num_waiting","Thread::Queue","Thread/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["num_waiting","Thread::SizedQueue","Thread/SizedQueue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["numerator","Complex","Complex.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>    1   2       3+4i  &lt;-  numerator\n    - + -i  -&gt;  ----\n    2   3        6    ...</pre>\n"],["numerator","Float","Float.html#method-i-numerator","()","<p>Returns the numerator.  The result is machine dependent.\n\n<pre>n = 0.3.numerator    #=&gt; 5404319552844595\nd = ...</pre>\n"],["numerator","Integer","Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Numeric","Numeric.html#method-i-numerator","()","<p>Returns the numerator.\n"],["numerator","Rational","Rational.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>Rational(7).numerator        #=&gt; 7\nRational(7, 1).numerator     #=&gt; 7\nRational(9, ...</pre>\n"],["object_id","Object","Object.html#method-i-object_id","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for …\n"],["oct","String","String.html#method-i-oct","()","<p>Interprets the leading substring of <code>self</code> as a string of octal digits (with an optional sign) and returns …\n"],["of","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-of","(p1)","<p>Returns the instruction sequence containing the given proc or method.\n<p>For example, using irb:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># a proc ...</span>\n</pre>\n"],["offset","MatchData","MatchData.html#method-i-offset","(p1)","<p>Returns a 2-element array containing the beginning and ending offsets (in characters) of the specified …\n"],["one?","Array","Array.html#method-i-one-3F","(*args)","<p>Returns <code>true</code> if exactly one element of <code>self</code> meets a given criterion.\n<p>With no block given and no argument, …\n"],["one?","Enumerable","Enumerable.html#method-i-one-3F","(*args)","<p>Returns whether exactly one element meets a given criterion.\n<p>With no argument and no block, returns whether …\n"],["open","File","File.html#method-c-open","(*args)","<p>Creates a new File object, via File.new with the given arguments.\n<p>With no block given, returns the File …\n"],["open","IO","IO.html#method-c-open","(*args)","<p>Creates a new IO object, via IO.new with the given arguments.\n<p>With no block given, returns the IO object. …\n"],["open","Kernel","Kernel.html#method-i-open","(*args)","<p>Creates an IO object connected to the given stream, file, or subprocess.\n<p>Required string argument <code>path</code> …\n"],["options","Regexp","Regexp.html#method-i-options","()","<p>Returns an integer whose bits show the options set in <code>self</code>.\n<p>The option bits are:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">IGNORECASE</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["or!","IO::Buffer","IO/Buffer.html#method-i-or-21","(p1)","<p>Modify the source buffer in place by applying the binary OR operation to the source, using the mask, …\n"],["ord","String","String.html#method-i-ord","()","<p>Returns the integer ordinal of the first character of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;h&#39;</span>.<span class=\"ruby-identifier\">ord</span>         <span class=\"ruby-comment\"># =&gt; 104</span>\n<span class=\"ruby-string\">&#39;hello&#39;</span>.<span class=\"ruby-identifier\">ord</span>     <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["original_name","Method","Method.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-keyword\">alias</span> <span class=\"ruby-identifier\">bar</span> <span class=\"ruby-identifier\">foo</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">C</span>.<span class=\"ruby-identifier\">instance_method</span>(<span class=\"ruby-value\">:bar</span>).<span class=\"ruby-identifier\">original_name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["original_name","UnboundMethod","UnboundMethod.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-keyword\">alias</span> <span class=\"ruby-identifier\">bar</span> <span class=\"ruby-identifier\">foo</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">C</span>.<span class=\"ruby-identifier\">instance_method</span>(<span class=\"ruby-value\">:bar</span>).<span class=\"ruby-identifier\">original_name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["owned?","File","File.html#method-c-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used id of the calling process is the owner of …\n"],["owned?","File::Stat","File/Stat.html#method-i-owned-3F","()","<p>Returns <code>true</code> if the effective user id of the process is the same as the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">owned?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["owned?","FileTest","FileTest.html#method-i-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used id of the calling process is the owner of …\n"],["owned?","Thread::Mutex","Thread/Mutex.html#method-i-owned-3F","()","<p>Returns <code>true</code> if this lock is currently held by current thread.\n"],["owner","Method","Method.html#method-i-owner","()","<p>Returns the class or module on which this method is defined. In other words,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">owner</span>.<span class=\"ruby-identifier\">instance_methods</span>(<span class=\"ruby-keyword\">false</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">name</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["owner","UnboundMethod","UnboundMethod.html#method-i-owner","()","<p>Returns the class or module on which this method is defined. In other words,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">owner</span>.<span class=\"ruby-identifier\">instance_methods</span>(<span class=\"ruby-keyword\">false</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-identifier\">meth</span>.<span class=\"ruby-identifier\">name</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["p","Kernel","Kernel.html#method-i-p","(*args)","<p>For each object <code>obj</code>, executes:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">write</span>(<span class=\"ruby-identifier\">obj</span>.<span class=\"ruby-identifier\">inspect</span>, <span class=\"ruby-string\">&quot;\\n&quot;</span>)\n</pre>\n<p>With one object given, returns the object; …\n"],["parameters","Method","Method.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parameters","Proc","Proc.html#method-i-parameters","(p1 = {})","<p>Returns the parameter information of this proc.  If the lambda keyword is provided and not nil, treats …\n"],["parameters","UnboundMethod","UnboundMethod.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parse","Ripper","Ripper.html#method-i-parse","()","<p>Start parsing and returns the value of the root action.\n"],["partition","Enumerable","Enumerable.html#method-i-partition","()","<p>With a block given, returns an array of two arrays:\n<p>The first having those elements for which the block …\n"],["partition","String","String.html#method-i-partition","(p1)","<p>Returns a 3-element array of substrings of <code>self</code>.\n<p>Matches a pattern against <code>self</code>, scanning from the beginning. …\n"],["pass","Thread","Thread.html#method-c-pass","()","<p>Give the thread scheduler a hint to pass execution to another thread. A running thread may or may not …\n"],["path","ARGF","ARGF.html#method-i-path","()","<p>Returns the current filename. “-” is returned when the current file is STDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["path","Dir","Dir.html#method-i-path","()","<p>Returns the path parameter passed to <em>dir</em>’s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["path","File","File.html#method-c-path","(p1)","<p>Returns the string representation of the path\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">path</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)          <span class=\"ruby-comment\">#=&gt; &quot;/dev/null&quot;</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">path</span>(<span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["path","File","File.html#method-i-path","()","<p>Returns the string filepath used to create <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>) <span class=\"ruby-comment\"># =&gt; #&lt;File:t.txt&gt;</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">path</span>      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-path","()","<p>Returns the path of this instruction sequence.\n<p><code>&lt;compiled&gt;</code> if the iseq was evaluated from a string. …\n"],["path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-path","()","<p>Returns the file name of this frame. This will generally be an absolute path, unless the frame is in …\n"],["peek","Enumerator","Enumerator.html#method-i-peek","()","<p>Returns the next object in the enumerator, but doesn’t move the internal position forward.  If the …\n"],["peek_values","Enumerator","Enumerator.html#method-i-peek_values","()","<p>Returns the next object as an array, similar to Enumerator#next_values, but doesn’t move the internal …\n"],["pending_interrupt?","Thread","Thread.html#method-c-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty.\n<p>Since Thread::handle_interrupt can be used to …\n"],["pending_interrupt?","Thread","Thread.html#method-i-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty for the target thread.\n<p>If <code>error</code> is given, then …\n"],["permutation","Array","Array.html#method-i-permutation","(*args)","<p>When invoked with a block, yield all permutations of elements of <code>self</code>; returns <code>self</code>. The order of permutations …\n"],["phase","Complex","Complex.html#method-i-phase","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["phase","Float","Float.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["phase","Numeric","Numeric.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["pid","IO","IO.html#method-i-pid","()","<p>Returns the process ID of a child process associated with the stream, which will have been set by IO#popen …\n"],["pid","Process","Process.html#method-c-pid","()","<p>Returns the process id of this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">pid</span>   <span class=\"ruby-comment\">#=&gt; 27415</span>\n</pre>\n"],["pid","Process::Status","Process/Status.html#method-i-pid","()","<p>Returns the process ID that this status object represents.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> }   <span class=\"ruby-comment\">#=&gt; 26569</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pipe","IO","IO.html#method-c-pipe","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a pair of pipe endpoints, <code>read_io</code> and <code>write_io</code>, connected to each other.\n<p>If argument <code>enc_string</code> …\n"],["pipe?","File","File.html#method-c-pipe-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a pipe, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">mkfifo</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>)\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">pipe?</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pipe?","File::Stat","File/Stat.html#method-i-pipe-3F","()","<p>Returns <code>true</code> if the operating system supports pipes and <em>stat</em> is a pipe; <code>false</code> otherwise.\n"],["pipe?","FileTest","FileTest.html#method-i-pipe-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a pipe, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">mkfifo</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>)\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">pipe?</span>(<span class=\"ruby-string\">&#39;tmp/fifo&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["polar","Complex","Complex.html#method-c-polar","(p1, p2 = v2)","<p>Returns a complex object which denotes the given polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">0</span>)            <span class=\"ruby-comment\">#=&gt; (3.0+0.0i) ...</span>\n</pre>\n"],["polar","Complex","Complex.html#method-i-polar","()","<p>Returns an array; [cmp.abs, cmp.arg].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">polar</span>  <span class=\"ruby-comment\">#=&gt; [2.23606797749979, 1.1071487177940904]</span>\n</pre>\n"],["polar","Numeric","Numeric.html#method-i-polar","()","<p>Returns an array; [num.abs, num.arg].\n"],["pop","Array","Array.html#method-i-pop","(*args)","<p>Removes and returns trailing elements.\n<p>When no argument is given and <code>self</code> is not empty, removes and returns …\n"],["popen","IO","IO.html#method-c-popen","(*args)","<p>Executes the given command <code>cmd</code> as a subprocess whose $stdin and $stdout are connected to a new stream …\n"],["pos","ARGF","ARGF.html#method-i-pos","()","<p>Returns the current offset (in bytes) of the current file in ARGF.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["pos","Dir","Dir.html#method-i-pos","()","<p>Returns the current position in <em>dir</em>. See also Dir#seek.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">tell</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pos","IO","IO.html#method-i-pos","()","<p>Returns the current position (in bytes) in <code>self</code> (see Position):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">tell</span> <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pos=","ARGF","ARGF.html#method-i-pos-3D","(p1)","<p>Seeks to the position given by <em>position</em> (in bytes) in ARGF.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">17</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pos=","Dir","Dir.html#method-i-pos-3D","(p1)","<p>Synonym for Dir#seek, but returns the position parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3c40&gt; ...</span>\n</pre>\n"],["pos=","IO","IO.html#method-i-pos-3D","(p1)","<p>Seeks to the given <code>new_position</code> (in bytes); see Position:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">tell</span>     <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["positive?","Numeric","Numeric.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>self</code> is greater than 0, <code>false</code> otherwise.\n"],["positive?","Rational","Rational.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>rat</code> is greater than 0.\n"],["post_match","MatchData","MatchData.html#method-i-post_match","()","<p>Returns the substring of the target string from the end of the first match in <code>self</code> (that is, <code>self[0]</code> …\n"],["pow","Integer","Integer.html#method-i-pow","(*args)","<p>Returns (modular) exponentiation as:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">pow</span>(<span class=\"ruby-identifier\">b</span>)     <span class=\"ruby-comment\">#=&gt; same as a**b</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">pow</span>(<span class=\"ruby-identifier\">b</span>, <span class=\"ruby-identifier\">m</span>)  <span class=\"ruby-comment\">#=&gt; same as (a**b) % m, ...</span>\n</pre>\n"],["ppid","Process","Process.html#method-c-ppid","()","<p>Returns the process id of the parent of this process. Returns untrustworthy value on Win32/64. Not available …\n"],["pre_match","MatchData","MatchData.html#method-i-pre_match","()","<p>Returns the substring of the target string from its beginning up to the first match in <code>self</code> (that is, …\n"],["pread","IO","IO.html#method-i-pread","(p1, p2, p3 = v3)","<p>Behaves like IO#readpartial, except that it:\n<p>Reads at the given <code>offset</code> (in bytes).\n<p>Disregards, and does …\n"],["pread","IO::Buffer","IO/Buffer.html#method-i-pread","(p1, p2, p3)",""],["pred","Integer","Integer.html#method-i-pred","()","<p>Returns the predecessor of <code>self</code> (equivalent to <code>self - 1</code>):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">pred</span>  <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">pred</span> <span class=\"ruby-comment\">#=&gt; -2</span>\n</pre>\n<p>Related: Integer#succ …\n"],["prepend","Array","Array.html#method-i-prepend","(*args)","<p>Prepends the given <code>objects</code> to <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">unshift</span>(<span class=\"ruby-value\">:bam</span>, <span class=\"ruby-value\">:bat</span>) <span class=\"ruby-comment\"># =&gt; [:bam, :bat, :foo, ...</span>\n</pre>\n"],["prepend","Module","Module.html#method-i-prepend","(*args)","<p>Invokes Module.prepend_features on each parameter in reverse order.\n"],["prepend","String","String.html#method-i-prepend","(*args)","<p>Prepends each string in <code>other_strings</code> to <code>self</code> and returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">prepend</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;baz&#39;</span>) <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["prev_float","Float","Float.html#method-i-prev_float","()","<p>Returns the next-smaller representable Float.\n<p>These examples show the internally stored values (64-bit …\n"],["primitive_convert","Encoding::Converter","Encoding/Converter.html#method-i-primitive_convert","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = {})","<p>possible opt elements:\n\n<pre>hash form:\n  :partial_input =&gt; true           # source buffer may be part of larger ...</pre>\n"],["primitive_errinfo","Encoding::Converter","Encoding/Converter.html#method-i-primitive_errinfo","()","<p>primitive_errinfo returns important information regarding the last error as a 5-element array:\n\n<pre>[result, ...</pre>\n"],["print","ARGF","ARGF.html#method-i-print","(*args)","<p>Writes the given objects to the stream; returns <code>nil</code>. Appends the output record separator <code>$OUTPUT_RECORD_SEPARATOR</code> …\n"],["print","IO","IO.html#method-i-print","(*args)","<p>Writes the given objects to the stream; returns <code>nil</code>. Appends the output record separator <code>$OUTPUT_RECORD_SEPARATOR</code> …\n"],["print","Kernel","Kernel.html#method-i-print","(*args)","<p>Equivalent to <code>$stdout.print(*objects)</code>, this method is the straightforward way to write to <code>$stdout</code>.\n<p>Writes …\n"],["printf","ARGF","ARGF.html#method-i-printf","(*args)","<p>Formats and writes <code>objects</code> to the stream.\n<p>For details on <code>format_string</code>, see Format Specifications.\n"],["printf","IO","IO.html#method-i-printf","(*args)","<p>Formats and writes <code>objects</code> to the stream.\n<p>For details on <code>format_string</code>, see Format Specifications.\n"],["printf","Kernel","Kernel.html#method-i-printf","(*args)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">io</span>.<span class=\"ruby-identifier\">write</span>(<span class=\"ruby-identifier\">sprintf</span>(<span class=\"ruby-identifier\">format_string</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">objects</span>))\n</pre>\n<p>For details on <code>format_string</code>, see Format Specifications …\n"],["priority","Thread","Thread.html#method-i-priority","()","<p>Returns the priority of <em>thr</em>. Default is inherited from the current thread which creating the new thread, …\n"],["priority=","Thread","Thread.html#method-i-priority-3D","(p1)","<p>Sets the priority of <em>thr</em> to <em>integer</em>. Higher-priority threads will run more frequently than lower-priority …\n"],["private_call?","NoMethodError","NoMethodError.html#method-i-private_call-3F","()","<p>Return true if the caused method was called as private.\n"],["private_class_method","Module","Module.html#method-i-private_class_method","(*args)","<p>Makes existing class methods private. Often used to hide the default constructor <code>new</code>.\n<p>String arguments …\n"],["private_constant","Module","Module.html#method-i-private_constant","(*args)","<p>Makes a list of existing constants private.\n"],["private_instance_methods","Module","Module.html#method-i-private_instance_methods","(*args)","<p>Returns a list of the private instance methods defined in <em>mod</em>. If the optional parameter is <code>false</code>, the …\n"],["private_method_defined?","Module","Module.html#method-i-private_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named private method is defined by <em>mod</em>.  If <em>inherit</em> is set, the lookup will also …\n"],["private_methods","Object","Object.html#method-i-private_methods","(*args)","<p>Returns the list of private methods accessible to <em>obj</em>. If the <em>all</em> parameter is set to <code>false</code>, only those …\n"],["proc","Kernel","Kernel.html#method-i-proc","()","<p>Equivalent to Proc.new.\n"],["process_wait","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-process_wait","()","<p>Invoked by Process::Status.wait in order to wait for a specified process. See that method description …\n"],["produce","Enumerator","Enumerator.html#method-c-produce","(p1 = v1)","<p>Creates an infinite enumerator from any block, just called over and over.  The result of the previous …\n"],["product","Array","Array.html#method-i-product","(*args)","<p>Computes and returns or yields all combinations of elements from all the Arrays, including both <code>self</code> …\n"],["product","Enumerator","Enumerator.html#method-c-product","(*args)","<p>Generates a new enumerator object that generates a Cartesian product of given enumerable objects.  This …\n"],["protected_instance_methods","Module","Module.html#method-i-protected_instance_methods","(*args)","<p>Returns a list of the protected instance methods defined in <em>mod</em>. If the optional parameter is <code>false</code>, …\n"],["protected_method_defined?","Module","Module.html#method-i-protected_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named protected method is defined <em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["protected_methods","Object","Object.html#method-i-protected_methods","(*args)","<p>Returns the list of protected methods accessible to <em>obj</em>. If the <em>all</em> parameter is set to <code>false</code>, only those …\n"],["public_class_method","Module","Module.html#method-i-public_class_method","(*args)","<p>Makes a list of existing class methods public.\n<p>String arguments are converted to symbols. An Array of …\n"],["public_constant","Module","Module.html#method-i-public_constant","(*args)","<p>Makes a list of existing constants public.\n"],["public_instance_method","Module","Module.html#method-i-public_instance_method","(p1)","<p>Similar to <em>instance_method</em>, searches public method only.\n"],["public_instance_methods","Module","Module.html#method-i-public_instance_methods","(*args)","<p>Returns a list of the public instance methods defined in <em>mod</em>. If the optional parameter is <code>false</code>, the …\n"],["public_method","Object","Object.html#method-i-public_method","(p1)","<p>Similar to <em>method</em>, searches public method only.\n"],["public_method_defined?","Module","Module.html#method-i-public_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named public method is defined by <em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["public_methods","Object","Object.html#method-i-public_methods","(*args)","<p>Returns the list of public methods accessible to <em>obj</em>. If the <em>all</em> parameter is set to <code>false</code>, only those …\n"],["public_send","Object","Object.html#method-i-public_send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments specified. Unlike send, public_send …\n"],["push","Array","Array.html#method-i-push","(*args)","<p>Appends trailing elements.\n<p>Appends each argument in <code>objects</code> to <code>self</code>;  returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["push","Thread::Queue","Thread/Queue.html#method-i-push","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["putback","Encoding::Converter","Encoding/Converter.html#method-i-putback","(*args)","<p>Put back the bytes which will be converted.\n<p>The bytes are caused by invalid_byte_sequence error. When …\n"],["putc","ARGF","ARGF.html#method-i-putc","(p1)","<p>Writes a character to the stream.\n<p>If <code>object</code> is numeric, converts to integer if necessary, then writes …\n"],["putc","IO","IO.html#method-i-putc","(p1)","<p>Writes a character to the stream.\n<p>If <code>object</code> is numeric, converts to integer if necessary, then writes …\n"],["putc","Kernel","Kernel.html#method-i-putc","(p1)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">putc</span>(<span class=\"ruby-identifier\">int</span>)\n</pre>\n<p>See IO#putc for important information regarding multi-byte characters. …\n"],["puts","ARGF","ARGF.html#method-i-puts","(*args)","<p>Writes the given <code>objects</code> to the stream, which must be open for writing; returns <code>nil</code>.\\ Writes a newline …\n"],["puts","IO","IO.html#method-i-puts","(*args)","<p>Writes the given <code>objects</code> to the stream, which must be open for writing; returns <code>nil</code>.\\ Writes a newline …\n"],["puts","Kernel","Kernel.html#method-i-puts","(*args)","<p>Equivalent to\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">puts</span>(<span class=\"ruby-identifier\">objects</span>)\n</pre>\n"],["pwd","Dir","Dir.html#method-c-pwd","()","<p>Returns the path to the current working directory of this process as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pwrite","IO","IO.html#method-i-pwrite","(p1, p2)","<p>Behaves like IO#write, except that it:\n<p>Writes at the given <code>offset</code> (in bytes).\n<p>Disregards, and does not …\n"],["pwrite","IO::Buffer","IO/Buffer.html#method-i-pwrite","(p1, p2, p3)",""],["quo","Complex","Complex.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; ((1/1)+(0/1)*i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["quo","Float","Float.html#method-i-quo","(p1)","<p>Returns the quotient from dividing <code>self</code> by <code>other</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-value\">3.14</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">2</span>)              <span class=\"ruby-comment\"># =&gt; 1.57</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">quo</span>(<span class=\"ruby-value\">-2</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["quo","Numeric","Numeric.html#method-i-quo","(p1)","<p>Returns the most exact division (rational for integers, float for floats).\n"],["quo","Rational","Rational.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["quote","Regexp","Regexp.html#method-c-quote","(p1)","<p>Returns a new string that escapes any characters that have special meaning in a regular expression:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["raise","Fiber","Fiber.html#method-i-raise","(*args)","<p>Raises an exception in the fiber at the point at which the last <code>Fiber.yield</code> was called. If the fiber …\n"],["raise","Kernel","Kernel.html#method-i-raise","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a RuntimeError if <code>$!</code> is <code>nil</code>.  With a single  …\n"],["raise","Thread","Thread.html#method-i-raise","(*args)","<p>Raises an exception from the given thread. The caller does not have to be <code>thr</code>. See Kernel#raise for more …\n"],["rand","Kernel","Kernel.html#method-i-rand","(*args)","<p>If called without an argument, or if <code>max.to_i.abs == 0</code>, rand returns a pseudo-random floating point number …\n"],["rand","Random","Random.html#method-i-rand","(*args)","<p>When <code>max</code> is an Integer, <code>rand</code> returns a random integer greater than or equal to zero and less than <code>max</code> …\n"],["rand","Random","Random.html#method-c-rand","(*args)","<p>Returns a random number using the Ruby system PRNG.\n<p>See also Random#rand.\n"],["rand","Random::Formatter","Random/Formatter.html#method-i-rand","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["random_number","Random::Formatter","Random/Formatter.html#method-i-random_number","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["rassoc","Array","Array.html#method-i-rassoc","(p1)","<p>Returns the first element in <code>self</code> that is an Array whose second element <code>==</code> <code>obj</code>:\n\n<pre>a = [{foo: 0}, [2, 4], ...</pre>\n"],["rassoc","ENV","ENV.html#method-c-rassoc","(p1)","<p>Returns a 2-element Array containing the name and value of the <strong>first</strong> <strong>found</strong> environment variable that …\n"],["rassoc","Hash","Hash.html#method-i-rassoc","(p1)","<p>Returns a new 2-element Array consisting of the key and value of the first-found entry whose value is …\n"],["rationalize","Complex","Complex.html#method-i-rationalize","(*args)","<p>Returns the value as a rational if possible (the imaginary part should be exactly zero).\n\n<pre>Complex(1.0/3, ...</pre>\n"],["rationalize","Float","Float.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value (flt-|eps| &lt;= result &lt;= flt+|eps|).  If the optional …\n"],["rationalize","Integer","Integer.html#method-i-rationalize","(*args)","<p>Returns the value as a rational.  The optional argument <code>eps</code> is always ignored.\n"],["rationalize","NilClass","NilClass.html#method-i-rationalize","(*args)","<p>Returns zero as a rational.  The optional argument <code>eps</code> is always ignored.\n"],["rationalize","Rational","Rational.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value if the optional argument <code>eps</code> is given (rat-|eps| &lt;= result …\n"],["raw_data","GC::Profiler","GC/Profiler.html#method-c-raw_data","()","<p>Returns an Array of individual raw profile data Hashes ordered from earliest to latest by <code>:GC_INVOKE_TIME</code> …\n"],["rdev","File::Stat","File/Stat.html#method-i-rdev","()","<p>Returns an integer representing the device type on which <em>stat</em> resides. Returns <code>nil</code> if the operating system …\n"],["rdev_major","File::Stat","File/Stat.html#method-i-rdev_major","()","<p>Returns the major part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">rdev_major</span>   <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">rdev_major</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rdev_minor","File::Stat","File/Stat.html#method-i-rdev_minor","()","<p>Returns the minor part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/fd1&quot;</span>).<span class=\"ruby-identifier\">rdev_minor</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/dev/tty&quot;</span>).<span class=\"ruby-identifier\">rdev_minor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["re_exchange","Process::GID","Process/GID.html#method-c-re_exchange","()","<p>Exchange real and effective group IDs and return the new effective group ID. Not available on all platforms. …\n"],["re_exchange","Process::UID","Process/UID.html#method-c-re_exchange","()","<p>Exchange real and effective user IDs and return the new effective user ID. Not available on all platforms. …\n"],["re_exchangeable?","Process::GID","Process/GID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective group IDs of a process may be exchanged on the current platform. …\n"],["re_exchangeable?","Process::UID","Process/UID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective user IDs of a process may be exchanged on the current platform. …\n"],["read","ARGF","ARGF.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from ARGF. The files named on the command line are concatenated and treated as a single …\n"],["read","Dir","Dir.html#method-i-read","()","<p>Reads the next entry from <em>dir</em> and returns it as a string. Returns <code>nil</code> at the end of the stream.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["read","IO","IO.html#method-c-read","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Opens the stream, reads and returns some or all of its content, and closes the stream; returns <code>nil</code> if …\n"],["read","IO","IO.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads bytes from the stream (in binary mode):\n<p>If <code>maxlen</code> is <code>nil</code>, reads all bytes.\n<p>Otherwise reads <code>maxlen</code> …\n"],["read","IO::Buffer","IO/Buffer.html#method-i-read","(p1, p2)",""],["read_nonblock","ARGF","ARGF.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream in non-blocking mode.\n"],["readable?","File","File.html#method-c-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective user and group id of this process. See eaccess(3). …\n"],["readable?","File::Stat","File/Stat.html#method-i-readable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the effective user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">readable?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["readable?","FileTest","FileTest.html#method-i-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective user and group id of this process. See eaccess(3). …\n"],["readable_real?","File","File.html#method-c-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user and group id of this process. See access(3). …\n"],["readable_real?","File::Stat","File/Stat.html#method-i-readable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the real user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">readable_real?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["readable_real?","FileTest","FileTest.html#method-i-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user and group id of this process. See access(3). …\n"],["readagain_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes","()","<p>Returns the bytes to be read again when Encoding::InvalidByteSequenceError occurs.\n"],["readbyte","ARGF","ARGF.html#method-i-readbyte","()","<p>Reads the next 8-bit byte from ARGF and returns it as an Integer. Raises an EOFError after the last byte …\n"],["readbyte","IO","IO.html#method-i-readbyte","()","<p>Reads and returns the next byte (in range 0..255) from the stream; raises EOFError if already at end-of-file: …\n"],["readchar","ARGF","ARGF.html#method-i-readchar","()","<p>Reads the next character from ARGF and returns it as a String. Raises an EOFError after the last character …\n"],["readchar","IO","IO.html#method-i-readchar","()","<p>Reads and returns the next 1-character string from the stream; raises EOFError if already at end-of-file: …\n"],["readline","ARGF","ARGF.html#method-i-readline","(*args)","<p>Returns the next line from the current file in ARGF.\n<p>By default lines are assumed to be separated by  …\n"],["readline","IO","IO.html#method-i-readline","(*args)","<p>Reads a line as with IO#gets, but raises EOFError if already at end-of-file.\n"],["readline","Kernel","Kernel.html#method-i-readline","(*args)","<p>Equivalent to method Kernel#gets, except that it raises an exception if called at end-of-stream:\n\n<pre>$ cat ...</pre>\n"],["readlines","ARGF","ARGF.html#method-i-readlines","(*args)","<p>Reads each file in ARGF in its entirety, returning an Array containing lines from the files. Lines are …\n"],["readlines","IO","IO.html#method-c-readlines","(p1, p2 = v2, p3 = v3, p4 = {})","<p>Returns an array of all lines read from the stream.\n<p>When called from class IO (but not subclasses of  …\n"],["readlines","IO","IO.html#method-i-readlines","(*args)","<p>Reads and returns all remaining line from the stream (see Lines); does not modify <code>$_</code>.\n<p>With no arguments …\n"],["readlines","Kernel","Kernel.html#method-i-readlines","(*args)","<p>Returns an array containing the lines returned by calling Kernel#gets until the end-of-file is reached; …\n"],["readlink","File","File.html#method-c-readlink","(p1)","<p>Returns the name of the file referenced by the given link. Not available on all platforms.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["readonly?","IO::Buffer","IO/Buffer.html#method-i-readonly-3F","()","<p>If the buffer is <em>read only</em>, meaning the buffer cannot be modified using #set_value, #set_string or #copy …\n"],["readpartial","ARGF","ARGF.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream.\n<p>If the optional <em>outbuf</em> argument is present, it must reference …\n"],["readpartial","IO","IO.html#method-i-readpartial","(*args)","<p>Reads up to <code>maxlen</code> bytes from the stream; returns a string (either a new string or the given <code>out_string</code> …\n"],["real","Complex","Complex.html#method-i-real","()","<p>Returns the real part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">real</span>      <span class=\"ruby-comment\">#=&gt; 7</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">real</span>  <span class=\"ruby-comment\">#=&gt; 9</span>\n</pre>\n"],["real","Numeric","Numeric.html#method-i-real","()","<p>Returns self.\n"],["real?","Complex","Complex.html#method-i-real-3F","()","<p>Returns false, even if the complex number has no imaginary part.\n"],["realdirpath","File","File.html#method-c-realdirpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual filesystem. The real pathname doesn’t …\n"],["realpath","File","File.html#method-c-realpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual filesystem not containing symlinks or …\n"],["reason","LocalJumpError","LocalJumpError.html#method-i-reason","()","<p>The reason this block was terminated: :break, :redo, :retry, :next, :return, or :noreason.\n"],["receiver","Binding","Binding.html#method-i-receiver","()","<p>Returns the bound receiver of the binding object.\n"],["receiver","FrozenError","FrozenError.html#method-i-receiver","()","<p>Return the receiver associated with this FrozenError exception.\n"],["receiver","KeyError","KeyError.html#method-i-receiver","()","<p>Return the receiver associated with this KeyError exception.\n"],["receiver","Method","Method.html#method-i-receiver","()","<p>Returns the bound receiver of the method object.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:map</span>).<span class=\"ruby-identifier\">receiver</span> <span class=\"ruby-comment\"># =&gt; 1..3</span>\n</pre>\n"],["receiver","NameError","NameError.html#method-i-receiver","()","<p>Return the receiver associated with this NameError exception.\n"],["rect","Complex","Complex.html#method-c-rect","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rect","Complex","Complex.html#method-i-rect","()","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rect","Numeric","Numeric.html#method-i-rect","()","<p>Returns an array; [num, 0].\n"],["rectangular","Complex","Complex.html#method-c-rectangular","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rectangular","Complex","Complex.html#method-i-rectangular","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">rectangular</span>  <span class=\"ruby-comment\">#=&gt; [1, 2]</span>\n</pre>\n"],["rectangular","Numeric","Numeric.html#method-i-rectangular","()","<p>Returns an array; [num, 0].\n"],["reduce","Enumerable","Enumerable.html#method-i-reduce","(p1 = v1, p2 = v2)","<p>Returns an object formed from operands via either:\n<p>A method named by <code>symbol</code>.\n<p>A block to which each operand …\n"],["refinements","Module","Module.html#method-i-refinements","()","<p>Returns an array of modules defined within the receiver.\n\n<pre>module A\n  refine Integer do\n  end\n\n  refine ...</pre>\n"],["regexp","MatchData","MatchData.html#method-i-regexp","()","<p>Returns the regexp that produced the match:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/a.*b/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;abc&quot;</span>) <span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;ab&quot;&gt;</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">regexp</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rehash","ENV","ENV.html#method-c-rehash","()","<p>(Provided for compatibility with Hash.)\n<p>Does not modify ENV; returns <code>nil</code>.\n"],["rehash","Hash","Hash.html#method-i-rehash","()","<p>Rebuilds the hash table by recomputing the hash index for each key; returns <code>self</code>.\n<p>The hash table becomes …\n"],["reject","Array","Array.html#method-i-reject","()","<p>Returns a new Array whose elements are all those from <code>self</code> for which the block returns <code>false</code> or <code>nil</code>: …\n"],["reject","ENV","ENV.html#method-c-reject","()","<p>Yields each environment variable name and its value as a 2-element Array. Returns a Hash whose items …\n"],["reject","Enumerable","Enumerable.html#method-i-reject","()","<p>Returns an array of objects rejected by the block.\n<p>With a block given, calls the block with successive …\n"],["reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-reject","()","<p>Like Enumerable#reject, but chains operation to be lazy-evaluated.\n"],["reject","Hash","Hash.html#method-i-reject","()","<p>Returns a new Hash object whose entries are all those from <code>self</code> for which the block returns <code>false</code> or …\n"],["reject!","Array","Array.html#method-i-reject-21","()","<p>Removes each element for which the block returns a truthy value.\n<p>Returns <code>self</code> if any elements removed: …\n"],["reject!","ENV","ENV.html#method-c-reject-21","()","<p>Similar to ENV.delete_if, but returns <code>nil</code> if no changes were made.\n<p>Yields each environment variable name …\n"],["reject!","Hash","Hash.html#method-i-reject-21","()","<p>Returns <code>self</code>, whose remaining entries are those for which the block returns <code>false</code> or <code>nil</code>:\n\n<pre>h = {foo: 0, ...</pre>\n"],["remainder","Integer","Integer.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <code>self</code> by <code>other</code>.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">11</span>.<span class=\"ruby-identifier\">remainder</span>(<span class=\"ruby-value\">4</span>)              <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-value\">11</span>.<span class=\"ruby-identifier\">remainder</span>(<span class=\"ruby-value\">-4</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remainder","Numeric","Numeric.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <code>self</code> by <code>other</code>.\n<p>Of the Core and Standard Library classes, only Float …\n"],["remove_class_variable","Module","Module.html#method-i-remove_class_variable","(p1)","<p>Removes the named class variable from the receiver, returning that variable’s value.\n\n<pre>class Example ...</pre>\n"],["remove_instance_variable","Object","Object.html#method-i-remove_instance_variable","(p1)","<p>Removes the named instance variable from <em>obj</em>, returning that variable’s value. String arguments are …\n"],["remove_method","Module","Module.html#method-i-remove_method","(*args)","<p>Removes the method identified by <em>symbol</em> from the current class. For an example, see Module#undef_method …\n"],["remove_stress_to_class","GC","GC.html#method-c-remove_stress_to_class","(*args)","<p>No longer raises NoMemoryError when allocating an instance of the given classes.\n"],["rename","File","File.html#method-c-rename","(p1, p2)","<p>Renames the given file to the new name. Raises a SystemCallError if the file cannot be renamed.\n\n<pre>File.rename(&quot;afile&quot;, ...</pre>\n"],["reopen","IO","IO.html#method-i-reopen","(p1, p2 = v2, p3 = {})","<p>Reassociates the stream with another stream, which may be of a different class. This method may be used …\n"],["repeated_combination","Array","Array.html#method-i-repeated_combination","(p1)","<p>Calls the block with each repeated combination of length <code>n</code> of the elements of <code>self</code>; each combination …\n"],["repeated_permutation","Array","Array.html#method-i-repeated_permutation","(p1)","<p>Calls the block with each repeated permutation of length <code>n</code> of the elements of <code>self</code>; each permutation …\n"],["replace","Array","Array.html#method-i-replace","(p1)","<p>Replaces the content of <code>self</code> with the content of <code>other_array</code>; returns <code>self</code>:\n\n<pre>a = [:foo, &#39;bar&#39;, 2]\na.replace([&#39;foo&#39;, ...</pre>\n"],["replace","ENV","ENV.html#method-c-replace","(p1)","<p>Replaces the entire content of the environment variables with the name/value pairs in the given <code>hash</code> …\n"],["replace","Hash","Hash.html#method-i-replace","(p1)","<p>Replaces the entire contents of <code>self</code> with the contents of <code>other_hash</code>; returns <code>self</code>:\n\n<pre>h = {foo: 0, bar: ...</pre>\n"],["replace","String","String.html#method-i-replace","(p1)","<p>Replaces the contents of <code>self</code> with the contents of <code>other_string</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;foo&#39;</span>        <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;bar&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replacement","Encoding::Converter","Encoding/Converter.html#method-i-replacement","()","<p>Returns the replacement string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ec</span> = <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;euc-jp&quot;</span>, <span class=\"ruby-string\">&quot;us-ascii&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">ec</span>.<span class=\"ruby-identifier\">replacement</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replacement=","Encoding::Converter","Encoding/Converter.html#method-i-replacement-3D","(p1)","<p>Sets the replacement string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ec</span> = <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;utf-8&quot;</span>, <span class=\"ruby-string\">&quot;us-ascii&quot;</span>, <span class=\"ruby-value\">:undef</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-value\">:replace</span>)\n<span class=\"ruby-identifier\">ec</span>.<span class=\"ruby-identifier\">replacement</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replicate","Encoding","Encoding.html#method-i-replicate","(p1)","<p>Returns a replicated encoding of <em>enc</em> whose name is <em>name</em>. The new encoding should have the same byte structure …\n"],["report","GC::Profiler","GC/Profiler.html#method-c-report","(*args)","<p>Writes the GC::Profiler.result to <code>$stdout</code> or the given IO object.\n"],["report_on_exception","Thread","Thread.html#method-c-report_on_exception","()","<p>Returns the status of the global “report on exception” condition.\n<p>The default is <code>true</code> since …\n"],["report_on_exception","Thread","Thread.html#method-i-report_on_exception","()","<p>Returns the status of the thread-local “report on exception” condition for this <code>thr</code>.\n<p>The default …\n"],["report_on_exception=","Thread","Thread.html#method-c-report_on_exception-3D","(p1)","<p>Returns the new state. When set to <code>true</code>, all threads created afterwards will inherit the condition and …\n"],["report_on_exception=","Thread","Thread.html#method-i-report_on_exception-3D","(p1)","<p>When set to <code>true</code>, a message is printed on $stderr if an exception kills this <code>thr</code>.  See ::report_on_exception …\n"],["require","Kernel","Kernel.html#method-i-require","(p1)","<p>Loads the given <code>name</code>, returning <code>true</code> if successful and <code>false</code> if the feature is already loaded.\n<p>If the …\n"],["require_relative","Kernel","Kernel.html#method-i-require_relative","(p1)","<p>Ruby tries to load the library named <em>string</em> relative to the directory containing the requiring file. …\n"],["resize","IO::Buffer","IO/Buffer.html#method-i-resize","(p1)","<p>Resizes a buffer to a <code>new_size</code> bytes, preserving its content. Depending on the old and new size, the …\n"],["respond_to?","Object","Object.html#method-i-respond_to-3F","(p1, p2 = v2)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.  Private and protected methods are included in the …\n"],["respond_to_missing?","Object","Object.html#method-i-respond_to_missing-3F","(p1, p2)","<p>DO NOT USE THIS DIRECTLY.\n<p>Hook method to return whether the <em>obj</em> can respond to <em>id</em> method or not.\n<p>When the …\n"],["result","GC::Profiler","GC/Profiler.html#method-c-result","()","<p>Returns a profile data report such as:\n\n<pre>GC 1 invokes.\nIndex    Invoke Time(sec)       Use Size(byte)   ...</pre>\n"],["result","StopIteration","StopIteration.html#method-i-result","()","<p>Returns the return value of the iterator.\n\n<pre>o = Object.new\ndef o.each\n  yield 1\n  yield 2\n  yield 3\n  100 ...</pre>\n"],["resume","Fiber","Fiber.html#method-i-resume","(*args)","<p>Resumes the fiber from the point at which the last Fiber.yield was called, or starts running it if it …\n"],["reverse","Array","Array.html#method-i-reverse","()","<p>Returns a new Array with the elements of <code>self</code> in reverse order:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;two&#39;</span>]\n<span class=\"ruby-identifier\">a1</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reverse","String","String.html#method-i-reverse","()","<p>Returns a new string with the characters from <code>self</code> in reverse order.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;stressed&#39;</span>.<span class=\"ruby-identifier\">reverse</span> <span class=\"ruby-comment\"># =&gt; &quot;desserts&quot;</span>\n</pre>\n"],["reverse!","Array","Array.html#method-i-reverse-21","()","<p>Reverses <code>self</code> in place:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-string\">&#39;two&#39;</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse!</span> <span class=\"ruby-comment\"># =&gt; [&quot;two&quot;, &quot;bar&quot;, &quot;foo&quot;]</span>\n</pre>\n"],["reverse!","String","String.html#method-i-reverse-21","()","<p>Returns <code>self</code> with its characters reversed:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;stressed&#39;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">reverse!</span> <span class=\"ruby-comment\"># =&gt; &quot;desserts&quot;</span>\n<span class=\"ruby-identifier\">s</span>          <span class=\"ruby-comment\"># =&gt; &quot;desserts&quot;</span>\n</pre>\n"],["reverse_each","Array","Array.html#method-i-reverse_each","()","<p>Iterates backwards over array elements.\n<p>When a block given, passes, in reverse order, each element to …\n"],["reverse_each","Enumerable","Enumerable.html#method-i-reverse_each","(*args)","<p>With a block given, calls the block with each element, but in reverse order; returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">reverse_each</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rewind","ARGF","ARGF.html#method-i-rewind","()","<p>Positions the current file to the beginning of input, resetting ARGF.lineno to zero.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">readline</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["rewind","Dir","Dir.html#method-i-rewind","()","<p>Repositions <em>dir</em> to the first entry.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>     <span class=\"ruby-comment\">#=&gt; &quot;.&quot;</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">rewind</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3fb0&gt; ...</span>\n</pre>\n"],["rewind","Enumerator","Enumerator.html#method-i-rewind","()","<p>Rewinds the enumeration sequence to the beginning.\n<p>If the enclosed object responds to a “rewind” …\n"],["rewind","Enumerator::Chain","Enumerator/Chain.html#method-i-rewind","()","<p>Rewinds the enumerator chain by calling the “rewind” method on each enumerable in reverse order. …\n"],["rewind","Enumerator::Product","Enumerator/Product.html#method-i-rewind","()","<p>Rewinds the product enumerator by calling the “rewind” method on each enumerable in reverse …\n"],["rewind","IO","IO.html#method-i-rewind","()","<p>Repositions the stream to its beginning, setting both the position and the line number to zero; see  …\n"],["rid","Process::GID","Process/GID.html#method-c-rid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["rid","Process::UID","Process/UID.html#method-c-rid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["rindex","Array","Array.html#method-i-rindex","(*args)","<p>Returns the index of the last element for which <code>object == element</code>.\n<p>When argument <code>object</code> is given but no …\n"],["rindex","String","String.html#method-i-rindex","(p1, p2 = v2)","<p>Returns the Integer index of the <em>last</em> occurrence of the given <code>substring</code>, or <code>nil</code> if none found:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">rindex</span>(<span class=\"ruby-string\">&#39;f&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rjust","String","String.html#method-i-rjust","(*args)","<p>Returns a right-justified copy of <code>self</code>.\n<p>If integer argument <code>size</code> is greater than the size (in characters) …\n"],["rmdir","Dir","Dir.html#method-c-rmdir","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.\n"],["rotate","Array","Array.html#method-i-rotate","(*args)","<p>Returns a new Array formed from <code>self</code> with elements rotated from one end to the other.\n<p>When no argument …\n"],["rotate!","Array","Array.html#method-i-rotate-21","(*args)","<p>Rotates <code>self</code> in place by moving elements from one end to the other; returns <code>self</code>.\n<p>When no argument given, …\n"],["round","Float","Float.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>self</code> rounded to the nearest value with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is …\n"],["round","Integer","Integer.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>self</code> rounded to the nearest value with a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is …\n"],["round","Numeric","Numeric.html#method-i-round","(*args)","<p>Returns <code>self</code> rounded to the nearest value with a precision of <code>digits</code> decimal digits.\n<p>Numeric implements …\n"],["round","Rational","Rational.html#method-i-round","(*args, p2 = {})","<p>Returns <code>rat</code> rounded to the nearest value with a precision of <code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Time","Time.html#method-i-round","(*args)","<p>Returns a new Time object whose numeric value is that of <code>self</code>, with its seconds value rounded to precision …\n"],["rpartition","String","String.html#method-i-rpartition","(p1)","<p>Returns a 3-element array of substrings of <code>self</code>.\n<p>Matches a pattern against <code>self</code>, scanning backwards from …\n"],["rstrip","String","String.html#method-i-rstrip","()","<p>Returns a copy of the receiver with trailing whitespace removed; see Whitespace in Strings:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">whitespace</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rstrip!","String","String.html#method-i-rstrip-21","()","<p>Like String#rstrip, except that any modifications are made in <code>self</code>; returns <code>self</code> if any modification …\n"],["ruby2_keywords","Proc","Proc.html#method-i-ruby2_keywords","()","<p>Marks the proc as passing keywords through a normal argument splat. This should only be called on procs …\n"],["ruby2_keywords_hash","Hash","Hash.html#method-c-ruby2_keywords_hash","(p1)","<p>Duplicates a given hash and adds a ruby2_keywords flag. This method is not for casual use; debugging, …\n"],["ruby2_keywords_hash?","Hash","Hash.html#method-c-ruby2_keywords_hash-3F","(p1)","<p>Checks if a given hash is flagged by Module#ruby2_keywords (or Proc#ruby2_keywords). This method is not …\n"],["run","Thread","Thread.html#method-i-run","()","<p>Wakes up <code>thr</code>, making it eligible for scheduling.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;a&quot;</span>; <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">stop</span>; <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;c&quot;</span> }\n<span class=\"ruby-identifier\">sleep</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["saturday?","Time","Time.html#method-i-saturday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Saturday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 ...</span>\n</pre>\n"],["scan","String","String.html#method-i-scan","(p1)","<p>Matches a pattern against <code>self</code>; the pattern is:\n<p><code>string_or_regexp</code> itself, if it is a Regexp.\n<p><code>Regexp.quote(string_or_regexp)</code> …\n"],["schedule","Fiber","Fiber.html#method-c-schedule","(*args)","<p>The method is <em>expected</em> to immediately run the provided block of code in a separate non-blocking fiber. …\n"],["scheduler","Fiber","Fiber.html#method-c-scheduler","()","\n<pre>Returns the Fiber scheduler, that was last set for the current thread with Fiber.set_scheduler.\nReturns ...</pre>\n"],["script_lines","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-script_lines","()","<p>It returns recorded script lines if it is availalble. The script lines are not limited to the iseq range, …\n"],["scrub","String","String.html#method-i-scrub","(*args)","<p>Returns a copy of <code>self</code> with each invalid byte sequence replaced by the given <code>replacement_string</code>.\n<p>With …\n"],["scrub!","String","String.html#method-i-scrub-21","(*args)","<p>Like String#scrub, except that any replacements are made in <code>self</code>.\n"],["search_convpath","Encoding::Converter","Encoding/Converter.html#method-c-search_convpath","(*args)","<p>Returns a conversion path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">search_convpath</span>(<span class=\"ruby-string\">&quot;ISO-8859-1&quot;</span>, <span class=\"ruby-string\">&quot;EUC-JP&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; [[#&lt;Encoding:ISO-8859-1&gt;, ...</span>\n</pre>\n"],["sec","Time","Time.html#method-i-sec","()","<p>Returns the integer second of the minute for <code>self</code>, in range (0..60):\n\n<pre>t = Time.new(2000, 1, 2, 3, 4, 5, ...</pre>\n"],["seed","Random","Random.html#method-i-seed","()","<p>Returns the seed value used to initialize the generator. This may be used to initialize another generator …\n"],["seed","Random","Random.html#method-c-seed","()","<p>Returns the seed value used to initialize the Ruby system PRNG. This may be used to initialize another …\n"],["seek","ARGF","ARGF.html#method-i-seek","(*args)","<p>Seeks to offset <em>amount</em> (an Integer) in the ARGF stream according to the value of <em>whence</em>. See IO#seek …\n"],["seek","Dir","Dir.html#method-i-seek","(p1)","<p>Seeks to a particular location in <em>dir</em>. <em>integer</em> must be a value returned by Dir#tell.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["seek","IO","IO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to the position given by integer <code>offset</code> (see Position) and constant <code>whence</code>, which is one of:\n<p><code>:CUR</code> …\n"],["select","Array","Array.html#method-i-select","()","<p>Calls the block, if given, with each element of <code>self</code>; returns a new Array containing those elements of …\n"],["select","ENV","ENV.html#method-c-select","()","<p>ENV.filter is an alias for ENV.select.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["select","Enumerable","Enumerable.html#method-i-select","()","<p>Returns an array containing elements selected by the block.\n<p>With a block given, calls the block with successive …\n"],["select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-select","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["select","Hash","Hash.html#method-i-select","()","<p>Hash#filter is an alias for Hash#select.\n<p>Returns a new Hash object whose entries are those for which the …\n"],["select","IO","IO.html#method-c-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Invokes system call select(2), which monitors multiple file descriptors, waiting until one or more of …\n"],["select","Kernel","Kernel.html#method-i-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Invokes system call select(2), which monitors multiple file descriptors, waiting until one or more of …\n"],["select","Struct","Struct.html#method-i-select","(*args)","<p>With a block given, returns an array of values from <code>self</code> for which the block returns a truthy value: …\n"],["select!","Array","Array.html#method-i-select-21","()","<p>Calls the block, if given  with each element of <code>self</code>; removes from <code>self</code> those elements for which the …\n"],["select!","ENV","ENV.html#method-c-select-21","()","<p>ENV.filter! is an alias for ENV.select!.\n<p>Yields each environment variable name and its value as a 2-element …\n"],["select!","Hash","Hash.html#method-i-select-21","()","<p>Hash#filter! is an alias for Hash#select!.\n<p>Returns <code>self</code>, whose entries are those for which the block returns …\n"],["send","Object","Object.html#method-i-send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments specified. When the method is identified …\n"],["set_backtrace","Exception","Exception.html#method-i-set_backtrace","(p1)","<p>Sets the backtrace information associated with <code>exc</code>. The <code>backtrace</code> must be an array of String objects …\n"],["set_encoding","ARGF","ARGF.html#method-i-set_encoding","(*args)","<p>If single argument is specified, strings read from ARGF are tagged with the encoding specified.\n<p>If two …\n"],["set_encoding","IO","IO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>See Encodings.\n<p>Argument <code>ext_enc</code>, if given, must be an Encoding object; it is assigned as the encoding …\n"],["set_encoding_by_bom","IO","IO.html#method-i-set_encoding_by_bom","()","<p>If the stream begins with a BOM (byte order marker), consumes the BOM and sets the external encoding …\n"],["set_scheduler","Fiber","Fiber.html#method-c-set_scheduler","(p1)","<p>Sets the Fiber scheduler for the current thread. If the scheduler is set, non-blocking fibers (created …\n"],["set_string","IO::Buffer","IO/Buffer.html#method-i-set_string","(*args)","<p>Efficiently copy data from a source String into the buffer, at <code>offset</code> using <code>memcpy</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buf</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">8</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_trace_func","Kernel","Kernel.html#method-i-set_trace_func","(p1)","\n<pre>Establishes _proc_ as the handler for tracing, or disables\ntracing if the parameter is +nil+.\n\n*Note:* ...</pre>\n"],["set_trace_func","Thread","Thread.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> on <em>thr</em> as the handler for tracing, or disables tracing if the parameter is <code>nil</code>.\n<p>See  …\n"],["set_value","IO::Buffer","IO/Buffer.html#method-i-set_value","(p1, p2, p3)","<p>Write to a buffer a <code>value</code> of <code>type</code> at <code>offset</code>. <code>type</code> should be one of symbols described in #get_value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buffer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["setbyte","String","String.html#method-i-setbyte","(p1, p2)","<p>Sets the byte at zero-based <code>index</code> to <code>integer</code>; returns <code>integer</code>:\n\n<pre>s = &#39;abcde&#39;      # =&gt; &quot;abcde&quot;\ns.setbyte(0, ...</pre>\n"],["setegid","Process::Sys","Process/Sys.html#method-c-setegid","(p1)","<p>Set the effective group ID of the calling process to <em>group</em>.  Not available on all platforms.\n"],["seteuid","Process::Sys","Process/Sys.html#method-c-seteuid","(p1)","<p>Set the effective user ID of the calling process to <em>user</em>.  Not available on all platforms.\n"],["setgid","Process::Sys","Process/Sys.html#method-c-setgid","(p1)","<p>Set the group ID of the current process to <em>group</em>. Not available on all platforms.\n"],["setgid?","File","File.html#method-c-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setgid?","File::Stat","File/Stat.html#method-i-setgid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-group-id permission bit set, <code>false</code> if it doesn’t or if the operating …\n"],["setgid?","FileTest","FileTest.html#method-i-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setpgid","Process","Process.html#method-c-setpgid","(p1, p2)","<p>Sets the process group ID of <em>pid</em> (0 indicates this process) to <em>integer</em>. Not available on all platforms. …\n"],["setpgrp","Process","Process.html#method-c-setpgrp","()","<p>Equivalent to <code>setpgid(0,0)</code>. Not available on all platforms.\n"],["setpriority","Process","Process.html#method-c-setpriority","(p1, p2, p3)","<p>See Process.getpriority.\n\n<pre>Process.setpriority(Process::PRIO_USER, 0, 19)      #=&gt; 0\nProcess.setpriority(Process::PRIO_PROCESS, ...</pre>\n"],["setproctitle","Process","Process.html#method-c-setproctitle","(p1)","<p>Sets the process title that appears on the ps(1) command.  Not necessarily effective on all platforms. …\n"],["setregid","Process::Sys","Process/Sys.html#method-c-setregid","(p1, p2)","<p>Sets the (group) real and/or effective group IDs of the current process to <em>rid</em> and <em>eid</em>, respectively. …\n"],["setresgid","Process::Sys","Process/Sys.html#method-c-setresgid","(p1, p2, p3)","<p>Sets the (group) real, effective, and saved user IDs of the current process to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setresuid","Process::Sys","Process/Sys.html#method-c-setresuid","(p1, p2, p3)","<p>Sets the (user) real, effective, and saved user IDs of the current process to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setreuid","Process::Sys","Process/Sys.html#method-c-setreuid","(p1, p2)","<p>Sets the (user) real and/or effective user IDs of the current process to <em>rid</em> and <em>eid</em>, respectively.  …\n"],["setrgid","Process::Sys","Process/Sys.html#method-c-setrgid","(p1)","<p>Set the real group ID of the calling process to <em>group</em>. Not available on all platforms.\n"],["setrlimit","Process","Process.html#method-c-setrlimit","(*args)","<p>Sets the resource limit of the process. <em>cur_limit</em> means current (soft) limit and <em>max_limit</em> means maximum …\n"],["setruid","Process::Sys","Process/Sys.html#method-c-setruid","(p1)","<p>Set the real user ID of the calling process to <em>user</em>. Not available on all platforms.\n"],["setsid","Process","Process.html#method-c-setsid","()","<p>Establishes this process as a new session and process group leader, with no controlling tty. Returns …\n"],["setuid","Process::Sys","Process/Sys.html#method-c-setuid","(p1)","<p>Set the user ID of the current process to <em>user</em>. Not available on all platforms.\n"],["setuid?","File","File.html#method-c-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setuid?","File::Stat","File/Stat.html#method-i-setuid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-user-id permission bit set, <code>false</code> if it doesn’t or if the operating …\n"],["setuid?","FileTest","FileTest.html#method-i-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["shift","Array","Array.html#method-i-shift","(*args)","<p>Removes and returns leading elements.\n<p>When no argument is given, removes and returns the first element: …\n"],["shift","ENV","ENV.html#method-c-shift","()","<p>Removes the first environment variable from ENV and returns a 2-element Array containing its name and …\n"],["shift","Hash","Hash.html#method-i-shift","()","<p>Removes the first hash entry (see Entry Order); returns a 2-element Array containing the removed key …\n"],["sid_available?","Process::GID","Process/GID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved group ID functionality.\n"],["sid_available?","Process::UID","Process/UID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved user ID functionality.\n"],["signal","Thread::ConditionVariable","Thread/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signaled?","Process::Status","Process/Status.html#method-i-signaled-3F","()","<p>Returns <code>true</code> if <em>stat</em> terminated because of an uncaught signal.\n"],["signame","Signal","Signal.html#method-c-signame","(p1)","<p>Convert signal number to signal name. Returns <code>nil</code> if the signo is an invalid signal number.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Signal</span>.<span class=\"ruby-identifier\">trap</span>(<span class=\"ruby-string\">&quot;INT&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["signo","SignalException","SignalException.html#method-i-signo","()","<p>Returns a signal number.\n"],["sin","Math","Math.html#method-c-sin","(p1)","<p>Returns the sine of <code>x</code> in radians.\n<p>Domain: <code>(-INFINITY, INFINITY)</code>.\n<p>Range: <code>[-1.0, 1.0]</code>.\n"],["singleton_class","Object","Object.html#method-i-singleton_class","()","<p>Returns the singleton class of <em>obj</em>.  This method creates a new singleton class if <em>obj</em> does not have one. …\n"],["singleton_class?","Module","Module.html#method-i-singleton_class-3F","()","<p>Returns <code>true</code> if <em>mod</em> is a singleton class or <code>false</code> if it is an ordinary class or module.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">C</span>.<span class=\"ruby-identifier\">singleton_class?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["singleton_method","Object","Object.html#method-i-singleton_method","(p1)","<p>Similar to <em>method</em>, searches singleton method only.\n\n<pre>class Demo\n  def initialize(n)\n    @iv = n\n  end\n  ...</pre>\n"],["singleton_methods","Object","Object.html#method-i-singleton_methods","(*args)","<p>Returns an array of the names of singleton methods for <em>obj</em>. If the optional <em>all</em> parameter is true, the …\n"],["sinh","Math","Math.html#method-c-sinh","(p1)","<p>Returns the hyperbolic sine of <code>x</code> in radians.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-INFINITY, INFINITY]</code> …\n"],["size","Array","Array.html#method-i-size","()","<p>Returns the count of elements in <code>self</code>.\n"],["size","ENV","ENV.html#method-c-size","()","<p>Returns the count of environment variables:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 2 ...</span>\n</pre>\n"],["size","Enumerator","Enumerator.html#method-i-size","()","<p>Returns the size of the enumerator, or <code>nil</code> if it can’t be calculated lazily.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">to_a</span>.<span class=\"ruby-identifier\">permutation</span>(<span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">size</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-size","()","<p>Returns the number of elements in this arithmetic sequence if it is a finite sequence.  Otherwise, returns …\n"],["size","Enumerator::Chain","Enumerator/Chain.html#method-i-size","()","<p>Returns the total size of the enumerator chain calculated by summing up the size of each enumerable in …\n"],["size","Enumerator::Product","Enumerator/Product.html#method-i-size","()","<p>Returns the total size of the enumerator product calculated by multiplying the sizes of enumerables in …\n"],["size","File","File.html#method-i-size","()",""],["size","File","File.html#method-c-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","File::Stat","File/Stat.html#method-i-size","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size","FileTest","FileTest.html#method-i-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","Hash","Hash.html#method-i-size","()","<p>Returns the count of entries in <code>self</code>:\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-comment\"># =&gt; 3</span>\n</pre>\n<p>Hash#length is an alias for …\n"],["size","IO::Buffer","IO/Buffer.html#method-i-size","()","<p>Returns the size of the buffer that was explicitly set (on creation with ::new or on #resize), or deduced …\n"],["size","MatchData","MatchData.html#method-i-size","()","<p>Returns size of the match array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; ...</span>\n</pre>\n"],["size","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-size","()","<p>Returns the number of referenced objects\n"],["size","Range","Range.html#method-i-size","()","<p>Returns the count of elements in <code>self</code> if both begin and end values are numeric; otherwise, returns <code>nil</code> …\n"],["size","String","String.html#method-i-size","()","<p>Returns the count of characters (not bytes) in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;foo&#39;</span>.<span class=\"ruby-identifier\">length</span>        <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;тест&#39;</span>.<span class=\"ruby-identifier\">length</span>       <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["size","Struct","Struct.html#method-i-size","()","<p>Returns the number of members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe Smith&quot;, ...</pre>\n"],["size","Symbol","Symbol.html#method-i-size","()","<p>Equivalent to <code>self.to_s.length</code>; see String#length.\n<p>Symbol#size is an alias for Symbol#length.\n"],["size","Thread::Queue","Thread/Queue.html#method-i-size","()","<p>Returns the length of the queue.\n"],["size","Thread::SizedQueue","Thread/SizedQueue.html#method-i-size","()","<p>Returns the length of the queue.\n"],["size?","File","File.html#method-c-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn’t exist or has zero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","File::Stat","File/Stat.html#method-i-size-3F","()","<p>Returns <code>nil</code> if <em>stat</em> is a zero-length file, the size of the file otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size?","FileTest","FileTest.html#method-i-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn’t exist or has zero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["skip","ARGF","ARGF.html#method-i-skip","()","<p>Sets the current file to the next file in ARGV. If there aren’t any more files it has no effect. …\n"],["sleep","Kernel","Kernel.html#method-i-sleep","(*args)","<p>Suspends the current thread for <em>duration</em> seconds (which may be any number, including a <code>Float</code> with fractional …\n"],["sleep","Thread::Mutex","Thread/Mutex.html#method-i-sleep","(*args)","<p>Releases the lock and sleeps <code>timeout</code> seconds if it is given and non-nil or forever.  Raises <code>ThreadError</code> …\n"],["slice","Array","Array.html#method-i-slice","(*args)","<p>Returns elements from <code>self</code>; does not modify <code>self</code>.\n<p>When a single Integer argument <code>index</code> is given, returns …\n"],["slice","ENV","ENV.html#method-c-slice","(*args)","<p>Returns a Hash of the given ENV names and their corresponding values:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, &#39;bar&#39; ...</pre>\n"],["slice","Hash","Hash.html#method-i-slice","(*args)","<p>Returns a new Hash object containing the entries for the given <code>keys</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.slice(:baz, ...</pre>\n"],["slice","IO::Buffer","IO/Buffer.html#method-i-slice","(p1, p2)","<p>Produce another IO::Buffer which is a slice (or view into) the current one starting at <code>offset</code> bytes and …\n"],["slice","String","String.html#method-i-slice","(*args)","<p>Returns the substring of <code>self</code> specified by the arguments. See examples at String Slices.\n"],["slice","Symbol","Symbol.html#method-i-slice","(*args)","<p>Equivalent to <code>symbol.to_s[]</code>; see String#[].\n"],["slice!","Array","Array.html#method-i-slice-21","(*args)","<p>Removes and returns elements from <code>self</code>.\n<p>When the only argument is an Integer <code>n</code>, removes and returns the …\n"],["slice!","String","String.html#method-i-slice-21","(*args)","<p>Removes and returns the substring of <code>self</code> specified by the arguments. See String Slices.\n<p>A few examples: …\n"],["slice_after","Enumerable","Enumerable.html#method-i-slice_after","(p1)","<p>Creates an enumerator for each chunked elements. The ends of chunks are defined by <em>pattern</em> and the block. …\n"],["slice_after","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_after","(*args)","<p>Like Enumerable#slice_after, but chains operation to be lazy-evaluated.\n"],["slice_before","Enumerable","Enumerable.html#method-i-slice_before","(p1)","<p>With argument <code>pattern</code>, returns an enumerator that uses the pattern to partition elements into arrays …\n"],["slice_before","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_before","(*args)","<p>Like Enumerable#slice_before, but chains operation to be lazy-evaluated.\n"],["slice_when","Enumerable","Enumerable.html#method-i-slice_when","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks are defined by the block.\n<p>This …\n"],["slice_when","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_when","(*args)","<p>Like Enumerable#slice_when, but chains operation to be lazy-evaluated.\n"],["socket?","File","File.html#method-c-socket-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a socket, <code>false</code> otherwise:\n\n<pre>require &#39;socket&#39;\nFile.socket?(Socket.new(:INET, ...</pre>\n"],["socket?","File::Stat","File/Stat.html#method-i-socket-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a socket, <code>false</code> if it isn’t or if the operating system doesn’t support …\n"],["socket?","FileTest","FileTest.html#method-i-socket-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a socket, <code>false</code> otherwise:\n\n<pre>require &#39;socket&#39;\nFile.socket?(Socket.new(:INET, ...</pre>\n"],["sort","Array","Array.html#method-i-sort","()","<p>Returns a new Array whose elements are those from <code>self</code>, sorted.\n<p>With no block, compares elements using …\n"],["sort","Enumerable","Enumerable.html#method-i-sort","()","<p>Returns an array containing the sorted elements of <code>self</code>. The ordering of equal elements is indeterminate …\n"],["sort!","Array","Array.html#method-i-sort-21","()","<p>Returns <code>self</code> with its elements sorted in place.\n<p>With no block, compares elements using operator <code>&lt;=&gt;</code> …\n"],["sort_by","Enumerable","Enumerable.html#method-i-sort_by","()","<p>With a block given, returns an array of elements of <code>self</code>, sorted according to the value returned by the …\n"],["sort_by!","Array","Array.html#method-i-sort_by-21","()","<p>Sorts the elements of <code>self</code> in place, using an ordering determined by the block; returns self.\n<p>Calls the …\n"],["source","Regexp","Regexp.html#method-i-source","()","<p>Returns the original string of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/ab+c/ix</span>.<span class=\"ruby-identifier\">source</span> <span class=\"ruby-comment\"># =&gt; &quot;ab+c&quot;</span>\n</pre>\n<p>Regexp escape sequences are retained: …\n"],["source_encoding","Encoding::Converter","Encoding/Converter.html#method-i-source_encoding","()","<p>Returns the source encoding as an Encoding object.\n"],["source_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_location","Binding","Binding.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number of the binding object.\n"],["source_location","Method","Method.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or nil if this method was not …\n"],["source_location","Proc","Proc.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this proc or <code>nil</code> if this proc was not defined …\n"],["source_location","UnboundMethod","UnboundMethod.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or nil if this method was not …\n"],["spawn","Kernel","Kernel.html#method-i-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">pid</span> = <span class=\"ruby-identifier\">spawn</span>(<span class=\"ruby-string\">&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;</span>)\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["spawn","Process","Process.html#method-c-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">pid</span> = <span class=\"ruby-identifier\">spawn</span>(<span class=\"ruby-string\">&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;</span>)\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["split","File","File.html#method-c-split","(p1)","<p>Splits the given string into a directory and a file component and returns them in a two-element array. …\n"],["split","String","String.html#method-i-split","(p1 = v1, p2 = v2)","<p>Returns an array of substrings of <code>self</code> that are the result of splitting <code>self</code> at each occurrence of the …\n"],["sprintf","Kernel","Kernel.html#method-i-sprintf","(*args)","<p>Returns the string resulting from formatting <code>objects</code> into <code>format_string</code>.\n<p>For details on <code>format_string</code> …\n"],["sqrt","Integer","Integer.html#method-c-sqrt","(p1)","<p>Returns the integer square root of the non-negative integer <code>n</code>, which is the largest non-negative integer …\n"],["sqrt","Math","Math.html#method-c-sqrt","(p1)","<p>Returns the principal (non-negative) square root of <code>x</code>.\n<p>Domain: <code>[0, INFINITY]</code>.\n<p>Range: <code>[0, INFINITY]</code>.\n"],["squeeze","String","String.html#method-i-squeeze","(*args)","<p>Returns a copy of <code>self</code> with characters specified by <code>selectors</code> “squeezed” (see Multiple Character …\n"],["squeeze!","String","String.html#method-i-squeeze-21","(*args)","<p>Like String#squeeze, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise. …\n"],["srand","Kernel","Kernel.html#method-i-srand","(*args)","<p>Seeds the system pseudo-random number generator, with <code>number</code>. The previous seed value is returned.\n<p>If …\n"],["srand","Random","Random.html#method-c-srand","(*args)","<p>Seeds the system pseudo-random number generator, with <code>number</code>. The previous seed value is returned.\n<p>If …\n"],["start","Thread","Thread.html#method-c-start","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then calling <code>start</code> in that subclass …\n"],["start_with?","String","String.html#method-i-start_with-3F","(*args)","<p>Returns whether <code>self</code> starts with any of the given <code>string_or_regexp</code>.\n<p>Matches patterns against the beginning …\n"],["start_with?","Symbol","Symbol.html#method-i-start_with-3F","(*args)","<p>Equivalent to <code>self.to_s.start_with?</code>; see String#start_with?.\n"],["stat","File","File.html#method-c-stat","(p1)","<p>Returns a File::Stat object for the file at <code>filepath</code> (see File::Stat):\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>).<span class=\"ruby-identifier\">class</span> <span class=\"ruby-comment\"># =&gt; File::Stat</span>\n</pre>\n"],["stat","IO","IO.html#method-i-stat","()","<p>Returns status information for <em>ios</em> as an object of type File::Stat.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">s</span> = <span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">stat</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["stat","RubyVM","RubyVM.html#method-c-stat","(*args)","<p>Returns a Hash containing implementation-dependent counters inside the VM.\n<p>This hash includes information …\n"],["state","Ripper","Ripper.html#method-i-state","()","<p>Return scanner state of current token.\n"],["status","SystemExit","SystemExit.html#method-i-status","()","<p>Return the status value associated with this system exit.\n"],["status","Thread","Thread.html#method-i-status","()","<p>Returns the status of <code>thr</code>.\n<p><code>&quot;sleep&quot;</code> &mdash; Returned if this thread is sleeping or waiting on I/O\n<p><code>&quot;run&quot;</code> … &mdash; "],["step","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-step","()",""],["step","Numeric","Numeric.html#method-i-step","(*args)","\n<pre>Generates a sequence of numbers; with a block given, traverses the sequence.\n\nOf the Core and Standard ...</pre>\n"],["step","Range","Range.html#method-i-step","(*args)","<p>Iterates over the elements of <code>self</code>.\n<p>With a block given and no argument, calls the block each element of …\n"],["sticky?","File","File.html#method-c-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["sticky?","File::Stat","File/Stat.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if <em>stat</em> has its sticky bit set, <code>false</code> if it doesn’t or if the operating system doesn’t …\n"],["sticky?","FileTest","FileTest.html#method-i-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["stop","Thread","Thread.html#method-c-stop","()","<p>Stops execution of the current thread, putting it into a “sleep” state, and schedules execution …\n"],["stop?","Thread","Thread.html#method-i-stop-3F","()","<p>Returns <code>true</code> if <code>thr</code> is dead or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">stop</span> }\n<span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">stop?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["stopped?","Process::Status","Process/Status.html#method-i-stopped-3F","()","<p>Returns <code>true</code> if this process is stopped. This is only returned if the corresponding #wait call had the …\n"],["stopsig","Process::Status","Process/Status.html#method-i-stopsig","()","<p>Returns the number of the signal that caused <em>stat</em> to stop (or <code>nil</code> if self is not stopped).\n"],["store","ENV","ENV.html#method-c-store","(p1, p2)","<p>ENV.store is an alias for ENV.[]=.\n<p>Creates, updates, or deletes the named environment variable, returning …\n"],["store","Hash","Hash.html#method-i-store","(p1, p2)","<p>Hash#store is an alias for Hash#[]=.\n<p>Associates the given <code>value</code> with the given <code>key</code>; returns <code>value</code>.\n<p>If the …\n"],["strftime","Time","Time.html#method-i-strftime","(p1)","<p>Returns a string representation of <code>self</code>, formatted according to the given string <code>format</code>. See Formats …\n"],["string","MatchData","MatchData.html#method-i-string","()","<p>Returns the target string if it was frozen; otherwise, returns a frozen copy of the target string:\n\n<pre>m = ...</pre>\n"],["strip","String","String.html#method-i-strip","()","<p>Returns a copy of the receiver with leading and trailing whitespace removed; see Whitespace in Strings …\n"],["strip!","String","String.html#method-i-strip-21","()","<p>Like String#strip, except that any modifications are made in <code>self</code>; returns <code>self</code> if any modification are …\n"],["sub","Kernel","Kernel.html#method-i-sub","(*args)","<p>Equivalent to <code>$_.sub(<em>args</em>)</code>, except that <code>$_</code> will be updated if substitution occurs. Available only when …\n"],["sub","String","String.html#method-i-sub","(*args)","<p>Returns a copy of <code>self</code> with only the first occurrence (not all occurrences) of the given <code>pattern</code> replaced. …\n"],["sub!","String","String.html#method-i-sub-21","(*args)","<p>Returns <code>self</code> with only the first occurrence (not all occurrences) of the given <code>pattern</code> replaced.\n<p>See  …\n"],["subclasses","Class","Class.html#method-i-subclasses","()","<p>Returns an array of classes where the receiver is the direct superclass of the class, excluding singleton …\n"],["subsec","Time","Time.html#method-i-subsec","()","<p>Returns the exact subseconds for <code>self</code> as a Numeric (Integer or Rational):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span> <span class=\"ruby-comment\"># =&gt; 2022-07-11 ...</span>\n</pre>\n"],["succ","Integer","Integer.html#method-i-succ","()","<p>Returns the successor integer of <code>self</code> (equivalent to <code>self + 1</code>):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">succ</span>  <span class=\"ruby-comment\">#=&gt; 2</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n<p>Integer#next …\n"],["succ","String","String.html#method-i-succ","()","<p>Returns the successor to <code>self</code>. The successor is calculated by incrementing characters.\n<p>The first character …\n"],["succ","Symbol","Symbol.html#method-i-succ","()","<p>Equivalent to <code>self.to_s.succ.to_sym</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">succ</span> <span class=\"ruby-comment\"># =&gt; :fop</span>\n</pre>\n<p>Symbol#next is an alias for Symbol#succ.\n"],["succ!","String","String.html#method-i-succ-21","()","<p>Equivalent to String#succ, but modifies <code>self</code> in place; returns <code>self</code>.\n<p>String#next! is an alias for String#succ! …\n"],["success?","Process::Status","Process/Status.html#method-i-success-3F","()","<p>Returns <code>true</code> if <em>stat</em> is successful, <code>false</code> if not. Returns <code>nil</code> if #exited? is not <code>true</code>.\n"],["success?","SystemExit","SystemExit.html#method-i-success-3F","()","<p>Returns <code>true</code> if exiting successful, <code>false</code> if not.\n"],["sum","Array","Array.html#method-i-sum","(*args)","<p>When no block is given, returns the object equivalent to:\n\n<pre>sum = init\narray.each {|element| sum += element ...</pre>\n"],["sum","Enumerable","Enumerable.html#method-i-sum","(*args)","<p>With no block given, returns the sum of <code>initial_value</code> and the elements:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">sum</span>          <span class=\"ruby-comment\"># =&gt; 5050 ...</span>\n</pre>\n"],["sum","String","String.html#method-i-sum","(*args)","<p>Returns a basic <code>n</code>-bit checksum of the characters in <code>self</code>; the checksum is the sum of the binary value …\n"],["sunday?","Time","Time.html#method-i-sunday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Sunday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-02 00:00:00 ...</span>\n</pre>\n"],["super_method","Method","Method.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or nil if there is no method …\n"],["super_method","UnboundMethod","UnboundMethod.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or nil if there is no method …\n"],["superclass","Class","Class.html#method-i-superclass","()","<p>Returns the superclass of <em>class</em>, or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">superclass</span>          <span class=\"ruby-comment\">#=&gt; IO</span>\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">superclass</span>            <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["swapcase","String","String.html#method-i-swapcase","(*args)","<p>Returns a string containing the characters in <code>self</code>, with cases reversed; each uppercase character is …\n"],["swapcase","Symbol","Symbol.html#method-i-swapcase","(*args)","<p>Equivalent to <code>sym.to_s.swapcase.to_sym</code>.\n<p>See String#swapcase.\n"],["swapcase!","String","String.html#method-i-swapcase-21","(*args)","<p>Upcases each lowercase character in <code>self</code>; downcases uppercase character; returns <code>self</code> if any changes …\n"],["switch","Process::GID","Process/GID.html#method-c-switch","()","<p>Switch the effective and real group IDs of the current process. If a <em>block</em> is given, the group IDs will …\n"],["switch","Process::UID","Process/UID.html#method-c-switch","()","<p>Switch the effective and real user IDs of the current process. If a <em>block</em> is given, the user IDs will …\n"],["symlink","File","File.html#method-c-symlink","(p1, p2)","<p>Creates a symbolic link called <em>new_name</em> for the existing file <em>old_name</em>. Raises a NotImplemented exception …\n"],["symlink?","File","File.html#method-c-symlink-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a symbolic link, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">symlink</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">symlink</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>, <span class=\"ruby-string\">&#39;symlink&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["symlink?","File::Stat","File/Stat.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a symbolic link, <code>false</code> if it isn’t or if the operating system doesn’t …\n"],["symlink?","FileTest","FileTest.html#method-i-symlink-3F","(p1)","<p>Returns <code>true</code> if <code>filepath</code> points to a symbolic link, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">symlink</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">symlink</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>, <span class=\"ruby-string\">&#39;symlink&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sync","IO","IO.html#method-i-sync","()","<p>Returns the current sync mode of the stream. When sync mode is true, all output is immediately flushed …\n"],["sync=","IO","IO.html#method-i-sync-3D","(p1)","<p>Sets the <em>sync</em> <em>mode</em> for the stream to the given value; returns the given value.\n<p>Values for the sync mode: …\n"],["synchronize","Thread::Mutex","Thread/Mutex.html#method-i-synchronize","()","<p>Obtains a lock, runs the block, and releases the lock when the block completes.  See the example under …\n"],["syscall","Kernel","Kernel.html#method-i-syscall","(*args)","<p>Invokes Posix system call syscall(2), which calls a specified function.\n<p>Calls the operating system function …\n"],["sysopen","IO","IO.html#method-c-sysopen","(p1, p2 = v2, p3 = v3)","<p>Opens the file at the given path with the given mode and permissions; returns the integer file descriptor. …\n"],["sysread","IO","IO.html#method-i-sysread","(p1, p2 = v2)","<p>Behaves like IO#readpartial, except that it uses low-level system functions.\n<p>This method should not be …\n"],["sysseek","IO","IO.html#method-i-sysseek","(p1, p2 = v2)","<p>Behaves like IO#seek, except that it:\n<p>Uses low-level system functions.\n<p>Returns the new position.\n"],["system","Kernel","Kernel.html#method-i-system","(*args)","<p>Executes <em>command…</em> in a subshell. <em>command…</em> is one of following forms.\n<p>This method has potential security …\n"],["syswrite","IO","IO.html#method-i-syswrite","(p1)","<p>Writes the given <code>object</code> to self, which must be opened for writing (see Modes); returns the number bytes …\n"],["tag","UncaughtThrowError","UncaughtThrowError.html#method-i-tag","()","<p>Return the tag object which was called for.\n"],["take","Array","Array.html#method-i-take","(p1)","<p>Returns a new Array containing the first <code>n</code> element of <code>self</code>, where <code>n</code> is a non-negative Integer; does not …\n"],["take","Enumerable","Enumerable.html#method-i-take","(p1)","<p>For non-negative integer <code>n</code>, returns the first <code>n</code> elements:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = (<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>)\n<span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># =&gt; [1, 2]</span>\n<span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">take</span>(<span class=\"ruby-value\">0</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take","(p1)","<p>Like Enumerable#take, but chains operation to be lazy-evaluated.\n"],["take_while","Array","Array.html#method-i-take_while","()","<p>Returns a new Array containing zero or more leading elements of <code>self</code>; does not modify <code>self</code>.\n<p>With a block …\n"],["take_while","Enumerable","Enumerable.html#method-i-take_while","()","<p>Calls the block with successive elements as long as the block returns a truthy value; returns an array …\n"],["take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take_while","()","<p>Like Enumerable#take_while, but chains operation to be lazy-evaluated.\n"],["tally","Enumerable","Enumerable.html#method-i-tally","(*args)","<p>Returns a hash containing the counts of equal elements:\n<p>Each key is an element of <code>self</code>.\n<p>Each value is the …\n"],["tan","Math","Math.html#method-c-tan","(p1)","<p>Returns the tangent of <code>x</code> in radians.\n<p>Domain: <code>(-INFINITY, INFINITY)</code>.\n<p>Range: <code>(-INFINITY, INFINITY)</code>.\n"],["tanh","Math","Math.html#method-c-tanh","(p1)","<p>Returns the hyperbolic tangent of <code>x</code> in radians.\n<p>Domain: <code>[-INFINITY, INFINITY]</code>.\n<p>Range: <code>[-1, 1]</code>.\n"],["tell","ARGF","ARGF.html#method-i-tell","()","<p>Returns the current offset (in bytes) of the current file in ARGF.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["tell","Dir","Dir.html#method-i-tell","()","<p>Returns the current position in <em>dir</em>. See also Dir#seek.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">tell</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["tell","IO","IO.html#method-i-tell","()","<p>Returns the current position (in bytes) in <code>self</code> (see Position):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">tell</span> <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["terminate","Thread","Thread.html#method-i-terminate","()","<p>Terminates <code>thr</code> and schedules another thread to be run, returning the terminated Thread.  If this is the …\n"],["termsig","Process::Status","Process/Status.html#method-i-termsig","()","<p>Returns the number of the signal that caused <em>stat</em> to terminate (or <code>nil</code> if self was not terminated by …\n"],["test","Kernel","Kernel.html#method-i-test","(*args)","<p>Uses the character <code>cmd</code> to perform various tests on <code>file1</code> (first table below) or on <code>file1</code> and <code>file2</code> (second …\n"],["thread_variable?","Thread","Thread.html#method-i-thread_variable-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a thread-local variable.\n\n<pre>me = Thread.current\nme.thread_variable_set(:oliver, ...</pre>\n"],["thread_variable_get","Thread","Thread.html#method-i-thread_variable_get","(p1)","<p>Returns the value of a thread local variable that has been set.  Note that these are different than fiber …\n"],["thread_variable_set","Thread","Thread.html#method-i-thread_variable_set","(p1, p2)","<p>Sets a thread local with <code>key</code> to <code>value</code>.  Note that these are local to threads, and not to fibers.  Please …\n"],["thread_variables","Thread","Thread.html#method-i-thread_variables","()","<p>Returns an array of the names of the thread-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, ...</pre>\n"],["throw","Kernel","Kernel.html#method-i-throw","(p1, p2 = v2)","<p>Transfers control to the end of the active <code>catch</code> block waiting for <em>tag</em>. Raises <code>UncaughtThrowError</code> if …\n"],["thursday?","Time","Time.html#method-i-thursday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Thursday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-06 ...</span>\n</pre>\n"],["timeout","Regexp","Regexp.html#method-i-timeout","()","<p>It returns the timeout interval for Regexp matching in second. <code>nil</code> means no default timeout configuration. …\n"],["timeout","Regexp","Regexp.html#method-c-timeout","()","<p>It returns the current default timeout interval for Regexp matching in second. <code>nil</code> means no default timeout …\n"],["timeout=","Regexp","Regexp.html#method-c-timeout-3D","(p1)","<p>It sets the default timeout interval for Regexp matching in second. <code>nil</code> means no default timeout configuration. …\n"],["timeout_after","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-timeout_after","()","<p>Invoked by Timeout.timeout to execute the given <code>block</code> within the given <code>duration</code>. It can also be invoked …\n"],["times","Integer","Integer.html#method-i-times","()","<p>Calls the given block <code>self</code> times with each integer in <code>(0..self-1)</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = []\n<span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">times</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">push</span>(<span class=\"ruby-identifier\">i</span>) } <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["times","Process","Process.html#method-c-times","()","<p>Returns a <code>Tms</code> structure (see Process::Tms) that contains user and system CPU times for this process, …\n"],["to_a","ARGF","ARGF.html#method-i-to_a","(*args)","<p>Reads each file in ARGF in its entirety, returning an Array containing lines from the files. Lines are …\n"],["to_a","Array","Array.html#method-i-to_a","()","<p>When <code>self</code> is an instance of Array, returns <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [:foo, &quot;bar&quot;, 2]</span>\n</pre>\n<p>Otherwise …\n"],["to_a","ENV","ENV.html#method-c-to_a","()","<p>Returns the contents of ENV as an Array of 2-element Arrays, each of which is a name/value pair:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["to_a","Enumerable","Enumerable.html#method-i-to_a","(*args)","<p>Returns an array containing the items in <code>self</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">0</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [0, 1, 2, 3, 4]</span>\n</pre>\n<p>Enumerable#entries is an …\n"],["to_a","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_a","()","<p>Expands <code>lazy</code> enumerator to an array. See Enumerable#to_a.\n"],["to_a","Hash","Hash.html#method-i-to_a","()","<p>Returns a new Array of 2-element Array objects; each nested Array contains a key-value pair from <code>self</code> …\n"],["to_a","MatchData","MatchData.html#method-i-to_a","()","<p>Returns the array of matches:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; ...</span>\n</pre>\n"],["to_a","NilClass","NilClass.html#method-i-to_a","()","<p>Always returns an empty array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; []</span>\n</pre>\n"],["to_a","Range","Range.html#method-i-to_a","()","<p>Returns an array containing the elements in <code>self</code>, if a finite collection; raises an exception otherwise. …\n"],["to_a","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_a","()","<p>Returns an Array with 14 elements representing the instruction sequence with the following data:\n<p>magic … &mdash; "],["to_a","Struct","Struct.html#method-i-to_a","()","<p>Returns the values in <code>self</code> as an array:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["to_a","Time","Time.html#method-i-to_a","()","<p>Returns a 10-element array of values representing <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">to_a</span>\n<span class=\"ruby-comment\"># =&gt; [0,   0,   0,  ...</span>\n</pre>\n"],["to_ary","Array","Array.html#method-i-to_ary","()","<p>Returns <code>self</code>.\n"],["to_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_binary","(*args)","<p>Returns serialized iseq binary format data as a String object. A corresponding iseq object is created …\n"],["to_c","Complex","Complex.html#method-i-to_c","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_c</span>      <span class=\"ruby-comment\">#=&gt; (2+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_c</span>  <span class=\"ruby-comment\">#=&gt; (-8+6i)</span>\n</pre>\n"],["to_c","NilClass","NilClass.html#method-i-to_c","()","<p>Returns zero as a complex.\n"],["to_c","Numeric","Numeric.html#method-i-to_c","()","<p>Returns the value as a complex.\n"],["to_c","String","String.html#method-i-to_c","()","<p>Returns a complex which denotes the string form.  The parser ignores leading whitespaces and trailing …\n"],["to_enum","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_enum","(*args)","<p>Similar to Object#to_enum, except it returns a lazy enumerator. This makes it easy to define Enumerable …\n"],["to_enum","Object","Object.html#method-i-to_enum","(*args)","<p>Creates a new Enumerator which will enumerate by calling <code>method</code> on <code>obj</code>, passing <code>args</code> if any. What was …\n"],["to_f","Complex","Complex.html#method-i-to_f","()","<p>Returns the value as a float if possible (the imaginary part should be exactly zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">to_f</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_f","Integer","Integer.html#method-i-to_f","()","<p>Converts <code>self</code> to a Float:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">to_f</span>  <span class=\"ruby-comment\"># =&gt; 1.0</span>\n<span class=\"ruby-value\">-1</span>.<span class=\"ruby-identifier\">to_f</span> <span class=\"ruby-comment\"># =&gt; -1.0</span>\n</pre>\n<p>If the value of <code>self</code> does not fit in a Float …\n"],["to_f","Rational","Rational.html#method-i-to_f","()","<p>Returns the value as a Float.\n\n<pre>Rational(2).to_f      #=&gt; 2.0\nRational(9, 4).to_f   #=&gt; 2.25\nRational(-3, ...</pre>\n"],["to_f","String","String.html#method-i-to_f","()","<p>Returns the result of interpreting leading characters in <code>self</code> as a Float:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;3.14159&#39;</span>.<span class=\"ruby-identifier\">to_f</span>  <span class=\"ruby-comment\"># =&gt; 3.14159 ...</span>\n</pre>\n"],["to_f","Time","Time.html#method-i-to_f","()","<p>Returns the value of <code>self</code> as a Float number Epoch seconds; subseconds are included.\n<p>The stored value of …\n"],["to_h","Array","Array.html#method-i-to_h","()","<p>Returns a new Hash formed from <code>self</code>.\n<p>When a block is given, calls the block with each array element; the …\n"],["to_h","Data","Data.html#method-i-to_h","()","<p>Returns Hash representation of the data object.\n\n<pre>Measure = Data.define(:amount, :unit)\ndistance = Measure[10, ...</pre>\n"],["to_h","ENV","ENV.html#method-c-to_h","()","<p>With no block, returns a Hash containing all name/value pairs from ENV:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, &#39;bar&#39; ...</pre>\n"],["to_h","Enumerable","Enumerable.html#method-i-to_h","(*args)","<p>When <code>self</code> consists of 2-element arrays, returns a hash each of whose entries is the key-value pair formed …\n"],["to_h","Hash","Hash.html#method-i-to_h","()","<p>For an instance of Hash, returns <code>self</code>.\n<p>For a subclass of Hash, returns a new Hash containing the content …\n"],["to_h","NilClass","NilClass.html#method-i-to_h","()","<p>Always returns an empty hash.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_h</span>   <span class=\"ruby-comment\">#=&gt; {}</span>\n</pre>\n"],["to_h","Struct","Struct.html#method-i-to_h","()","<p>Returns a hash containing the name and value for each member:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_hash","ENV","ENV.html#method-c-to_hash","()","<p>Returns a Hash containing all name/value pairs from ENV:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">to_hash</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_hash","Hash","Hash.html#method-i-to_hash","()","<p>Returns <code>self</code>.\n"],["to_i","ARGF","ARGF.html#method-i-to_i","()","<p>Returns an integer representing the numeric file descriptor for the current file. Raises an ArgumentError …\n"],["to_i","Complex","Complex.html#method-i-to_i","()","<p>Returns the value as an integer if possible (the imaginary part should be exactly zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_i","Float","Float.html#method-i-to_i","()","<p>Returns <code>self</code> truncated to an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">to_i</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-comment\"># =&gt; -1</span>\n</pre>\n<p>Note that the limited precision …\n"],["to_i","IO","IO.html#method-i-to_i","()","<p>Returns the integer file descriptor for the stream:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdin</span>.<span class=\"ruby-identifier\">fileno</span>             <span class=\"ruby-comment\"># =&gt; 0</span>\n<span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_i","Process::Status","Process/Status.html#method-i-to_i","()","<p>Returns the bits in <em>stat</em> as an Integer. Poking around in these bits is platform dependent.\n\n<pre>fork { exit ...</pre>\n"],["to_i","Rational","Rational.html#method-i-to_i","()","<p>Returns the truncated value as an integer.\n<p>Equivalent to Rational#truncate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">to_i</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["to_i","String","String.html#method-i-to_i","(*args)","<p>Returns the result of interpreting leading characters in <code>self</code> as an integer in the given <code>base</code> (which …\n"],["to_i","Time","Time.html#method-i-to_i","()","<p>Returns the value of <code>self</code> as integer Epoch seconds; subseconds are truncated (not rounded):\n\n<pre>Time.utc(1970, ...</pre>\n"],["to_int","Float","Float.html#method-i-to_int","()","<p>Returns <code>self</code> truncated to an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">to_i</span>    <span class=\"ruby-comment\"># =&gt; 1</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">to_i</span> <span class=\"ruby-comment\"># =&gt; -1</span>\n</pre>\n<p>Note that the limited precision …\n"],["to_int","Numeric","Numeric.html#method-i-to_int","()","<p>Returns <code>self</code> as an integer; converts using method <code>to_i</code> in the derived class.\n<p>Of the Core and Standard …\n"],["to_io","ARGF","ARGF.html#method-i-to_io","()","<p>Returns an IO object representing the current file. This will be a File object unless the current file …\n"],["to_io","IO","IO.html#method-i-to_io","()","<p>Returns <code>self</code>.\n"],["to_path","Dir","Dir.html#method-i-to_path","()","<p>Returns the path parameter passed to <em>dir</em>’s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["to_path","File","File.html#method-i-to_path","()","<p>Returns the string filepath used to create <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>) <span class=\"ruby-comment\"># =&gt; #&lt;File:t.txt&gt;</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">path</span>      <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_proc","Enumerator::Yielder","Enumerator/Yielder.html#method-i-to_proc","()","<p>Returns a Proc object that takes arguments and yields them.\n<p>This method is implemented so that a Yielder …\n"],["to_proc","Hash","Hash.html#method-i-to_proc","()","<p>Returns a Proc object that maps a key to its value:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">proc</span> = <span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">to_proc</span>\n<span class=\"ruby-identifier\">proc</span>.<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_proc","Method","Method.html#method-i-to_proc","()","<p>Returns a Proc object corresponding to this method.\n"],["to_proc","Proc","Proc.html#method-i-to_proc","()","<p>Part of the protocol for converting objects to Proc objects. Instances of class Proc simply return themselves. …\n"],["to_proc","Symbol","Symbol.html#method-i-to_proc","()","<p>Returns a Proc object which calls the method with name of <code>self</code> on the first parameter and passes the …\n"],["to_r","Complex","Complex.html#method-i-to_r","()","<p>Returns the value as a rational if possible (the imaginary part should be exactly zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">to_r</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_r","Float","Float.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span>.<span class=\"ruby-identifier\">to_r</span>    <span class=\"ruby-comment\">#=&gt; (2/1)</span>\n<span class=\"ruby-value\">2.5</span>.<span class=\"ruby-identifier\">to_r</span>    <span class=\"ruby-comment\">#=&gt; (5/2)</span>\n<span class=\"ruby-value\">-0.75</span>.<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (-3/4)</span>\n<span class=\"ruby-value\">0.0</span>.<span class=\"ruby-identifier\">to_r</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_r","Integer","Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">to_r</span>        <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">&lt;&lt;</span><span class=\"ruby-value\">64</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (18446744073709551616/1)</span>\n</pre>\n"],["to_r","NilClass","NilClass.html#method-i-to_r","()","<p>Returns zero as a rational.\n"],["to_r","Rational","Rational.html#method-i-to_r","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_r</span>      <span class=\"ruby-comment\">#=&gt; (2/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (-4/3)</span>\n</pre>\n"],["to_r","String","String.html#method-i-to_r","()","<p>Returns the result of interpreting leading characters in <code>str</code> as a rational.  Leading whitespace and extraneous …\n"],["to_r","Time","Time.html#method-i-to_r","()","<p>Returns the value of <code>self</code> as a Rational exact number of Epoch seconds;\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">to_r</span> <span class=\"ruby-comment\"># =&gt; (16571402750320203/10000000)</span>\n</pre>\n"],["to_s","ARGF","ARGF.html#method-i-to_s","()","<p>Returns “ARGF”.\n"],["to_s","Array","Array.html#method-i-to_s","()","<p>Returns the new String formed by calling method <code>#inspect</code> on each array element:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Complex","Complex.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_s</span>                       <span class=\"ruby-comment\">#=&gt; &quot;2+0i&quot;</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;-8/6&#39;</span>).<span class=\"ruby-identifier\">to_s</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Data","Data.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>:\n\n<pre>Measure = Data.define(:amount, :unit)\n\ndistance = Measure[10, ...</pre>\n"],["to_s","ENV","ENV.html#method-c-to_s","()","<p>Returns String ‘ENV’:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;ENV&quot;</span>\n</pre>\n"],["to_s","Encoding","Encoding.html#method-i-to_s","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["to_s","Exception","Exception.html#method-i-to_s","()","<p>Returns exception’s message (or the name of the exception if no message is set).\n"],["to_s","FalseClass","FalseClass.html#method-i-to_s","()","<p>The string representation of <code>false</code> is “false”.\n"],["to_s","Fiber","Fiber.html#method-i-to_s","()",""],["to_s","Float","Float.html#method-i-to_s","()","<p>Returns a string containing a representation of <code>self</code>; depending of the value of <code>self</code>, the string representation …\n"],["to_s","Hash","Hash.html#method-i-to_s","()","<p>Returns a new String containing the hash entries:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; &quot;{:foo=&gt;0, ...</span>\n</pre>\n"],["to_s","IO::Buffer","IO/Buffer.html#method-i-to_s","()","<p>Short representation of the buffer. It includes the address, size and symbolic flags. This format is …\n"],["to_s","Integer","Integer.html#method-i-to_s","(*args)","<p>Returns a string containing the place-value representation of <code>self</code> in radix <code>base</code> (in 2..36).\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","MatchData","MatchData.html#method-i-to_s","()","<p>Returns the matched string:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; #&lt;MatchData &quot;HX1138&quot; 1:&quot;H&quot; 2:&quot;X&quot; ...</span>\n</pre>\n"],["to_s","Method","Method.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["to_s","Module","Module.html#method-i-to_s","()","<p>Returns a string representing this module or class. For basic classes and modules, this is the name. …\n"],["to_s","NilClass","NilClass.html#method-i-to_s","()","<p>Always returns the empty string.\n"],["to_s","Object","Object.html#method-i-to_s","()","<p>Returns a string representing <em>obj</em>. The default #to_s prints the object’s class and an encoding of …\n"],["to_s","Proc","Proc.html#method-i-to_s","()","<p>Returns the unique identifier for this proc, along with an indication of where the proc was defined. …\n"],["to_s","Process::Status","Process/Status.html#method-i-to_s","()","<p>Show pid and exit status as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_s</span>         <span class=\"ruby-comment\">#=&gt; &quot;pid 12766 exit 1&quot;</span>\n</pre>\n"],["to_s","Range","Range.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>, including <code>begin.to_s</code> and <code>end.to_s</code>:\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_s</span>  <span class=\"ruby-comment\"># =&gt; &quot;1..4&quot;</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">4</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Rational","Rational.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_s</span>      <span class=\"ruby-comment\">#=&gt; &quot;2/1&quot;</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_s</span>  <span class=\"ruby-comment\">#=&gt; &quot;-4/3&quot;</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-string\">&#39;1/2&#39;</span>).<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Regexp","Regexp.html#method-i-to_s","()","<p>Returns a string showing the options and string of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r0</span> = <span class=\"ruby-regexp\">/ab+c/ix</span>\n<span class=\"ruby-identifier\">s0</span> = <span class=\"ruby-identifier\">r0</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;(?ix-m:ab+c)&quot;</span>\n</pre>\n"],["to_s","String","String.html#method-i-to_s","()","<p>Returns <code>self</code> if <code>self</code> is a String, or <code>self</code> converted to a String if <code>self</code> is a subclass of String.\n<p>String#to_str …\n"],["to_s","Struct","Struct.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Customer</span> = <span class=\"ruby-constant\">Struct</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:address</span>, <span class=\"ruby-value\">:zip</span>) <span class=\"ruby-comment\"># =&gt; Customer</span>\n<span class=\"ruby-identifier\">joe</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","Symbol","Symbol.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code> (not including the leading colon):\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:foo</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;foo&quot;</span>\n</pre>\n<p>Symbol#id2name …\n"],["to_s","Thread","Thread.html#method-i-to_s","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["to_s","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-to_s","()","<p>Returns a Kernel#caller style string representing this frame.\n"],["to_s","Time","Time.html#method-i-to_s","()","<p>Returns a string representation of <code>self</code>, without subseconds:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">31</span>, <span class=\"ruby-value\">23</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">59</span>, <span class=\"ruby-value\">0.5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","TrueClass","TrueClass.html#method-i-to_s","()","<p>The string representation of <code>true</code> is “true”.\n"],["to_s","UnboundMethod","UnboundMethod.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["to_s","UncaughtThrowError","UncaughtThrowError.html#method-i-to_s","()","<p>Returns formatted message with the inspected tag.\n"],["to_str","String","String.html#method-i-to_str","()","<p>Returns <code>self</code> if <code>self</code> is a String, or <code>self</code> converted to a String if <code>self</code> is a subclass of String.\n<p>String#to_str …\n"],["to_sym","String","String.html#method-i-to_sym","()","<p>Returns the Symbol corresponding to <em>str</em>, creating the symbol if it did not previously exist. See Symbol#id2name …\n"],["to_sym","Symbol","Symbol.html#method-i-to_sym","()","<p>Returns <code>self</code>.\n<p>Symbol#intern is an alias for Symbol#to_sym.\n<p>Related: String#to_sym.\n"],["to_tty?","Exception","Exception.html#method-c-to_tty-3F","()","<p>Returns <code>true</code> if exception messages will be sent to a tty.\n"],["to_write_io","ARGF","ARGF.html#method-i-to_write_io","()","<p>Returns IO instance tied to <em>ARGF</em> for writing if inplace mode is enabled.\n"],["token","Ripper","Ripper.html#method-i-token","()","<p>Return the current token string.\n"],["total_time","GC::Profiler","GC/Profiler.html#method-c-total_time","()","<p>The total time used for garbage collection in seconds\n"],["tr","String","String.html#method-i-tr","(p1, p2)","<p>Returns a copy of <code>self</code> with each character specified by string <code>selector</code> translated to the corresponding …\n"],["tr!","String","String.html#method-i-tr-21","(p1, p2)","<p>Like String#tr, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise.\n"],["tr_s","String","String.html#method-i-tr_s","(p1, p2)","<p>Like String#tr, but also squeezes the modified portions of the translated string; returns a new string …\n"],["tr_s!","String","String.html#method-i-tr_s-21","(p1, p2)","<p>Like String#tr_s, but modifies <code>self</code> in place. Returns <code>self</code> if any changes were made, <code>nil</code> otherwise.\n<p>Related: …\n"],["trace_points","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-trace_points","()","<p>Return trace points in the instruction sequence. Return an array of [line, event_symbol] pair.\n"],["trace_var","Kernel","Kernel.html#method-i-trace_var","(*args)","<p>Controls tracing of assignments to global variables. The parameter <code>symbol</code> identifies the variable (as …\n"],["transfer","Fiber","Fiber.html#method-i-transfer","(*args)","<p>Transfer control to another fiber, resuming it from where it last stopped or starting it if it was not …\n"],["transfer","IO::Buffer","IO/Buffer.html#method-i-transfer","()","<p>Transfers ownership to a new buffer, deallocating the current one.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">buffer</span> = <span class=\"ruby-constant\">IO</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Buffer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test&#39;</span>)\n<span class=\"ruby-identifier\">other</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["transform_keys","Hash","Hash.html#method-i-transform_keys","(*args)","<p>Returns a new Hash object; each entry has:\n<p>A key provided by the block.\n<p>The value from <code>self</code>.\n"],["transform_keys!","Hash","Hash.html#method-i-transform_keys-21","(*args)","<p>Same as Hash#transform_keys but modifies the receiver in place instead of returning a new hash.\n"],["transform_values","Hash","Hash.html#method-i-transform_values","()","<p>Returns a new Hash object; each entry has:\n<p>A key from <code>self</code>.\n<p>A value provided by the block.\n"],["transform_values!","Hash","Hash.html#method-i-transform_values-21","()","<p>Returns <code>self</code>, whose keys are unchanged, and whose values are determined by the given block.\n\n<pre>h = {foo: ...</pre>\n"],["transpose","Array","Array.html#method-i-transpose","()","<p>Transposes the rows and columns in an Array of Arrays; the nested Arrays must all be the same size:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["trap","Kernel","Kernel.html#method-i-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a string such as “SIGALRM”, …\n"],["trap","Signal","Signal.html#method-c-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a string such as “SIGALRM”, …\n"],["truncate","File","File.html#method-c-truncate","(p1, p2)","<p>Truncates the file <em>file_name</em> to be at most <em>integer</em> bytes long. Not available on all platforms.\n\n<pre>f = File.new(&quot;out&quot;, ...</pre>\n"],["truncate","File","File.html#method-i-truncate","(p1)","<p>Truncates <em>file</em> to at most <em>integer</em> bytes. The file must be opened for writing. Not available on all platforms. …\n"],["truncate","Float","Float.html#method-i-truncate","(*args)","<p>Returns <code>self</code> truncated (toward zero) to a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is positive, …\n"],["truncate","Integer","Integer.html#method-i-truncate","(*args)","<p>Returns <code>self</code> truncated (toward zero) to a precision of <code>ndigits</code> decimal digits.\n<p>When <code>ndigits</code> is negative, …\n"],["truncate","Numeric","Numeric.html#method-i-truncate","(*args)","<p>Returns <code>self</code> truncated (toward zero) to a precision of <code>digits</code> decimal digits.\n<p>Numeric implements this …\n"],["truncate","Rational","Rational.html#method-i-truncate","(*args)","<p>Returns <code>rat</code> truncated (toward zero) to a precision of <code>ndigits</code> decimal digits (default: 0).\n<p>When the precision …\n"],["try_convert","Array","Array.html#method-c-try_convert","(p1)","<p>If <code>object</code> is an Array object, returns <code>object</code>.\n<p>Otherwise if <code>object</code> responds to <code>:to_ary</code>, calls <code>object.to_ary</code> …\n"],["try_convert","Hash","Hash.html#method-c-try_convert","(p1)","<p>If <code>obj</code> is a Hash object, returns <code>obj</code>.\n<p>Otherwise if <code>obj</code> responds to <code>:to_hash</code>, calls <code>obj.to_hash</code> and returns …\n"],["try_convert","IO","IO.html#method-c-try_convert","(p1)","<p>Attempts to convert <code>object</code> into an IO object via method <code>to_io</code>; returns the new IO object if successful, …\n"],["try_convert","Regexp","Regexp.html#method-c-try_convert","(p1)","<p>Returns <code>object</code> if it is a regexp:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">try_convert</span>(<span class=\"ruby-regexp\">/re/</span>) <span class=\"ruby-comment\"># =&gt; /re/</span>\n</pre>\n<p>Otherwise if <code>object</code> responds to <code>:to_regexp</code> …\n"],["try_convert","String","String.html#method-c-try_convert","(p1)","<p>If <code>object</code> is a String object, returns <code>object</code>.\n<p>Otherwise if <code>object</code> responds to <code>:to_str</code>, calls <code>object.to_str</code> …\n"],["try_lock","Thread::Mutex","Thread/Mutex.html#method-i-try_lock","()","<p>Attempts to obtain the lock and returns immediately. Returns <code>true</code> if the lock was granted.\n"],["tty?","IO","IO.html#method-i-tty-3F","()","<p>Returns <code>true</code> if the stream is associated with a terminal device (tty), <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;t.txt&#39;</span>).<span class=\"ruby-identifier\">isatty</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["tuesday?","Time","Time.html#method-i-tuesday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Tuesday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">4</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-04 00:00:00 ...</span>\n</pre>\n"],["tv_nsec","Time","Time.html#method-i-tv_nsec","()","<p>Returns the number of nanoseconds in the subseconds part of <code>self</code> in the range (0..999_999_999); lower-order …\n"],["tv_sec","Time","Time.html#method-i-tv_sec","()","<p>Returns the value of <code>self</code> as integer Epoch seconds; subseconds are truncated (not rounded):\n\n<pre>Time.utc(1970, ...</pre>\n"],["tv_usec","Time","Time.html#method-i-tv_usec","()","<p>Returns the number of microseconds in the subseconds part of <code>self</code> in the range (0..999_999); lower-order …\n"],["uid","File::Stat","File/Stat.html#method-i-uid","()","<p>Returns the numeric user id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid","Process","Process.html#method-c-uid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid=","Process","Process.html#method-c-uid-3D","(p1)","<p>Sets the (user) user ID for this process. Not available on all platforms.\n"],["umask","File","File.html#method-c-umask","(*args)","<p>Returns the current umask value for this process. If the optional argument is given, set the umask to …\n"],["unbind","Method","Method.html#method-i-unbind","()","<p>Dissociates <em>meth</em> from its current receiver. The resulting UnboundMethod can subsequently be bound to …\n"],["unblock","Fiber::SchedulerInterface","Fiber/SchedulerInterface.html#method-i-unblock","()","<p>Invoked to wake up Fiber previously blocked with #block (for example, Mutex#lock calls #block and Mutex#unlock …\n"],["undef_method","Module","Module.html#method-i-undef_method","(*args)","<p>Prevents the current class from responding to calls to the named method. Contrast this with <code>remove_method</code> …\n"],["undefine_finalizer","ObjectSpace","ObjectSpace.html#method-c-undefine_finalizer","(p1)","<p>Removes all finalizers for <em>obj</em>.\n"],["undefined_instance_methods","Module","Module.html#method-i-undefined_instance_methods","()","<p>Returns a list of the undefined instance methods defined in <em>mod</em>. The undefined methods of any ancestors …\n"],["undump","String","String.html#method-i-undump","()","<p>Returns an unescaped version of <code>self</code>:\n\n<pre>s_orig = &quot;\\f\\x00\\xff\\\\\\&quot;&quot;    # =&gt; &quot;\\f\\u0000\\xFF\\\\\\&quot;&quot;\ns_dumped = ...</pre>\n"],["ungetbyte","IO","IO.html#method-i-ungetbyte","(p1)","<p>Pushes back (“unshifts”) the given data onto the stream’s buffer, placing the data so that …\n"],["ungetc","IO","IO.html#method-i-ungetc","(p1)","<p>Pushes back (“unshifts”) the given data onto the stream’s buffer, placing the data so that …\n"],["unicode_normalize","String","String.html#method-i-unicode_normalize","(*args)","<p>Returns a copy of <code>self</code> with Unicode normalization applied.\n<p>Argument <code>form</code> must be one of the following …\n"],["unicode_normalize!","String","String.html#method-i-unicode_normalize-21","(*args)","<p>Like String#unicode_normalize, except that the normalization is performed on <code>self</code>.\n<p>Related String#unicode_normalized? …\n"],["unicode_normalized?","String","String.html#method-i-unicode_normalized-3F","(*args)","<p>Returns <code>true</code> if <code>self</code> is in the given <code>form</code> of Unicode normalization, <code>false</code> otherwise. The <code>form</code> must be …\n"],["union","Array","Array.html#method-i-union","(*args)","<p>Returns a new Array that is the union of <code>self</code> and all given Arrays <code>other_arrays</code>; duplicates are removed; …\n"],["union","Regexp","Regexp.html#method-c-union","(*args)","<p>Returns a new regexp that is the union of the given patterns:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span> = <span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">union</span>(<span class=\"ruby-node\">%w[cat dog]</span>)      <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["uniq","Array","Array.html#method-i-uniq","()","<p>Returns a new Array containing those elements from <code>self</code> that are not duplicates, the first occurrence …\n"],["uniq","Enumerable","Enumerable.html#method-i-uniq","()","<p>With no block, returns a new array containing only unique elements; the array has no two elements <code>e0</code> …\n"],["uniq","Enumerator::Lazy","Enumerator/Lazy.html#method-i-uniq","()","<p>Like Enumerable#uniq, but chains operation to be lazy-evaluated.\n"],["uniq!","Array","Array.html#method-i-uniq-21","()","<p>Removes duplicate elements from <code>self</code>, the first occurrence always being retained; returns <code>self</code> if any …\n"],["unlink","Dir","Dir.html#method-c-unlink","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.\n"],["unlink","File","File.html#method-c-unlink","(*args)","<p>Deletes the named files, returning the number of names passed as arguments. Raises an exception on any …\n"],["unlock","Thread::Mutex","Thread/Mutex.html#method-i-unlock","()","<p>Releases the lock. Raises <code>ThreadError</code> if <code>mutex</code> wasn’t locked by the current thread.\n"],["unshift","Array","Array.html#method-i-unshift","(*args)","<p>Prepends the given <code>objects</code> to <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-string\">&#39;bar&#39;</span>, <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">unshift</span>(<span class=\"ruby-value\">:bam</span>, <span class=\"ruby-value\">:bat</span>) <span class=\"ruby-comment\"># =&gt; [:bam, :bat, :foo, ...</span>\n</pre>\n"],["untrace_var","Kernel","Kernel.html#method-i-untrace_var","(*args)","<p>Removes tracing for the specified command on the given global variable and returns <code>nil</code>. If no command …\n"],["upcase","String","String.html#method-i-upcase","(*args)","<p>Returns a string containing the upcased characters in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-comment\"># =&gt; &quot;Hello World!&quot;</span>\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">upcase</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["upcase","Symbol","Symbol.html#method-i-upcase","(*args)","<p>Equivalent to <code>sym.to_s.upcase.to_sym</code>.\n<p>See String#upcase.\n"],["upcase!","String","String.html#method-i-upcase-21","(*args)","<p>Upcases the characters in <code>self</code>; returns <code>self</code> if any changes were made, <code>nil</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&#39;Hello World!&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["update","ENV","ENV.html#method-c-update","(*args)","<p>ENV.update is an alias for ENV.merge!.\n<p>Adds to ENV each key/value pair in the given <code>hash</code>; returns ENV: …\n"],["update","Hash","Hash.html#method-i-update","(*args)","<p>Merges each of <code>other_hashes</code> into <code>self</code>; returns <code>self</code>.\n<p>Each argument in <code>other_hashes</code> must be a Hash.\n<p>Method …\n"],["upto","Integer","Integer.html#method-i-upto","(p1)","<p>Calls the given block with each integer value from <code>self</code> up to <code>limit</code>; returns <code>self</code>:\n\n<pre>a = []\n5.upto(10) {|i| ...</pre>\n"],["upto","String","String.html#method-i-upto","(p1, p2 = v2)","<p>With a block given, calls the block with each String value returned by successive calls to String#succ …\n"],["urandom","Random","Random.html#method-c-urandom","(p1)","<p>Returns a string, using platform providing features. Returned value is expected to be a cryptographically …\n"],["usec","Time","Time.html#method-i-usec","()","<p>Returns the number of microseconds in the subseconds part of <code>self</code> in the range (0..999_999); lower-order …\n"],["used_modules","Module","Module.html#method-c-used_modules","()","<p>Returns an array of all modules used in the current scope. The ordering of modules in the resulting array …\n"],["used_refinements","Module","Module.html#method-c-used_refinements","()","<p>Returns an array of all modules used in the current scope. The ordering of modules in the resulting array …\n"],["utc","Time","Time.html#method-c-utc","(*args)","<p>Returns a new Time object based the on given arguments, in the UTC timezone.\n<p>With one to seven arguments …\n"],["utc","Time","Time.html#method-i-utc","()","<p>Returns <code>self</code>, converted to the UTC timezone:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 00:00:00 -0600</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">utc?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["utc?","Time","Time.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a time in UTC (GMT):\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">now</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>\n<span class=\"ruby-comment\"># =&gt; 2022-08-18 10:24:13.5398485 -0500 ...</span>\n</pre>\n"],["utc_offset","Time","Time.html#method-i-utc_offset","()","<p>Returns the offset in seconds between the timezones of UTC and <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">utc_offset</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["utime","File","File.html#method-c-utime","(*args)","<p>Sets the access and modification times of each named file to the first two arguments. If a file is a …\n"],["valid?","IO::Buffer","IO/Buffer.html#method-i-valid-3F","()","<p>Returns whether the buffer data is accessible.\n<p>A buffer becomes invalid if it is a slice of another buffer …\n"],["valid_encoding?","String","String.html#method-i-valid_encoding-3F","()","<p>Returns <code>true</code> if <code>self</code> is encoded correctly, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;\\xc2\\xa1&quot;</span>.<span class=\"ruby-identifier\">force_encoding</span>(<span class=\"ruby-string\">&quot;UTF-8&quot;</span>).<span class=\"ruby-identifier\">valid_encoding?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["value","Thread","Thread.html#method-i-value","()","<p>Waits for <code>thr</code> to complete, using #join, and returns its value or raises the exception which terminated …\n"],["value","UncaughtThrowError","UncaughtThrowError.html#method-i-value","()","<p>Return the return value which was called for.\n"],["value?","ENV","ENV.html#method-c-value-3F","(p1)","<p>Returns <code>true</code> if <code>value</code> is the value for some environment variable name, <code>false</code> otherwise:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["value?","Hash","Hash.html#method-i-value-3F","(p1)","<p>Method #value? is an alias for #has_value?.\n<p>Returns <code>true</code> if <code>value</code> is a value in <code>self</code>, otherwise <code>false</code> …\n"],["values","ENV","ENV.html#method-c-values","()","<p>Returns all environment variable values in an Array:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">values</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["values","Hash","Hash.html#method-i-values","()","<p>Returns a new Array containing all values in <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = {<span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-value\">2</span>}\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">values</span> <span class=\"ruby-comment\"># =&gt; [0, 1, 2]</span>\n</pre>\n"],["values","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-values","()","<p>Iterates over values and objects in a weakly referenced object\n"],["values","Struct","Struct.html#method-i-values","()","<p>Returns the values in <code>self</code> as an array:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["values_at","Array","Array.html#method-i-values_at","(*args)","<p>Returns a new Array whose elements are the elements of <code>self</code> at the given Integer or Range <code>indexes</code>.\n<p>For …\n"],["values_at","ENV","ENV.html#method-c-values_at","(*args)","<p>Returns an Array containing the environment variable values associated with the given names:\n\n<pre>ENV.replace(&#39;foo&#39; ...</pre>\n"],["values_at","Hash","Hash.html#method-i-values_at","(*args)","<p>Returns a new Array containing values for the given <code>keys</code>:\n\n<pre>h = {foo: 0, bar: 1, baz: 2}\nh.values_at(:baz, ...</pre>\n"],["values_at","MatchData","MatchData.html#method-i-values_at","(*args)","<p>Returns match and captures at the given <code>indexes</code>, which may include any mixture of:\n<p>Integers.\n<p>Ranges.\n"],["values_at","Struct","Struct.html#method-i-values_at","(*args)","<p>Returns an array of values from <code>self</code>.\n<p>With integer arguments <code>integers</code> given, returns an array containing …\n"],["verify_internal_consistency","GC","GC.html#method-c-verify_internal_consistency","()","<p>Verify internal consistency.\n<p>This method is implementation specific. Now this method checks generational …\n"],["verify_transient_heap_internal_consistency","GC","GC.html#method-c-verify_transient_heap_internal_consistency","()",""],["wait","IO","IO.html#method-i-wait","(*args)","<p>Waits until the IO becomes ready for the specified events and returns the subset of events that become …\n"],["wait","Process","Process.html#method-c-wait","(*args)","<p>Waits for a child process to exit, returns its process id, and sets <code>$?</code> to a Process::Status object containing …\n"],["wait","Process::Status","Process/Status.html#method-c-wait","(*args)","<p>Waits for a child process to exit and returns a Process::Status object containing information on that …\n"],["wait","Thread::ConditionVariable","Thread/ConditionVariable.html#method-i-wait","(p1, p2 = v2)","<p>Releases the lock held in <code>mutex</code> and waits; reacquires the lock on wakeup.\n<p>If <code>timeout</code> is given, this method …\n"],["wait2","Process","Process.html#method-c-wait2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact semantics) and returns an array containing …\n"],["wait_priority","IO","IO.html#method-i-wait_priority","(*args)","<p>Waits until IO is priority and returns a truthy value or a falsy value when times out. Priority data …\n"],["wait_readable","IO","IO.html#method-i-wait_readable","(*args)","<p>Waits until IO is readable and returns a truthy value, or a falsy value when times out.  Returns a truthy …\n"],["wait_writable","IO","IO.html#method-i-wait_writable","(*args)","<p>Waits until IO is writable and returns a truthy value or a falsy value when times out.\n"],["waitall","Process","Process.html#method-c-waitall","()","<p>Waits for all children, returning an array of <em>pid</em>/<em>status</em> pairs (where <em>status</em> is a Process::Status object). …\n"],["waitpid","Process","Process.html#method-c-waitpid","(*args)","<p>Waits for a child process to exit, returns its process id, and sets <code>$?</code> to a Process::Status object containing …\n"],["waitpid2","Process","Process.html#method-c-waitpid2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact semantics) and returns an array containing …\n"],["wakeup","Thread","Thread.html#method-i-wakeup","()","<p>Marks a given thread as eligible for scheduling, however it may still remain blocked on I/O.\n<p><strong>Note:</strong> This …\n"],["warn","Warning","Warning.html#method-i-warn","(p1, p2 = {})","<p>Writes warning message <code>msg</code> to $stderr. This method is called by Ruby for all emitted warnings. A <code>category</code> …\n"],["wday","Time","Time.html#method-i-wday","()","<p>Returns the integer day of the week for <code>self</code>, in range (0..6), with Sunday as zero.\n\n<pre>t = Time.new(2000, ...</pre>\n"],["wednesday?","Time","Time.html#method-i-wednesday-3F","()","<p>Returns <code>true</code> if <code>self</code> represents a Wednesday, <code>false</code> otherwise:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-05 ...</span>\n</pre>\n"],["with_index","Enumerator","Enumerator.html#method-i-with_index","(*args)","<p>Iterates the given block for each element with an index, which starts from <code>offset</code>.  If no block is given, …\n"],["with_index","Enumerator::Lazy","Enumerator/Lazy.html#method-i-with_index","(p1 = v1)","<p>If a block is given, returns a lazy enumerator that will iterate over the given block for each element …\n"],["with_object","Enumerator","Enumerator.html#method-i-with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object, <code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["world_readable?","File","File.html#method-c-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["world_readable?","File::Stat","File/Stat.html#method-i-world_readable-3F","()","<p>If <em>stat</em> is readable by others, returns an integer representing the file permission bits of <em>stat</em>. Returns …\n"],["world_readable?","FileTest","FileTest.html#method-i-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["world_writable?","File","File.html#method-c-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["world_writable?","File::Stat","File/Stat.html#method-i-world_writable-3F","()","<p>If <em>stat</em> is writable by others, returns an integer representing the file permission bits of <em>stat</em>. Returns …\n"],["world_writable?","FileTest","FileTest.html#method-i-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer representing the file permission bits of <em>file_name</em> …\n"],["writable?","File","File.html#method-c-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective user and group id of this process. See eaccess(3). …\n"],["writable?","File::Stat","File/Stat.html#method-i-writable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the effective user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">writable?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["writable?","FileTest","FileTest.html#method-i-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective user and group id of this process. See eaccess(3). …\n"],["writable_real?","File","File.html#method-c-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user and group id of this process. See access(3). …\n"],["writable_real?","File::Stat","File/Stat.html#method-i-writable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the real user id of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">writable_real?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["writable_real?","FileTest","FileTest.html#method-i-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user and group id of this process. See access(3). …\n"],["write","ARGF","ARGF.html#method-i-write","(p1)","<p>Writes <em>string</em> if inplace mode.\n"],["write","IO","IO.html#method-c-write","(*args)","<p>Opens the stream, writes the given <code>data</code> to it, and closes the stream; returns the number of bytes written. …\n"],["write","IO","IO.html#method-i-write","(*args)","<p>Writes each of the given <code>objects</code> to <code>self</code>, which must be opened for writing (see IO@Modes); returns the …\n"],["write","IO::Buffer","IO/Buffer.html#method-i-write","(p1, p2)",""],["xor!","IO::Buffer","IO/Buffer.html#method-i-xor-21","(p1)","<p>Modify the source buffer in place by applying the binary XOR operation to the source, using the mask, …\n"],["yday","Time","Time.html#method-i-yday","()","<p>Returns the integer day of the year of <code>self</code>, in range (1..366).\n\n<pre>Time.new(2000, 1, 1).yday   # =&gt; 1\nTime.new(2000, ...</pre>\n"],["year","Time","Time.html#method-i-year","()","<p>Returns the integer year for <code>self</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>, <span class=\"ruby-value\">6</span>)\n<span class=\"ruby-comment\"># =&gt; 2000-01-02 03:04:05 +000006 ...</span>\n</pre>\n"],["yield","Fiber","Fiber.html#method-c-yield","(*args)","<p>Yields control back to the context that resumed the fiber, passing along any arguments that were passed …\n"],["yield","Proc","Proc.html#method-i-yield","(*args)","<p>Invokes the block, setting the block’s parameters to the values in <em>params</em> using something close to …\n"],["yields_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-yields_directive","(foo, bar)","<p>The <code>:yields:</code> directive overrides the actual yield found in the Ruby code.\n<p>Click on the calling sequence …\n"],["yydebug","Ripper","Ripper.html#method-i-yydebug","()","<p>Get yydebug.\n"],["yydebug=","Ripper","Ripper.html#method-i-yydebug-3D","(p1)","<p>Set yydebug.\n"],["zero?","File","File.html#method-c-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","File::Stat","File/Stat.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a zero-length file; <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">zero?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n</pre>\n"],["zero?","FileTest","FileTest.html#method-i-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","Numeric","Numeric.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>zero</code> has a zero value, <code>false</code> otherwise.\n<p>Of the Core and Standard Library classes, only …\n"],["zip","Array","Array.html#method-i-zip","(*args)","<p>When no block given, returns a new Array <code>new_array</code> of size <code>self.size</code> whose elements are Arrays.\n<p>Each nested …\n"],["zip","Enumerable","Enumerable.html#method-i-zip","(*args)","<p>With no block given, returns a new array <code>new_array</code> of size self.size whose elements are arrays. Each …\n"],["zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-zip","(*args)","<p>Like Enumerable#zip, but chains operation to be lazy-evaluated. However, if a block is given to zip, …\n"],["zone","Time","Time.html#method-i-zone","()","<p>Returns the string name of the time zone for <code>self</code>:\n\n<pre>Time.utc(2000, 1, 1).zone # =&gt; &quot;UTC&quot;\nTime.new(2000, ...</pre>\n"],["|","Array","Array.html#method-i-7C","(p1)","<p>Returns the union of <code>array</code> and Array <code>other_array</code>; duplicates are removed; order is preserved; items are …\n"],["|","FalseClass","FalseClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or <code>false</code>; <code>true</code> otherwise.\n"],["|","IO::Buffer","IO/Buffer.html#method-i-7C","(p1)","<p>Generate a new buffer the same size as the source by applying the binary OR operation to the source, …\n"],["|","Integer","Integer.html#method-i-7C","(p1)","<p>Bitwise OR; each bit in the result is 1 if either corresponding bit in <code>self</code> or <code>other</code> is 1, 0 otherwise: …\n"],["|","NilClass","NilClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or <code>false</code>; <code>true</code> otherwise.\n"],["|","TrueClass","TrueClass.html#method-i-7C","(p1)","<p>Or—Returns <code>true</code>. As <em>obj</em> is an argument to a method call, it is always evaluated; there is no short-circuit …\n"],["~","IO::Buffer","IO/Buffer.html#method-i-~","()","<p>Generate a new buffer the same size as the source by applying the binary NOT operation to the source. …\n"],["~","Regexp","Regexp.html#method-i-~","()","<p>Equivalent to <code><em>rxp</em> =~ $_</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-string\">&quot;input data&quot;</span>\n<span class=\"ruby-operator\">~</span> <span class=\"ruby-regexp\">/at/</span> <span class=\"ruby-comment\"># =&gt; 7</span>\n</pre>\n"],["NEWS-1.8.7","","NEWS/NEWS-1_8_7.html","","<p>NEWS for Ruby 1.8.7\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-1.9.1","","NEWS/NEWS-1_9_1.html","","<p>NEWS for Ruby 1.9.1\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-1.9.2","","NEWS/NEWS-1_9_2.html","","<p>NEWS for Ruby 1.9.2\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-1.9.3","","NEWS/NEWS-1_9_3.html","","<p>NEWS for Ruby 1.9.3\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.0.0","","NEWS/NEWS-2_0_0.html","","<p>NEWS for Ruby 2.0.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.1.0","","NEWS/NEWS-2_1_0.html","","<p>NEWS for Ruby 2.1.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.2.0","","NEWS/NEWS-2_2_0.html","","<p>NEWS for Ruby 2.2.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.3.0","","NEWS/NEWS-2_3_0.html","","<p>NEWS for Ruby 2.3.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.4.0","","NEWS/NEWS-2_4_0.html","","<p>NEWS for Ruby 2.4.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.5.0","","NEWS/NEWS-2_5_0.html","","<p>NEWS for Ruby 2.5.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.6.0","","NEWS/NEWS-2_6_0.html","","<p>NEWS for Ruby 2.6.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-2.7.0","","NEWS/NEWS-2_7_0.html","","<p>NEWS for Ruby 2.7.0\n<p>This document is a list of user visible feature changes made between releases except …\n"],["NEWS-3.0.0","","NEWS/NEWS-3_0_0_md.html","","<p>NEWS for Ruby 3.0.0\n<p>This document is a list of user visible feature changes\nsince the <strong>2.7.0</strong> release, except ...\n"],["NEWS-3.1.0","","NEWS/NEWS-3_1_0_md.html","","<p>NEWS for Ruby 3.1.0\n<p>This document is a list of user-visible feature changes\nsince the <strong>3.0.0</strong> release, except ...\n"],["bsearch","","bsearch_rdoc.html","","<p>Binary Searching\n<p>A few Ruby methods support binary searching in a collection:\n<p>Array#bsearch &mdash; Returns an …\n"],["bug_triaging","","bug_triaging_rdoc.html","","<p>Bug Triaging Guide\n<p>This guide discusses recommendations for triaging bugs in Ruby’s bug tracker.\n<p>Bugs …\n"],["case_mapping","","case_mapping_rdoc.html","","<p>Case Mapping\n<p>Some string-oriented methods use case mapping.\n<p>In String:\n"],["character_selectors","","character_selectors_rdoc.html","","<p>Character Selectors\n<p>Character Selector\n<p>A <em>character</em> <em>selector</em> is a string argument accepted by certain Ruby …\n"],["command_injection","","command_injection_rdoc.html","","<p>Command Injection\n<p>Some Ruby core methods accept string data that includes text to be executed as a system …\n"],["contributing","","contributing_md.html","","<p>Contributing to Ruby\n<p>This guide outlines ways to get started with contributing to Ruby:\n<p>Reporting issues …\n"],["building_ruby","","contributing/building_ruby_md.html","","<p>Building Ruby\n<p>Quick start guide\n<p>Install the prerequisite dependencies for building the CRuby interpreter: ...\n"],["documentation_guide","","contributing/documentation_guide_md.html","","<p>Documentation Guide\n<p>This guide discusses recommendations for documenting\nclasses, modules, and methods ...\n"],["making_changes_to_ruby","","contributing/making_changes_to_ruby_md.html","","<p>Contributing a pull request\n<p>Code style\n<p>Here are some general rules to follow when writing Ruby and C code …\n"],["making_changes_to_stdlibs","","contributing/making_changes_to_stdlibs_md.html","","<p>Making Changes To Standard Libraries\n<p>Everything in the lib directory is mirrored from a standalone repository …\n"],["reporting_issues","","contributing/reporting_issues_md.html","","<p>Reporting Issues\n<p>Reporting security issues\n<p>If you’ve found a security vulnerability, please follow …\n"],["testing_ruby","","contributing/testing_ruby_md.html","","<p>Testing Ruby\n<p>Test suites\n<p>There are several test suites in the Ruby codebase:\n"],["dig_methods","","dig_methods_rdoc.html","","<p>Dig Methods\n<p>Ruby’s <code>dig</code> methods are useful for accessing nested data structures.\n<p>Consider this data: …\n"],["dtrace_probes","","dtrace_probes_rdoc.html","","<p>DTrace Probes\n<p>A list of DTrace probes and their functionality. “Module” and “Function” …\n"],["encodings","","encodings_rdoc.html","","<p>Encodings\n<p>The Basics\n<p>A character encoding, often shortened to <em>encoding</em>, is a mapping between:\n"],["extension.ja","","extension_ja_rdoc.html","","<p>Rubyの拡張ライブラリの作り方\n<p>Rubyの拡張ライブラリの作り方を説明します．\n<p>基礎知識\n"],["extension","","extension_rdoc.html","","<p>Creating Extension Libraries for Ruby\n<p>This document explains how to make extension libraries for Ruby …\n"],["fiber","","fiber_md.html","","<p>Fiber\n<p>Fibers provide a mechanism for cooperative concurrency.\n<p>Context Switching\n"],["format_specifications","","format_specifications_rdoc.html","","<p>Format Specifications\n<p>Several Ruby core classes have instance method <code>printf</code> or <code>sprintf</code>:\n<p>ARGF#printf\n"],["globals","","globals_rdoc.html","","<p>Pre-defined global variables\n<p>$! &mdash; The Exception object set by Kernel#raise.\n<p>$@ &mdash; The same as <code>$!.backtrace</code>. …\n"],["implicit_conversion","","implicit_conversion_rdoc.html","","<p>Implicit Conversions\n<p>Some Ruby methods accept one or more objects that can be either:\n<p><em>Of a given class</em> …\n"],["keywords","","keywords_rdoc.html","","<p>Keywords\n<p>The following keywords are used by Ruby.\n<p>__ENCODING__ &mdash; The script encoding of the current file. …\n"],["maintainers","","maintainers_rdoc.html","","<p>Maintainers\n<p>This page describes the current module, library, and extension maintainers of Ruby.\n<p>Module …\n"],["marshal","","marshal_rdoc.html","","<p>Marshal Format\n<p>The Marshal format is used to serialize ruby objects.  The format can store arbitrary objects …\n"],["memory_view","","memory_view_md.html","","<p>MemoryView\n<p>MemoryView provides the features to share multidimensional homogeneous arrays of\nfixed-size ...\n"],["mjit","","mjit_md.html","","<p>MJIT\n<p>This document has some tips that might be useful when you work on MJIT.\n<p>Supported platforms\n"],["argument_converters","","optparse/argument_converters_rdoc.html","","<p>Argument Converters\n<p>An option can specify that its argument is to be converted from the default String …\n"],["creates_option","","optparse/creates_option_rdoc.html","","<p>Creates an option from the given parameters <code>params</code>. See Parameters for New Options.\n<p>The block, if given, …\n"],["option_params","","optparse/option_params_rdoc.html","","<p>Parameters for New Options\n<p>Option-creating methods in OptionParser accept arguments that determine the …\n"],["tutorial","","optparse/tutorial_rdoc.html","","<p>Tutorial\n<p>Why OptionParser?\n<p>When a Ruby program executes, it captures its command-line arguments and options …\n"],["ractor","","ractor_md.html","","<p>Ractor - Ruby’s Actor-like concurrent abstraction\n<p>Ractor is designed to provide a parallel execution …\n"],["regexp","","regexp_rdoc.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the contents of a string. They’re used …\n"],["security","","security_rdoc.html","","<p>Ruby Security\n<p>The Ruby programming language is large and complex and there are many security pitfalls …\n"],["signals","","signals_rdoc.html","","<p>Caveats for implementing Signal.trap callbacks\n<p>As with implementing signal handlers in C or most other …\n"],["standard_library","","standard_library_rdoc.html","","<p>Ruby Standard Library\n<p>The Ruby Standard Library is a vast collection of classes and modules that you can …\n"],["strftime_formatting","","strftime_formatting_rdoc.html","","<p>Formats for Dates and Times\n<p>Several Ruby time-related classes have instance method <code>strftime</code>, which returns …\n"],["syntax","","syntax_rdoc.html","","<p>Ruby Syntax\n<p>The Ruby syntax is large and is split up into the following sections:\n<p>Literals  &mdash; Numbers, Strings …\n"],["assignment","","syntax/assignment_rdoc.html","","<p>Assignment\n<p>In Ruby, assignment uses the <code>=</code> (equals sign) character.  This example assigns the number five …\n"],["calling_methods","","syntax/calling_methods_rdoc.html","","<p>Calling Methods\n<p>Calling a method sends a message to an object so it can perform some work.\n<p>In ruby you …\n"],["comments","","syntax/comments_rdoc.html","","<p>Code Comments\n<p>Ruby has two types of comments: inline and block.\n<p>Inline comments start with the <code>#</code> character …\n"],["control_expressions","","syntax/control_expressions_rdoc.html","","<p>Control Expressions\n<p>Ruby has a variety of ways to control execution.  All the expressions described here …\n"],["exceptions","","syntax/exceptions_rdoc.html","","<p>Exception Handling\n<p>Exceptions are rescued in a <code>begin</code>/<code>end</code> block:\n\n<pre>begin\n  # code that might raise\nrescue ...</pre>\n"],["literals","","syntax/literals_rdoc.html","","<p>Literals\n<p>Literals create objects you can use in your program.  Literals include:\n<p>Boolean and Nil Literals …\n"],["methods","","syntax/methods_rdoc.html","","<p>Methods\n<p>Methods implement the functionality of your program.  Here is a simple method definition:\n\n<pre>def one_plus_one ...</pre>\n"],["miscellaneous","","syntax/miscellaneous_rdoc.html","","<p>Miscellaneous Syntax\n<p>Ending an Expression\n<p>Ruby uses a newline as the end of an expression.  When ending …\n"],["modules_and_classes","","syntax/modules_and_classes_rdoc.html","","<p>Modules\n<p>Modules serve two purposes in Ruby, namespacing and mix-in functionality.\n<p>A namespace can be used …\n"],["pattern_matching","","syntax/pattern_matching_rdoc.html","","<p>Pattern matching\n<p>Pattern matching is a feature allowing deep matching of structured values: checking the …\n"],["precedence","","syntax/precedence_rdoc.html","","<p>Precedence\n<p>From highest to lowest, this is the precedence table for ruby.  High precedence operations …\n"],["refinements","","syntax/refinements_rdoc.html","","<p>Refinements\n<p>Due to Ruby’s open classes you can redefine or add functionality to existing classes. …\n"],["timezones","","timezones_rdoc.html","","<p>Timezones\n<p>Timezone Specifiers\n<p>Certain Time methods accept arguments that specify timezones:\n"]]}}